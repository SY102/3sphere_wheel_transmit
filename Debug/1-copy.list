
1-copy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004414  08004414  00005414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004528  08004528  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004528  08004528  00006064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004528  08004528  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004528  08004528  00005528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800452c  0800452c  0000552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004530  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000064  08004594  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004594  000062a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3c8  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002332  00000000  00000000  00011455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00013788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a1  00000000  00000000  000142f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aa3  00000000  00000000  00014b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcf8  00000000  00000000  0002d634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089654  00000000  00000000  0003b32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4980  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e0  00000000  00000000  000c49c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c7ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080043fc 	.word	0x080043fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080043fc 	.word	0x080043fc

0800014c <csn_high>:
uint8_t nrf24_get_status(void)
{
    return nrf24_r_reg(STATUS, 1);  // ★ 'STATUS' 사용 (NRF_STATUS 아님)
}

void csn_high(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	4802      	ldr	r0, [pc, #8]	@ (8000160 <csn_high+0x14>)
 8000156:	f001 ff3f 	bl	8001fd8 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 시작 표시
	   // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <csn_low>:



void csn_low(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	2101      	movs	r1, #1
 800016c:	4802      	ldr	r0, [pc, #8]	@ (8000178 <csn_low+0x14>)
 800016e:	f001 ff33 	bl	8001fd8 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 종료 표시
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ce_high>:

void ce_high(void){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000186:	4802      	ldr	r0, [pc, #8]	@ (8000190 <ce_high+0x14>)
 8000188:	f001 ff26 	bl	8001fd8 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <ce_low>:

void ce_low(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019e:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <ce_low+0x14>)
 80001a0:	f001 ff1a 	bl	8001fd8 <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	6039      	str	r1, [r7, #0]
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001c6:	f7ff ffcd 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001ca:	f107 010f 	add.w	r1, r7, #15
 80001ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d2:	2201      	movs	r2, #1
 80001d4:	4808      	ldr	r0, [pc, #32]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001d6:	f002 fd17 	bl	8002c08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	b29a      	uxth	r2, r3
 80001de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e2:	6839      	ldr	r1, [r7, #0]
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001e6:	f002 fd0f 	bl	8002c08 <HAL_SPI_Transmit>

	csn_high();
 80001ea:	f7ff ffaf 	bl	800014c <csn_high>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	200000b0 	.word	0x200000b0

080001fc <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	4613      	mov	r3, r2
 800020a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000214:	f7ff ffa6 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000218:	f107 010f 	add.w	r1, r7, #15
 800021c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000220:	2201      	movs	r2, #1
 8000222:	4809      	ldr	r0, [pc, #36]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000224:	f002 fcf0 	bl	8002c08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000228:	79bb      	ldrb	r3, [r7, #6]
 800022a:	b29a      	uxth	r2, r3
 800022c:	f107 010e 	add.w	r1, r7, #14
 8000230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000234:	4804      	ldr	r0, [pc, #16]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000236:	f002 fe2b 	bl	8002e90 <HAL_SPI_Receive>

	csn_high();
 800023a:	f7ff ff87 	bl	800014c <csn_high>

	return data;
 800023e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200000b0 	.word	0x200000b0

0800024c <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000256:	1df9      	adds	r1, r7, #7
 8000258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800025c:	2201      	movs	r2, #1
 800025e:	4803      	ldr	r0, [pc, #12]	@ (800026c <nrf24_w_spec_cmd+0x20>)
 8000260:	f002 fcd2 	bl	8002c08 <HAL_SPI_Transmit>
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200000b0 	.word	0x200000b0

08000270 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800027a:	2101      	movs	r1, #1
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ffbd 	bl	80001fc <nrf24_r_reg>
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f043 0302 	orr.w	r3, r3, #2
 800028c:	b2db      	uxtb	r3, r3
 800028e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	2201      	movs	r2, #1
 8000294:	4619      	mov	r1, r3
 8000296:	2000      	movs	r0, #0
 8000298:	f7ff ff88 	bl	80001ac <nrf24_w_reg>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <nrf24_pwr_dwn>:

void nrf24_pwr_dwn(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80002ae:	2101      	movs	r1, #1
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ffa3 	bl	80001fc <nrf24_r_reg>
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PWR_UP);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f023 0302 	bic.w	r3, r3, #2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	2201      	movs	r2, #1
 80002c8:	4619      	mov	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f7ff ff6e 	bl	80001ac <nrf24_w_reg>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <nrf24_tx_pwr>:

void nrf24_tx_pwr(uint8_t pwr){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80002e6:	2101      	movs	r1, #1
 80002e8:	2006      	movs	r0, #6
 80002ea:	f7ff ff87 	bl	80001fc <nrf24_r_reg>
 80002ee:	4603      	mov	r3, r0
 80002f0:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	b25a      	sxtb	r2, r3
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	b25b      	sxtb	r3, r3
 8000308:	4313      	orrs	r3, r2
 800030a:	b25b      	sxtb	r3, r3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000310:	f107 030f 	add.w	r3, r7, #15
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	2006      	movs	r0, #6
 800031a:	f7ff ff47 	bl	80001ac <nrf24_w_reg>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	4603      	mov	r3, r0
 800032e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000334:	2101      	movs	r1, #1
 8000336:	2006      	movs	r0, #6
 8000338:	f7ff ff60 	bl	80001fc <nrf24_r_reg>
 800033c:	4603      	mov	r3, r0
 800033e:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000346:	b2db      	uxtb	r3, r3
 8000348:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d105      	bne.n	800035c <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	b2db      	uxtb	r3, r3
 8000358:	73fb      	strb	r3, [r7, #15]
 800035a:	e007      	b.n	800036c <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d104      	bne.n	800036c <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f043 0320 	orr.w	r3, r3, #32
 8000368:	b2db      	uxtb	r3, r3
 800036a:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 800036c:	f107 030f 	add.w	r3, r7, #15
 8000370:	2201      	movs	r2, #1
 8000372:	4619      	mov	r1, r3
 8000374:	2006      	movs	r0, #6
 8000376:	f7ff ff19 	bl	80001ac <nrf24_w_reg>
}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000382:	b580      	push	{r7, lr}
 8000384:	b082      	sub	sp, #8
 8000386:	af00      	add	r7, sp, #0
 8000388:	4603      	mov	r3, r0
 800038a:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	2005      	movs	r0, #5
 8000394:	f7ff ff0a 	bl	80001ac <nrf24_w_reg>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 80003a8:	2205      	movs	r2, #5
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	2010      	movs	r0, #16
 80003ae:	f7ff fefd 	bl	80001ac <nrf24_w_reg>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	460a      	mov	r2, r1
 80003c6:	71fb      	strb	r3, [r7, #7]
 80003c8:	4613      	mov	r3, r2
 80003ca:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	2b20      	cmp	r3, #32
 80003d0:	d901      	bls.n	80003d6 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 80003d2:	2320      	movs	r3, #32
 80003d4:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b05      	cmp	r3, #5
 80003da:	d839      	bhi.n	8000450 <nrf24_pipe_pld_size+0x94>
 80003dc:	a201      	add	r2, pc, #4	@ (adr r2, 80003e4 <nrf24_pipe_pld_size+0x28>)
 80003de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e2:	bf00      	nop
 80003e4:	080003fd 	.word	0x080003fd
 80003e8:	0800040b 	.word	0x0800040b
 80003ec:	08000419 	.word	0x08000419
 80003f0:	08000427 	.word	0x08000427
 80003f4:	08000435 	.word	0x08000435
 80003f8:	08000443 	.word	0x08000443
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 80003fc:	1dbb      	adds	r3, r7, #6
 80003fe:	2201      	movs	r2, #1
 8000400:	4619      	mov	r1, r3
 8000402:	2011      	movs	r0, #17
 8000404:	f7ff fed2 	bl	80001ac <nrf24_w_reg>

		break;
 8000408:	e022      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800040a:	1dbb      	adds	r3, r7, #6
 800040c:	2201      	movs	r2, #1
 800040e:	4619      	mov	r1, r3
 8000410:	2012      	movs	r0, #18
 8000412:	f7ff fecb 	bl	80001ac <nrf24_w_reg>

		break;
 8000416:	e01b      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 8000418:	1dbb      	adds	r3, r7, #6
 800041a:	2201      	movs	r2, #1
 800041c:	4619      	mov	r1, r3
 800041e:	2013      	movs	r0, #19
 8000420:	f7ff fec4 	bl	80001ac <nrf24_w_reg>

		break;
 8000424:	e014      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	2014      	movs	r0, #20
 800042e:	f7ff febd 	bl	80001ac <nrf24_w_reg>

		break;
 8000432:	e00d      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000434:	1dbb      	adds	r3, r7, #6
 8000436:	2201      	movs	r2, #1
 8000438:	4619      	mov	r1, r3
 800043a:	2015      	movs	r0, #21
 800043c:	f7ff feb6 	bl	80001ac <nrf24_w_reg>

		break;
 8000440:	e006      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	2201      	movs	r2, #1
 8000446:	4619      	mov	r1, r3
 8000448:	2016      	movs	r0, #22
 800044a:	f7ff feaf 	bl	80001ac <nrf24_w_reg>

		break;
 800044e:	bf00      	nop
	}
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <nrf24_cls_rx_pipe>:
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_cls_rx_pipe(uint8_t pipe){
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(EN_RXADDR, 1);
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fec9 	bl	80001fc <nrf24_r_reg>
 800046a:	4603      	mov	r3, r0
 800046c:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << pipe);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2201      	movs	r2, #1
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	b25b      	sxtb	r3, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	b25a      	sxtb	r2, r3
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	b25b      	sxtb	r3, r3
 8000480:	4013      	ands	r3, r2
 8000482:	b25b      	sxtb	r3, r3
 8000484:	b2db      	uxtb	r3, r3
 8000486:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000488:	f107 030f 	add.w	r3, r7, #15
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	2002      	movs	r0, #2
 8000492:	f7ff fe8b 	bl	80001ac <nrf24_w_reg>
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <nrf24_set_crc>:

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 800049e:	b580      	push	{r7, lr}
 80004a0:	b084      	sub	sp, #16
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	460a      	mov	r2, r1
 80004a8:	71fb      	strb	r3, [r7, #7]
 80004aa:	4613      	mov	r3, r2
 80004ac:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80004ae:	2101      	movs	r1, #1
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fea3 	bl	80001fc <nrf24_r_reg>
 80004b6:	4603      	mov	r3, r0
 80004b8:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	f023 030c 	bic.w	r3, r3, #12
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	4313      	orrs	r3, r2
 80004de:	b25b      	sxtb	r3, r3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80004e4:	f107 030f 	add.w	r3, r7, #15
 80004e8:	2201      	movs	r2, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fe5d 	bl	80001ac <nrf24_w_reg>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4603      	mov	r3, r0
 8000502:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	3b02      	subs	r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	2003      	movs	r0, #3
 8000514:	f7ff fe4a 	bl	80001ac <nrf24_w_reg>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	csn_low();
 8000524:	f7ff fe1e 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000528:	20e1      	movs	r0, #225	@ 0xe1
 800052a:	f7ff fe8f 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 800052e:	f7ff fe0d 	bl	800014c <csn_high>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}

08000536 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
	csn_low();
 800053a:	f7ff fe13 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 800053e:	20e2      	movs	r0, #226	@ 0xe2
 8000540:	f7ff fe84 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 8000544:	f7ff fe02 	bl	800014c <csn_high>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8000556:	23ff      	movs	r3, #255	@ 0xff
 8000558:	71bb      	strb	r3, [r7, #6]

	csn_low();
 800055a:	f7ff fe03 	bl	8000164 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 800055e:	1dfa      	adds	r2, r7, #7
 8000560:	1db9      	adds	r1, r7, #6
 8000562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2301      	movs	r3, #1
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <nrf24_r_status+0x34>)
 800056c:	f002 fda9 	bl	80030c2 <HAL_SPI_TransmitReceive>
	csn_high();
 8000570:	f7ff fdec 	bl	800014c <csn_high>

	return data;
 8000574:	79fb      	ldrb	r3, [r7, #7]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000b0 	.word	0x200000b0

08000584 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800058e:	f7ff ffdd 	bl	800054c <nrf24_r_status>
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800059c:	b2db      	uxtb	r3, r3
 800059e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	2007      	movs	r0, #7
 80005a8:	f7ff fe00 	bl	80001ac <nrf24_w_reg>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005be:	f7ff ffc5 	bl	800054c <nrf24_r_status>
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	2007      	movs	r0, #7
 80005d8:	f7ff fde8 	bl	80001ac <nrf24_w_reg>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005ee:	f7ff ffad 	bl	800054c <nrf24_r_status>
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f043 0310 	orr.w	r3, r3, #16
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	2007      	movs	r0, #7
 8000608:	f7ff fdd0 	bl	80001ac <nrf24_w_reg>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800061e:	2101      	movs	r1, #1
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fdeb 	bl	80001fc <nrf24_r_reg>
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fdb6 	bl	80001ac <nrf24_w_reg>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000652:	2101      	movs	r1, #1
 8000654:	201d      	movs	r0, #29
 8000656:	f7ff fdd1 	bl	80001fc <nrf24_r_reg>
 800065a:	4603      	mov	r3, r0
 800065c:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d105      	bne.n	8000670 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e004      	b.n	800067a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	f023 0304 	bic.w	r3, r3, #4
 8000676:	b2db      	uxtb	r3, r3
 8000678:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800067a:	f107 030f 	add.w	r3, r7, #15
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	201d      	movs	r0, #29
 8000684:	f7ff fd92 	bl	80001ac <nrf24_w_reg>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 80006a0:	2101      	movs	r1, #1
 80006a2:	201c      	movs	r0, #28
 80006a4:	f7ff fdaa 	bl	80001fc <nrf24_r_reg>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d901      	bls.n	80006b6 <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 80006b2:	2305      	movs	r3, #5
 80006b4:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00b      	beq.n	80006d4 <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2201      	movs	r2, #1
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	e00c      	b.n	80006ee <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2201      	movs	r2, #1
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	4013      	ands	r3, r2
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 80006ee:	f107 030f 	add.w	r3, r7, #15
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	201c      	movs	r0, #28
 80006f8:	f7ff fd58 	bl	80001ac <nrf24_w_reg>
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <nrf24_auto_ack>:

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d901      	bls.n	800071e <nrf24_auto_ack+0x1a>
		pipe = 5;
 800071a:	2305      	movs	r3, #5
 800071c:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800071e:	2101      	movs	r1, #1
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff fd6b 	bl	80001fc <nrf24_r_reg>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00b      	beq.n	8000748 <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2201      	movs	r2, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	b25a      	sxtb	r2, r3
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	b25b      	sxtb	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b25b      	sxtb	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e00c      	b.n	8000762 <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2201      	movs	r2, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	b25b      	sxtb	r3, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	b25a      	sxtb	r2, r3
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	b25b      	sxtb	r3, r3
 800075a:	4013      	ands	r3, r2
 800075c:	b25b      	sxtb	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000762:	f107 030f 	add.w	r3, r7, #15
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fd1e 	bl	80001ac <nrf24_w_reg>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <nrf24_auto_ack_all>:

void nrf24_auto_ack_all(uint8_t ack){
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000782:	2101      	movs	r1, #1
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff fd39 	bl	80001fc <nrf24_r_reg>
 800078a:	4603      	mov	r3, r0
 800078c:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <nrf24_auto_ack_all+0x22>
		enaa = 63;
 8000794:	233f      	movs	r3, #63	@ 0x3f
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e001      	b.n	800079e <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 800079e:	f107 030f 	add.w	r3, r7, #15
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fd00 	bl	80001ac <nrf24_w_reg>
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80007be:	2101      	movs	r1, #1
 80007c0:	201d      	movs	r0, #29
 80007c2:	f7ff fd1b 	bl	80001fc <nrf24_r_reg>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73fb      	strb	r3, [r7, #15]

	if(en){
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e004      	b.n	80007e6 <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f023 0302 	bic.w	r3, r3, #2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80007e6:	f107 030f 	add.w	r3, r7, #15
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	201d      	movs	r0, #29
 80007f0:	f7ff fcdc 	bl	80001ac <nrf24_w_reg>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000806:	2101      	movs	r1, #1
 8000808:	201d      	movs	r0, #29
 800080a:	f7ff fcf7 	bl	80001fc <nrf24_r_reg>
 800080e:	4603      	mov	r3, r0
 8000810:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e004      	b.n	800082e <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f023 0301 	bic.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800082e:	f107 030f 	add.w	r3, r7, #15
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	201d      	movs	r0, #29
 8000838:	f7ff fcb8 	bl	80001ac <nrf24_w_reg>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <nrf24_auto_retr_delay>:

void nrf24_auto_retr_delay(uint8_t delay){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 800084e:	2101      	movs	r1, #1
 8000850:	2004      	movs	r0, #4
 8000852:	f7ff fcd3 	bl	80001fc <nrf24_r_reg>
 8000856:	4603      	mov	r3, r0
 8000858:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	f003 030f 	and.w	r3, r3, #15
 8000860:	b2db      	uxtb	r3, r3
 8000862:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	b25a      	sxtb	r2, r3
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	b25b      	sxtb	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8000878:	f107 030f 	add.w	r3, r7, #15
 800087c:	2201      	movs	r2, #1
 800087e:	4619      	mov	r1, r3
 8000880:	2004      	movs	r0, #4
 8000882:	f7ff fc93 	bl	80001ac <nrf24_w_reg>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000898:	2101      	movs	r1, #1
 800089a:	2004      	movs	r0, #4
 800089c:	f7ff fcae 	bl	80001fc <nrf24_r_reg>
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	f023 030f 	bic.w	r3, r3, #15
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80008b8:	f107 030f 	add.w	r3, r7, #15
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	2004      	movs	r0, #4
 80008c2:	f7ff fc73 	bl	80001ac <nrf24_w_reg>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]

	ce_low();
 80008dc:	f7ff fc5a 	bl	8000194 <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 80008e0:	23a0      	movs	r3, #160	@ 0xa0
 80008e2:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80008e4:	f7ff fc3e 	bl	8000164 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80008e8:	f107 010f 	add.w	r1, r7, #15
 80008ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f0:	2201      	movs	r2, #1
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <nrf24_transmit+0x70>)
 80008f4:	f002 f988 	bl	8002c08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	480f      	ldr	r0, [pc, #60]	@ (8000940 <nrf24_transmit+0x70>)
 8000904:	f002 f980 	bl	8002c08 <HAL_SPI_Transmit>
	csn_high();
 8000908:	f7ff fc20 	bl	800014c <csn_high>

	ce_high();
 800090c:	f7ff fc36 	bl	800017c <ce_high>
	HAL_Delay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f000 fc7d 	bl	8001210 <HAL_Delay>
	ce_low();
 8000916:	f7ff fc3d 	bl	8000194 <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 800091a:	f7ff fe17 	bl	800054c <nrf24_r_status>
 800091e:	4603      	mov	r3, r0
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 8000928:	f7ff fe5c 	bl	80005e4 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 800092c:	f7ff fdf8 	bl	8000520 <nrf24_flush_tx>
		return 1;
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <nrf24_transmit+0x66>
	}

	return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000b0 	.word	0x200000b0

08000944 <nrf24_defaults>:
	csn_high();

	nrf24_clear_rx_dr();
}

void nrf24_defaults(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	ce_low();
 800094a:	f7ff fc23 	bl	8000194 <ce_low>

	nrf24_pwr_dwn();
 800094e:	f7ff fca9 	bl	80002a4 <nrf24_pwr_dwn>
	nrf24_tx_pwr(3);
 8000952:	2003      	movs	r0, #3
 8000954:	f7ff fcc0 	bl	80002d8 <nrf24_tx_pwr>
	nrf24_data_rate(_1mbps);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fce4 	bl	8000326 <nrf24_data_rate>
	nrf24_set_channel(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff fd0f 	bl	8000382 <nrf24_set_channel>
	nrf24_set_crc(no_crc, _1byte);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fd99 	bl	800049e <nrf24_set_crc>
	nrf24_set_addr_width(5);
 800096c:	2005      	movs	r0, #5
 800096e:	f7ff fdc4 	bl	80004fa <nrf24_set_addr_width>
	nrf24_flush_tx();
 8000972:	f7ff fdd5 	bl	8000520 <nrf24_flush_tx>
	nrf24_flush_rx();
 8000976:	f7ff fdde 	bl	8000536 <nrf24_flush_rx>
	nrf24_clear_rx_dr();
 800097a:	f7ff fe03 	bl	8000584 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 800097e:	f7ff fe19 	bl	80005b4 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000982:	f7ff fe2f 	bl	80005e4 <nrf24_clear_max_rt>
	nrf24_stop_listen();
 8000986:	f7ff fe45 	bl	8000614 <nrf24_stop_listen>
	nrf24_dpl(disable);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe5c 	bl	8000648 <nrf24_dpl>
	nrf24_en_ack_pld(disable);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ff0f 	bl	80007b4 <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff30 	bl	80007fc <nrf24_en_dyn_ack>
	nrf24_auto_retr_delay(0);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ff51 	bl	8000844 <nrf24_auto_retr_delay>
	nrf24_auto_retr_limit(3);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f7ff ff73 	bl	800088e <nrf24_auto_retr_limit>


	for(uint8_t i = 0; i < 5; i++){
 80009a8:	2300      	movs	r3, #0
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	e015      	b.n	80009da <nrf24_defaults+0x96>
		nrf24_pipe_pld_size(i, 0);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd02 	bl	80003bc <nrf24_pipe_pld_size>
		nrf24_cls_rx_pipe(i);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fd4c 	bl	8000458 <nrf24_cls_rx_pipe>
		nrf24_set_rx_dpl(i, disable);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe63 	bl	8000690 <nrf24_set_rx_dpl>
		nrf24_auto_ack(i, enable);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe98 	bl	8000704 <nrf24_auto_ack>
	for(uint8_t i = 0; i < 5; i++){
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	3301      	adds	r3, #1
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d9e6      	bls.n	80009ae <nrf24_defaults+0x6a>
	}

	ce_high();
 80009e0:	f7ff fbcc 	bl	800017c <ce_high>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <nrf24_init>:

void nrf24_init(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80009f0:	f7ff fc3e 	bl	8000270 <nrf24_pwr_up>

	nrf24_flush_tx();
 80009f4:	f7ff fd94 	bl	8000520 <nrf24_flush_tx>
	nrf24_flush_rx();
 80009f8:	f7ff fd9d 	bl	8000536 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80009fc:	f7ff fdc2 	bl	8000584 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8000a00:	f7ff fdd8 	bl	80005b4 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000a04:	f7ff fdee 	bl	80005e4 <nrf24_clear_max_rt>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_ADC1_Init+0x44>)
 8000a12:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <MX_ADC1_Init+0x48>)
 8000a14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_ADC1_Init+0x44>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_ADC1_Init+0x44>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_ADC1_Init+0x44>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_ADC1_Init+0x44>)
 8000a2a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <MX_ADC1_Init+0x44>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_ADC1_Init+0x44>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <MX_ADC1_Init+0x44>)
 8000a3e:	f000 fc0b 	bl	8001258 <HAL_ADC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x40>
  {
    Error_Handler();
 8000a48:	f000 f9c5 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000080 	.word	0x20000080
 8000a54:	40012400 	.word	0x40012400

08000a58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <HAL_ADC_MspInit+0x6c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d121      	bne.n	8000abc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <HAL_ADC_MspInit+0x70>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a12      	ldr	r2, [pc, #72]	@ (8000ac8 <HAL_ADC_MspInit+0x70>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <HAL_ADC_MspInit+0x70>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_ADC_MspInit+0x70>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <HAL_ADC_MspInit+0x70>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_ADC_MspInit+0x70>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = X_axis_Pin|Y_axis_Pin|Z_axis_Pin;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aac:	2303      	movs	r3, #3
 8000aae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_ADC_MspInit+0x74>)
 8000ab8:	f001 f90a 	bl	8001cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40012400 	.word	0x40012400
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40011000 	.word	0x40011000

08000ad0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0310 	and.w	r3, r3, #16
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000b02:	f043 0320 	orr.w	r3, r3, #32
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0320 	and.w	r3, r3, #32
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a11      	ldr	r2, [pc, #68]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_GPIO_Init+0x90>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin_Pin|CE_Pin_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f240 1101 	movw	r1, #257	@ 0x101
 8000b32:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <MX_GPIO_Init+0x94>)
 8000b34:	f001 fa50 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin_Pin CE_Pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin|CE_Pin_Pin;
 8000b38:	f240 1301 	movw	r3, #257	@ 0x101
 8000b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_GPIO_Init+0x94>)
 8000b52:	f001 f8bd 	bl	8001cd0 <HAL_GPIO_Init>

}
 8000b56:	bf00      	nop
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010800 	.word	0x40010800

08000b68 <nrf24_set_payload_size>:
 * Receive data
 */
void nrf24_receive(uint8_t *data, uint8_t size);

static inline void nrf24_set_payload_size(uint8_t size)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
    nrf24_pipe_pld_size(0, size);   // 파이프 0만 사용
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4619      	mov	r1, r3
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff fc20 	bl	80003bc <nrf24_pipe_pld_size>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <nrf24_transmitter_setup>:
extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart2;


void nrf24_transmitter_setup(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    nrf24_defaults();                //레지스터 기본값으로 초기화
 8000b88:	f7ff fedc 	bl	8000944 <nrf24_defaults>
    nrf24_pwr_up();
 8000b8c:	f7ff fb70 	bl	8000270 <nrf24_pwr_up>
    nrf24_flush_tx();
 8000b90:	f7ff fcc6 	bl	8000520 <nrf24_flush_tx>
    nrf24_flush_rx();
 8000b94:	f7ff fccf 	bl	8000536 <nrf24_flush_rx>
    nrf24_clear_rx_dr();
 8000b98:	f7ff fcf4 	bl	8000584 <nrf24_clear_rx_dr>
    nrf24_clear_tx_ds();
 8000b9c:	f7ff fd0a 	bl	80005b4 <nrf24_clear_tx_ds>
    nrf24_clear_max_rt();
 8000ba0:	f7ff fd20 	bl	80005e4 <nrf24_clear_max_rt>
    nrf24_stop_listen();             //수신모드 비활성화 하여 송신 전용 모드로 전환
 8000ba4:	f7ff fd36 	bl	8000614 <nrf24_stop_listen>

    nrf24_set_channel(40);           //무선 채널 40번으로 설정
 8000ba8:	2028      	movs	r0, #40	@ 0x28
 8000baa:	f7ff fbea 	bl	8000382 <nrf24_set_channel>
    nrf24_auto_ack_all(disable);     //자동 ack기능 off=>단순 송신만 수행
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f7ff fde2 	bl	8000778 <nrf24_auto_ack_all>
    nrf24_set_payload_size(6);      //한번에 전송할 페이로드 크기 최대 32바이트
 8000bb4:	2006      	movs	r0, #6
 8000bb6:	f7ff ffd7 	bl	8000b68 <nrf24_set_payload_size>
    nrf24_tx_pwr(3);
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f7ff fb8c 	bl	80002d8 <nrf24_tx_pwr>
    nrf24_data_rate(_1mbps);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fbb0 	bl	8000326 <nrf24_data_rate>
    nrf24_open_tx_pipe(tx_address);  //파이프 0에 tx_address를 열어 송신 대상 지정
 8000bc6:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <nrf24_transmitter_setup+0x50>)
 8000bc8:	f7ff fbea 	bl	80003a0 <nrf24_open_tx_pipe>
    nrf24_pwr_up();                  //모듈 power up=>송신 준비 완료
 8000bcc:	f7ff fb50 	bl	8000270 <nrf24_pwr_up>

   // nrf24_dpl(enable);               //dpl활성화
     // nrf24_set_rx_dpl(0, enable);
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <ReadADC_Channel>:
void transmit_text(const char* msg) {
    nrf24_transmit((uint8_t*)msg, strlen(msg));
}


static uint32_t ReadADC_Channel(uint32_t channel) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

	   ADC_ChannelConfTypeDef sConfig = {0};              //채널 구성 구조체 초기화
 8000be0:	f107 0308 	add.w	r3, r7, #8
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
	    sConfig.Channel      = channel;                    //변환할 채널 지정
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60bb      	str	r3, [r7, #8]
	    sConfig.Rank         = ADC_REGULAR_RANK_1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
	    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5; //샘플링 타임 설정
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	613b      	str	r3, [r7, #16]
	    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <ReadADC_Channel+0x54>)
 8000c00:	f000 fdee 	bl	80017e0 <HAL_ADC_ConfigChannel>

	    HAL_ADC_Start(&hadc1);                             //변환 시작
 8000c04:	4809      	ldr	r0, [pc, #36]	@ (8000c2c <ReadADC_Channel+0x54>)
 8000c06:	f000 fbff 	bl	8001408 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);  //변환 완료 대기
 8000c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0e:	4807      	ldr	r0, [pc, #28]	@ (8000c2c <ReadADC_Channel+0x54>)
 8000c10:	f000 fcd4 	bl	80015bc <HAL_ADC_PollForConversion>
	    uint32_t value = HAL_ADC_GetValue(&hadc1);         //변환 결과 읽기
 8000c14:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <ReadADC_Channel+0x54>)
 8000c16:	f000 fdd7 	bl	80017c8 <HAL_ADC_GetValue>
 8000c1a:	6178      	str	r0, [r7, #20]
	    HAL_ADC_Stop(&hadc1);
 8000c1c:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <ReadADC_Channel+0x54>)
 8000c1e:	f000 fca1 	bl	8001564 <HAL_ADC_Stop>
	    return value;
 8000c22:	697b      	ldr	r3, [r7, #20]

    return value;
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000080 	.word	0x20000080

08000c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b098      	sub	sp, #96	@ 0x60
 8000c34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c36:	f000 fa89 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3a:	f000 f871 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3e:	f7ff ff47 	bl	8000ad0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c42:	f000 f8cf 	bl	8000de4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c46:	f000 f9e7 	bl	8001018 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c4a:	f7ff fedf 	bl	8000a0c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  nrf24_init();
 8000c4e:	f7ff fecd 	bl	80009ec <nrf24_init>

 // char buf[64];
  nrf24_transmitter_setup();
 8000c52:	f7ff ff97 	bl	8000b84 <nrf24_transmitter_setup>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // 1) X/Y/Z 읽기
	     uint16_t x = ReadADC_Channel(ADC_CHANNEL_10);   // 0~4095
 8000c56:	200a      	movs	r0, #10
 8000c58:	f7ff ffbe 	bl	8000bd8 <ReadADC_Channel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	     uint16_t y = ReadADC_Channel(ADC_CHANNEL_11);
 8000c62:	200b      	movs	r0, #11
 8000c64:	f7ff ffb8 	bl	8000bd8 <ReadADC_Channel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
	     uint16_t z = ReadADC_Channel(ADC_CHANNEL_12);
 8000c6e:	200c      	movs	r0, #12
 8000c70:	f7ff ffb2 	bl	8000bd8 <ReadADC_Channel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

	     // 2) 6바이트 이진 패킹
	     uint8_t payload[6];
	     payload[0] = (uint8_t)( x        & 0xFF);      // X LSB
 8000c7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	     payload[1] = (uint8_t)((x >> 8) & 0x0F);       // X MSB (12bit)
 8000c84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	     payload[2] = (uint8_t)( y        & 0xFF);      // Y LSB
 8000c98:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	     payload[3] = (uint8_t)((y >> 8) & 0x0F);       // Y MSB
 8000ca2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	     payload[4] = (uint8_t)( z        & 0xFF);      // Z LSB
 8000cb6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	     payload[5] = (uint8_t)((z >> 8) & 0x0F);       // Z MSB
 8000cc0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

	     // 3) 무선 전송 (6바이트)
	     nrf24_transmit(payload, 6);
 8000cd4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000cd8:	2106      	movs	r1, #6
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fdf8 	bl	80008d0 <nrf24_transmit>

	     // 4) UART 디버그: ASCII 숫자만 보기
	     char dbg[64];
	     int dlen = snprintf(dbg, sizeof(dbg),
 8000ce0:	f8b7 1056 	ldrh.w	r1, [r7, #86]	@ 0x56
 8000ce4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000ce8:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000cec:	1d38      	adds	r0, r7, #4
 8000cee:	9201      	str	r2, [sp, #4]
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <main+0xe8>)
 8000cf6:	2140      	movs	r1, #64	@ 0x40
 8000cf8:	f002 febc 	bl	8003a74 <sniprintf>
 8000cfc:	64f8      	str	r0, [r7, #76]	@ 0x4c
	                        "X:%u  Y:%u  Z:%u\r\n",
	                        x, y, z);
	     HAL_UART_Transmit(&huart2, (uint8_t*)dbg, dlen, HAL_MAX_DELAY);
 8000cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	1d39      	adds	r1, r7, #4
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <main+0xec>)
 8000d0a:	f002 fcde 	bl	80036ca <HAL_UART_Transmit>

	     // 5) 전송 속도 제어
	     HAL_Delay(10);
 8000d0e:	200a      	movs	r0, #10
 8000d10:	f000 fa7e 	bl	8001210 <HAL_Delay>
  {
 8000d14:	bf00      	nop
 8000d16:	e79e      	b.n	8000c56 <main+0x26>
 8000d18:	080044a0 	.word	0x080044a0
 8000d1c:	2000010c 	.word	0x2000010c

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	@ 0x50
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d2a:	2228      	movs	r2, #40	@ 0x28
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 fed6 	bl	8003ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d50:	2301      	movs	r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d54:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d62:	2302      	movs	r3, #2
 8000d64:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d6c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 f946 	bl	8002008 <HAL_RCC_OscConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d82:	f000 f828 	bl	8000dd6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d86:	230f      	movs	r3, #15
 8000d88:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d96:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2102      	movs	r1, #2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fbb2 	bl	800250c <HAL_RCC_ClockConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dae:	f000 f812 	bl	8000dd6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000db2:	2302      	movs	r3, #2
 8000db4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fd32 	bl	8002828 <HAL_RCCEx_PeriphCLKConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dca:	f000 f804 	bl	8000dd6 <Error_Handler>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3750      	adds	r7, #80	@ 0x50
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dda:	b672      	cpsid	i
}
 8000ddc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dde:	bf00      	nop
 8000de0:	e7fd      	b.n	8000dde <Error_Handler+0x8>
	...

08000de4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000de8:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000dea:	4a18      	ldr	r2, [pc, #96]	@ (8000e4c <MX_SPI1_Init+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000df0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e18:	2218      	movs	r2, #24
 8000e1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e28:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e30:	220a      	movs	r2, #10
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <MX_SPI1_Init+0x64>)
 8000e36:	f001 fe63 	bl	8002b00 <HAL_SPI_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e40:	f7ff ffc9 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200000b0 	.word	0x200000b0
 8000e4c:	40013000 	.word	0x40013000

08000e50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <HAL_SPI_MspInit+0x88>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d12f      	bne.n	8000ed0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e70:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <HAL_SPI_MspInit+0x8c>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a19      	ldr	r2, [pc, #100]	@ (8000edc <HAL_SPI_MspInit+0x8c>)
 8000e76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <HAL_SPI_MspInit+0x8c>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <HAL_SPI_MspInit+0x8c>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a13      	ldr	r2, [pc, #76]	@ (8000edc <HAL_SPI_MspInit+0x8c>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_SPI_MspInit+0x8c>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ea0:	23a0      	movs	r3, #160	@ 0xa0
 8000ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <HAL_SPI_MspInit+0x90>)
 8000eb4:	f000 ff0c 	bl	8001cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eb8:	2340      	movs	r3, #64	@ 0x40
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <HAL_SPI_MspInit+0x90>)
 8000ecc:	f000 ff00 	bl	8001cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40013000 	.word	0x40013000
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010800 	.word	0x40010800

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	4a14      	ldr	r2, [pc, #80]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6193      	str	r3, [r2, #24]
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <HAL_MspInit+0x5c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_MspInit+0x60>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_MspInit+0x60>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f91e 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	@ (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f002 fd8e 	bl	8003af0 <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20005000 	.word	0x20005000
 8001000:	00000400 	.word	0x00000400
 8001004:	20000108 	.word	0x20000108
 8001008:	200002a0 	.word	0x200002a0

0800100c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <MX_USART2_UART_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001050:	f002 faeb 	bl	800362a <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800105a:	f7ff febc 	bl	8000dd6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000010c 	.word	0x2000010c
 8001068:	40004400 	.word	0x40004400

0800106c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a1b      	ldr	r2, [pc, #108]	@ (80010f4 <HAL_UART_MspInit+0x88>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d12f      	bne.n	80010ec <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <HAL_UART_MspInit+0x8c>)
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	4a19      	ldr	r2, [pc, #100]	@ (80010f8 <HAL_UART_MspInit+0x8c>)
 8001092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001096:	61d3      	str	r3, [r2, #28]
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_UART_MspInit+0x8c>)
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_UART_MspInit+0x8c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <HAL_UART_MspInit+0x8c>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_UART_MspInit+0x8c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010bc:	2304      	movs	r3, #4
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480b      	ldr	r0, [pc, #44]	@ (80010fc <HAL_UART_MspInit+0x90>)
 80010d0:	f000 fdfe 	bl	8001cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010d4:	2308      	movs	r3, #8
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <HAL_UART_MspInit+0x90>)
 80010e8:	f000 fdf2 	bl	8001cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40004400 	.word	0x40004400
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010800 	.word	0x40010800

08001100 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001100:	f7ff ff84 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001104:	480b      	ldr	r0, [pc, #44]	@ (8001134 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001106:	490c      	ldr	r1, [pc, #48]	@ (8001138 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001108:	4a0c      	ldr	r2, [pc, #48]	@ (800113c <LoopFillZerobss+0x16>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800111c:	4c09      	ldr	r4, [pc, #36]	@ (8001144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112a:	f002 fce7 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800112e:	f7ff fd7f 	bl	8000c30 <main>
  bx lr
 8001132:	4770      	bx	lr
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800113c:	08004530 	.word	0x08004530
  ldr r2, =_sbss
 8001140:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001144:	200002a0 	.word	0x200002a0

08001148 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC1_2_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <HAL_Init+0x28>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a07      	ldr	r2, [pc, #28]	@ (8001174 <HAL_Init+0x28>)
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115c:	2003      	movs	r0, #3
 800115e:	f000 fd83 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001162:	2000      	movs	r0, #0
 8001164:	f000 f808 	bl	8001178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001168:	f7ff febc 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40022000 	.word	0x40022000

08001178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_InitTick+0x54>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_InitTick+0x58>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001192:	fbb2 f3f3 	udiv	r3, r2, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fd8d 	bl	8001cb6 <HAL_SYSTICK_Config>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00e      	b.n	80011c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b0f      	cmp	r3, #15
 80011aa:	d80a      	bhi.n	80011c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ac:	2200      	movs	r2, #0
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f000 fd63 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b8:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <HAL_InitTick+0x5c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e000      	b.n	80011c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000010 	.word	0x20000010
 80011d4:	2000000c 	.word	0x2000000c

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_IncTick+0x1c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <HAL_IncTick+0x20>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a03      	ldr	r2, [pc, #12]	@ (80011f8 <HAL_IncTick+0x20>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	20000010 	.word	0x20000010
 80011f8:	20000154 	.word	0x20000154

080011fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b02      	ldr	r3, [pc, #8]	@ (800120c <HAL_GetTick+0x10>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	20000154 	.word	0x20000154

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff fff0 	bl	80011fc <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffe0 	bl	80011fc <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000010 	.word	0x20000010

08001258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0be      	b.n	80013f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fbde 	bl	8000a58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fbf1 	bl	8001a84 <ADC_ConversionStop_Disable>
 80012a2:	4603      	mov	r3, r0
 80012a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f040 8099 	bne.w	80013e6 <HAL_ADC_Init+0x18e>
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 8095 	bne.w	80013e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012c4:	f023 0302 	bic.w	r3, r3, #2
 80012c8:	f043 0202 	orr.w	r2, r3, #2
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7b1b      	ldrb	r3, [r3, #12]
 80012de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012f0:	d003      	beq.n	80012fa <HAL_ADC_Init+0xa2>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d102      	bne.n	8001300 <HAL_ADC_Init+0xa8>
 80012fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fe:	e000      	b.n	8001302 <HAL_ADC_Init+0xaa>
 8001300:	2300      	movs	r3, #0
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7d1b      	ldrb	r3, [r3, #20]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d119      	bne.n	8001344 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7b1b      	ldrb	r3, [r3, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d109      	bne.n	800132c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	3b01      	subs	r3, #1
 800131e:	035a      	lsls	r2, r3, #13
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	e00b      	b.n	8001344 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001330:	f043 0220 	orr.w	r2, r3, #32
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <HAL_ADC_Init+0x1a8>)
 8001360:	4013      	ands	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	430b      	orrs	r3, r1
 800136a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001374:	d003      	beq.n	800137e <HAL_ADC_Init+0x126>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d104      	bne.n	8001388 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	3b01      	subs	r3, #1
 8001384:	051b      	lsls	r3, r3, #20
 8001386:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	430a      	orrs	r2, r1
 800139a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <HAL_ADC_Init+0x1ac>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d10b      	bne.n	80013c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b6:	f023 0303 	bic.w	r3, r3, #3
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013c2:	e018      	b.n	80013f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	f023 0312 	bic.w	r3, r3, #18
 80013cc:	f043 0210 	orr.w	r2, r3, #16
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013e4:	e007      	b.n	80013f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ea:	f043 0210 	orr.w	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	ffe1f7fd 	.word	0xffe1f7fd
 8001404:	ff1f0efe 	.word	0xff1f0efe

08001408 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_ADC_Start+0x1a>
 800141e:	2302      	movs	r3, #2
 8001420:	e098      	b.n	8001554 <HAL_ADC_Start+0x14c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fad0 	bl	80019d0 <ADC_Enable>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f040 8087 	bne.w	800154a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001440:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a41      	ldr	r2, [pc, #260]	@ (800155c <HAL_ADC_Start+0x154>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d105      	bne.n	8001466 <HAL_ADC_Start+0x5e>
 800145a:	4b41      	ldr	r3, [pc, #260]	@ (8001560 <HAL_ADC_Start+0x158>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d115      	bne.n	8001492 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147c:	2b00      	cmp	r3, #0
 800147e:	d026      	beq.n	80014ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001484:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001488:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001490:	e01d      	b.n	80014ce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001496:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001560 <HAL_ADC_Start+0x158>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d004      	beq.n	80014b2 <HAL_ADC_Start+0xaa>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a2b      	ldr	r2, [pc, #172]	@ (800155c <HAL_ADC_Start+0x154>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10d      	bne.n	80014ce <HAL_ADC_Start+0xc6>
 80014b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001560 <HAL_ADC_Start+0x158>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014de:	f023 0206 	bic.w	r2, r3, #6
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014e6:	e002      	b.n	80014ee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f06f 0202 	mvn.w	r2, #2
 80014fe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800150a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800150e:	d113      	bne.n	8001538 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001514:	4a11      	ldr	r2, [pc, #68]	@ (800155c <HAL_ADC_Start+0x154>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d105      	bne.n	8001526 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HAL_ADC_Start+0x158>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001522:	2b00      	cmp	r3, #0
 8001524:	d108      	bne.n	8001538 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	e00c      	b.n	8001552 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	e003      	b.n	8001552 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40012800 	.word	0x40012800
 8001560:	40012400 	.word	0x40012400

08001564 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_ADC_Stop+0x1a>
 800157a:	2302      	movs	r3, #2
 800157c:	e01a      	b.n	80015b4 <HAL_ADC_Stop+0x50>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fa7c 	bl	8001a84 <ADC_ConversionStop_Disable>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d109      	bne.n	80015aa <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800159a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	f043 0201 	orr.w	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80015d2:	f7ff fe13 	bl	80011fc <HAL_GetTick>
 80015d6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ea:	f043 0220 	orr.w	r2, r3, #32
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0d3      	b.n	80017a6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001608:	2b00      	cmp	r3, #0
 800160a:	d131      	bne.n	8001670 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001612:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001616:	2b00      	cmp	r3, #0
 8001618:	d12a      	bne.n	8001670 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800161a:	e021      	b.n	8001660 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001622:	d01d      	beq.n	8001660 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <HAL_ADC_PollForConversion+0x7e>
 800162a:	f7ff fde7 	bl	80011fc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d212      	bcs.n	8001660 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10b      	bne.n	8001660 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	f043 0204 	orr.w	r2, r3, #4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e0a2      	b.n	80017a6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0d6      	beq.n	800161c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800166e:	e070      	b.n	8001752 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001670:	4b4f      	ldr	r3, [pc, #316]	@ (80017b0 <HAL_ADC_PollForConversion+0x1f4>)
 8001672:	681c      	ldr	r4, [r3, #0]
 8001674:	2002      	movs	r0, #2
 8001676:	f001 f98d 	bl	8002994 <HAL_RCCEx_GetPeriphCLKFreq>
 800167a:	4603      	mov	r3, r0
 800167c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6919      	ldr	r1, [r3, #16]
 8001686:	4b4b      	ldr	r3, [pc, #300]	@ (80017b4 <HAL_ADC_PollForConversion+0x1f8>)
 8001688:	400b      	ands	r3, r1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d118      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x104>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68d9      	ldr	r1, [r3, #12]
 8001694:	4b48      	ldr	r3, [pc, #288]	@ (80017b8 <HAL_ADC_PollForConversion+0x1fc>)
 8001696:	400b      	ands	r3, r1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d111      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x104>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6919      	ldr	r1, [r3, #16]
 80016a2:	4b46      	ldr	r3, [pc, #280]	@ (80017bc <HAL_ADC_PollForConversion+0x200>)
 80016a4:	400b      	ands	r3, r1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d108      	bne.n	80016bc <HAL_ADC_PollForConversion+0x100>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68d9      	ldr	r1, [r3, #12]
 80016b0:	4b43      	ldr	r3, [pc, #268]	@ (80017c0 <HAL_ADC_PollForConversion+0x204>)
 80016b2:	400b      	ands	r3, r1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_ADC_PollForConversion+0x100>
 80016b8:	2314      	movs	r3, #20
 80016ba:	e020      	b.n	80016fe <HAL_ADC_PollForConversion+0x142>
 80016bc:	2329      	movs	r3, #41	@ 0x29
 80016be:	e01e      	b.n	80016fe <HAL_ADC_PollForConversion+0x142>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6919      	ldr	r1, [r3, #16]
 80016c6:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <HAL_ADC_PollForConversion+0x200>)
 80016c8:	400b      	ands	r3, r1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_ADC_PollForConversion+0x120>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68d9      	ldr	r1, [r3, #12]
 80016d4:	4b3a      	ldr	r3, [pc, #232]	@ (80017c0 <HAL_ADC_PollForConversion+0x204>)
 80016d6:	400b      	ands	r3, r1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00d      	beq.n	80016f8 <HAL_ADC_PollForConversion+0x13c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6919      	ldr	r1, [r3, #16]
 80016e2:	4b38      	ldr	r3, [pc, #224]	@ (80017c4 <HAL_ADC_PollForConversion+0x208>)
 80016e4:	400b      	ands	r3, r1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d108      	bne.n	80016fc <HAL_ADC_PollForConversion+0x140>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68d9      	ldr	r1, [r3, #12]
 80016f0:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <HAL_ADC_PollForConversion+0x208>)
 80016f2:	400b      	ands	r3, r1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_ADC_PollForConversion+0x140>
 80016f8:	2354      	movs	r3, #84	@ 0x54
 80016fa:	e000      	b.n	80016fe <HAL_ADC_PollForConversion+0x142>
 80016fc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001704:	e021      	b.n	800174a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d01a      	beq.n	8001744 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <HAL_ADC_PollForConversion+0x168>
 8001714:	f7ff fd72 	bl	80011fc <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d20f      	bcs.n	8001744 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d90b      	bls.n	8001744 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001730:	f043 0204 	orr.w	r2, r3, #4
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e030      	b.n	80017a6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3301      	adds	r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	429a      	cmp	r2, r3
 8001750:	d8d9      	bhi.n	8001706 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f06f 0212 	mvn.w	r2, #18
 800175a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001760:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001772:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001776:	d115      	bne.n	80017a4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800177c:	2b00      	cmp	r3, #0
 800177e:	d111      	bne.n	80017a4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001784:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000008 	.word	0x20000008
 80017b4:	24924924 	.word	0x24924924
 80017b8:	00924924 	.word	0x00924924
 80017bc:	12492492 	.word	0x12492492
 80017c0:	00492492 	.word	0x00492492
 80017c4:	00249249 	.word	0x00249249

080017c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x20>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e0dc      	b.n	80019ba <HAL_ADC_ConfigChannel+0x1da>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b06      	cmp	r3, #6
 800180e:	d81c      	bhi.n	800184a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	3b05      	subs	r3, #5
 8001822:	221f      	movs	r2, #31
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	4019      	ands	r1, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3b05      	subs	r3, #5
 800183c:	fa00 f203 	lsl.w	r2, r0, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	635a      	str	r2, [r3, #52]	@ 0x34
 8001848:	e03c      	b.n	80018c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d81c      	bhi.n	800188c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b23      	subs	r3, #35	@ 0x23
 8001864:	221f      	movs	r2, #31
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	4019      	ands	r1, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	3b23      	subs	r3, #35	@ 0x23
 800187e:	fa00 f203 	lsl.w	r2, r0, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	631a      	str	r2, [r3, #48]	@ 0x30
 800188a:	e01b      	b.n	80018c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	3b41      	subs	r3, #65	@ 0x41
 800189e:	221f      	movs	r2, #31
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4019      	ands	r1, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3b41      	subs	r3, #65	@ 0x41
 80018b8:	fa00 f203 	lsl.w	r2, r0, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b09      	cmp	r3, #9
 80018ca:	d91c      	bls.n	8001906 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68d9      	ldr	r1, [r3, #12]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	3b1e      	subs	r3, #30
 80018de:	2207      	movs	r2, #7
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4019      	ands	r1, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6898      	ldr	r0, [r3, #8]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	3b1e      	subs	r3, #30
 80018f8:	fa00 f203 	lsl.w	r2, r0, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	e019      	b.n	800193a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6919      	ldr	r1, [r3, #16]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	2207      	movs	r2, #7
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6898      	ldr	r0, [r3, #8]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	fa00 f203 	lsl.w	r2, r0, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b10      	cmp	r3, #16
 8001940:	d003      	beq.n	800194a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001946:	2b11      	cmp	r3, #17
 8001948:	d132      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d125      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d126      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001970:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b10      	cmp	r3, #16
 8001978:	d11a      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800197a:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <HAL_ADC_ConfigChannel+0x1ec>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	0c9a      	lsrs	r2, r3, #18
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001990:	e002      	b.n	8001998 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3b01      	subs	r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f9      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x1b2>
 800199e:	e007      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	40012400 	.word	0x40012400
 80019c8:	20000008 	.word	0x20000008
 80019cc:	431bde83 	.word	0x431bde83

080019d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d040      	beq.n	8001a70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019fe:	4b1f      	ldr	r3, [pc, #124]	@ (8001a7c <ADC_Enable+0xac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a1f      	ldr	r2, [pc, #124]	@ (8001a80 <ADC_Enable+0xb0>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	0c9b      	lsrs	r3, r3, #18
 8001a0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a0c:	e002      	b.n	8001a14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f9      	bne.n	8001a0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a1a:	f7ff fbef 	bl	80011fc <HAL_GetTick>
 8001a1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a20:	e01f      	b.n	8001a62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a22:	f7ff fbeb 	bl	80011fc <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d918      	bls.n	8001a62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d011      	beq.n	8001a62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a42:	f043 0210 	orr.w	r2, r3, #16
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e007      	b.n	8001a72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d1d8      	bne.n	8001a22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	431bde83 	.word	0x431bde83

08001a84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d12e      	bne.n	8001afc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aae:	f7ff fba5 	bl	80011fc <HAL_GetTick>
 8001ab2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ab4:	e01b      	b.n	8001aee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ab6:	f7ff fba1 	bl	80011fc <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d914      	bls.n	8001aee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d10d      	bne.n	8001aee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	f043 0210 	orr.w	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae2:	f043 0201 	orr.w	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e007      	b.n	8001afe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d0dc      	beq.n	8001ab6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	6039      	str	r1, [r7, #0]
 8001b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0a      	blt.n	8001b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	490c      	ldr	r1, [pc, #48]	@ (8001bb8 <__NVIC_SetPriority+0x4c>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	440b      	add	r3, r1
 8001b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b94:	e00a      	b.n	8001bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4908      	ldr	r1, [pc, #32]	@ (8001bbc <__NVIC_SetPriority+0x50>)
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3b04      	subs	r3, #4
 8001ba4:	0112      	lsls	r2, r2, #4
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	440b      	add	r3, r1
 8001baa:	761a      	strb	r2, [r3, #24]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000e100 	.word	0xe000e100
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f1c3 0307 	rsb	r3, r3, #7
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf28      	it	cs
 8001bde:	2304      	movcs	r3, #4
 8001be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3304      	adds	r3, #4
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d902      	bls.n	8001bf0 <NVIC_EncodePriority+0x30>
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3b03      	subs	r3, #3
 8001bee:	e000      	b.n	8001bf2 <NVIC_EncodePriority+0x32>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c12:	43d9      	mvns	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	4313      	orrs	r3, r2
         );
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff90 	bl	8001b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff49 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff5e 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff90 	bl	8001bc0 <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5f 	bl	8001b6c <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffb0 	bl	8001c24 <SysTick_Config>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b08b      	sub	sp, #44	@ 0x2c
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce2:	e169      	b.n	8001fb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f040 8158 	bne.w	8001fb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a9a      	ldr	r2, [pc, #616]	@ (8001f70 <HAL_GPIO_Init+0x2a0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d05e      	beq.n	8001dca <HAL_GPIO_Init+0xfa>
 8001d0c:	4a98      	ldr	r2, [pc, #608]	@ (8001f70 <HAL_GPIO_Init+0x2a0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d875      	bhi.n	8001dfe <HAL_GPIO_Init+0x12e>
 8001d12:	4a98      	ldr	r2, [pc, #608]	@ (8001f74 <HAL_GPIO_Init+0x2a4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d058      	beq.n	8001dca <HAL_GPIO_Init+0xfa>
 8001d18:	4a96      	ldr	r2, [pc, #600]	@ (8001f74 <HAL_GPIO_Init+0x2a4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d86f      	bhi.n	8001dfe <HAL_GPIO_Init+0x12e>
 8001d1e:	4a96      	ldr	r2, [pc, #600]	@ (8001f78 <HAL_GPIO_Init+0x2a8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d052      	beq.n	8001dca <HAL_GPIO_Init+0xfa>
 8001d24:	4a94      	ldr	r2, [pc, #592]	@ (8001f78 <HAL_GPIO_Init+0x2a8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d869      	bhi.n	8001dfe <HAL_GPIO_Init+0x12e>
 8001d2a:	4a94      	ldr	r2, [pc, #592]	@ (8001f7c <HAL_GPIO_Init+0x2ac>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d04c      	beq.n	8001dca <HAL_GPIO_Init+0xfa>
 8001d30:	4a92      	ldr	r2, [pc, #584]	@ (8001f7c <HAL_GPIO_Init+0x2ac>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d863      	bhi.n	8001dfe <HAL_GPIO_Init+0x12e>
 8001d36:	4a92      	ldr	r2, [pc, #584]	@ (8001f80 <HAL_GPIO_Init+0x2b0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d046      	beq.n	8001dca <HAL_GPIO_Init+0xfa>
 8001d3c:	4a90      	ldr	r2, [pc, #576]	@ (8001f80 <HAL_GPIO_Init+0x2b0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d85d      	bhi.n	8001dfe <HAL_GPIO_Init+0x12e>
 8001d42:	2b12      	cmp	r3, #18
 8001d44:	d82a      	bhi.n	8001d9c <HAL_GPIO_Init+0xcc>
 8001d46:	2b12      	cmp	r3, #18
 8001d48:	d859      	bhi.n	8001dfe <HAL_GPIO_Init+0x12e>
 8001d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d50 <HAL_GPIO_Init+0x80>)
 8001d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d50:	08001dcb 	.word	0x08001dcb
 8001d54:	08001da5 	.word	0x08001da5
 8001d58:	08001db7 	.word	0x08001db7
 8001d5c:	08001df9 	.word	0x08001df9
 8001d60:	08001dff 	.word	0x08001dff
 8001d64:	08001dff 	.word	0x08001dff
 8001d68:	08001dff 	.word	0x08001dff
 8001d6c:	08001dff 	.word	0x08001dff
 8001d70:	08001dff 	.word	0x08001dff
 8001d74:	08001dff 	.word	0x08001dff
 8001d78:	08001dff 	.word	0x08001dff
 8001d7c:	08001dff 	.word	0x08001dff
 8001d80:	08001dff 	.word	0x08001dff
 8001d84:	08001dff 	.word	0x08001dff
 8001d88:	08001dff 	.word	0x08001dff
 8001d8c:	08001dff 	.word	0x08001dff
 8001d90:	08001dff 	.word	0x08001dff
 8001d94:	08001dad 	.word	0x08001dad
 8001d98:	08001dc1 	.word	0x08001dc1
 8001d9c:	4a79      	ldr	r2, [pc, #484]	@ (8001f84 <HAL_GPIO_Init+0x2b4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001da2:	e02c      	b.n	8001dfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	623b      	str	r3, [r7, #32]
          break;
 8001daa:	e029      	b.n	8001e00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	3304      	adds	r3, #4
 8001db2:	623b      	str	r3, [r7, #32]
          break;
 8001db4:	e024      	b.n	8001e00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	3308      	adds	r3, #8
 8001dbc:	623b      	str	r3, [r7, #32]
          break;
 8001dbe:	e01f      	b.n	8001e00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	330c      	adds	r3, #12
 8001dc6:	623b      	str	r3, [r7, #32]
          break;
 8001dc8:	e01a      	b.n	8001e00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	623b      	str	r3, [r7, #32]
          break;
 8001dd6:	e013      	b.n	8001e00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001de0:	2308      	movs	r3, #8
 8001de2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	611a      	str	r2, [r3, #16]
          break;
 8001dea:	e009      	b.n	8001e00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dec:	2308      	movs	r3, #8
 8001dee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	615a      	str	r2, [r3, #20]
          break;
 8001df6:	e003      	b.n	8001e00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e000      	b.n	8001e00 <HAL_GPIO_Init+0x130>
          break;
 8001dfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2bff      	cmp	r3, #255	@ 0xff
 8001e04:	d801      	bhi.n	8001e0a <HAL_GPIO_Init+0x13a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	e001      	b.n	8001e0e <HAL_GPIO_Init+0x13e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2bff      	cmp	r3, #255	@ 0xff
 8001e14:	d802      	bhi.n	8001e1c <HAL_GPIO_Init+0x14c>
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	e002      	b.n	8001e22 <HAL_GPIO_Init+0x152>
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1e:	3b08      	subs	r3, #8
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	210f      	movs	r1, #15
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	401a      	ands	r2, r3
 8001e34:	6a39      	ldr	r1, [r7, #32]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80b1 	beq.w	8001fb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e50:	4b4d      	ldr	r3, [pc, #308]	@ (8001f88 <HAL_GPIO_Init+0x2b8>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a4c      	ldr	r2, [pc, #304]	@ (8001f88 <HAL_GPIO_Init+0x2b8>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f88 <HAL_GPIO_Init+0x2b8>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e68:	4a48      	ldr	r2, [pc, #288]	@ (8001f8c <HAL_GPIO_Init+0x2bc>)
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a40      	ldr	r2, [pc, #256]	@ (8001f90 <HAL_GPIO_Init+0x2c0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d013      	beq.n	8001ebc <HAL_GPIO_Init+0x1ec>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3f      	ldr	r2, [pc, #252]	@ (8001f94 <HAL_GPIO_Init+0x2c4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00d      	beq.n	8001eb8 <HAL_GPIO_Init+0x1e8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f98 <HAL_GPIO_Init+0x2c8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d007      	beq.n	8001eb4 <HAL_GPIO_Init+0x1e4>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3d      	ldr	r2, [pc, #244]	@ (8001f9c <HAL_GPIO_Init+0x2cc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d101      	bne.n	8001eb0 <HAL_GPIO_Init+0x1e0>
 8001eac:	2303      	movs	r3, #3
 8001eae:	e006      	b.n	8001ebe <HAL_GPIO_Init+0x1ee>
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	e004      	b.n	8001ebe <HAL_GPIO_Init+0x1ee>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_Init+0x1ee>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_GPIO_Init+0x1ee>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec0:	f002 0203 	and.w	r2, r2, #3
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	4093      	lsls	r3, r2
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ece:	492f      	ldr	r1, [pc, #188]	@ (8001f8c <HAL_GPIO_Init+0x2bc>)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	492c      	ldr	r1, [pc, #176]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	4928      	ldr	r1, [pc, #160]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f10:	4b23      	ldr	r3, [pc, #140]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	4922      	ldr	r1, [pc, #136]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	491e      	ldr	r1, [pc, #120]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f38:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4918      	ldr	r1, [pc, #96]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f46:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4914      	ldr	r1, [pc, #80]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d021      	beq.n	8001fa4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f60:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	490e      	ldr	r1, [pc, #56]	@ (8001fa0 <HAL_GPIO_Init+0x2d0>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e021      	b.n	8001fb2 <HAL_GPIO_Init+0x2e2>
 8001f6e:	bf00      	nop
 8001f70:	10320000 	.word	0x10320000
 8001f74:	10310000 	.word	0x10310000
 8001f78:	10220000 	.word	0x10220000
 8001f7c:	10210000 	.word	0x10210000
 8001f80:	10120000 	.word	0x10120000
 8001f84:	10110000 	.word	0x10110000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40010800 	.word	0x40010800
 8001f94:	40010c00 	.word	0x40010c00
 8001f98:	40011000 	.word	0x40011000
 8001f9c:	40011400 	.word	0x40011400
 8001fa0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_GPIO_Init+0x304>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	4909      	ldr	r1, [pc, #36]	@ (8001fd4 <HAL_GPIO_Init+0x304>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f47f ae8e 	bne.w	8001ce4 <HAL_GPIO_Init+0x14>
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	372c      	adds	r7, #44	@ 0x2c
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fe8:	787b      	ldrb	r3, [r7, #1]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ff4:	e003      	b.n	8001ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	041a      	lsls	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	611a      	str	r2, [r3, #16]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e272      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8087 	beq.w	8002136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	4b92      	ldr	r3, [pc, #584]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b04      	cmp	r3, #4
 8002032:	d00c      	beq.n	800204e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002034:	4b8f      	ldr	r3, [pc, #572]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d112      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
 8002040:	4b8c      	ldr	r3, [pc, #560]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b89      	ldr	r3, [pc, #548]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06c      	beq.n	8002134 <HAL_RCC_OscConfig+0x12c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d168      	bne.n	8002134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e24c      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x76>
 8002070:	4b80      	ldr	r3, [pc, #512]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a7f      	ldr	r2, [pc, #508]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e02e      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4b7b      	ldr	r3, [pc, #492]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7a      	ldr	r2, [pc, #488]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b78      	ldr	r3, [pc, #480]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a77      	ldr	r2, [pc, #476]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0xbc>
 80020aa:	4b72      	ldr	r3, [pc, #456]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a71      	ldr	r2, [pc, #452]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b68      	ldr	r3, [pc, #416]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a67      	ldr	r2, [pc, #412]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff f88a 	bl	80011fc <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff f886 	bl	80011fc <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	@ 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e200      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xe4>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff f876 	bl	80011fc <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff f872 	bl	80011fc <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	@ 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1ec      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b53      	ldr	r3, [pc, #332]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x10c>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b4c      	ldr	r3, [pc, #304]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214e:	4b49      	ldr	r3, [pc, #292]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
 800215a:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1c0      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4939      	ldr	r1, [pc, #228]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b36      	ldr	r3, [pc, #216]	@ (8002278 <HAL_RCC_OscConfig+0x270>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff f82b 	bl	80011fc <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7ff f827 	bl	80011fc <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1a1      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4927      	ldr	r1, [pc, #156]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <HAL_RCC_OscConfig+0x270>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff f80a 	bl	80011fc <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7ff f806 	bl	80011fc <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e180      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03a      	beq.n	800228c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d019      	beq.n	8002252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_RCC_OscConfig+0x274>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7fe ffea 	bl	80011fc <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7fe ffe6 	bl	80011fc <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e160      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 face 	bl	80027ec <RCC_Delay>
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <HAL_RCC_OscConfig+0x274>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7fe ffd0 	bl	80011fc <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7fe ffcc 	bl	80011fc <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d908      	bls.n	8002280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e146      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	42420000 	.word	0x42420000
 800227c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b92      	ldr	r3, [pc, #584]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e9      	bne.n	8002260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a6 	beq.w	80023e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b8b      	ldr	r3, [pc, #556]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b88      	ldr	r3, [pc, #544]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a87      	ldr	r2, [pc, #540]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b85      	ldr	r3, [pc, #532]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b82      	ldr	r3, [pc, #520]	@ (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b7f      	ldr	r3, [pc, #508]	@ (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7e      	ldr	r2, [pc, #504]	@ (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7fe ff8d 	bl	80011fc <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7fe ff89 	bl	80011fc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	@ 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e103      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b75      	ldr	r3, [pc, #468]	@ (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x312>
 800230c:	4b6f      	ldr	r3, [pc, #444]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a6e      	ldr	r2, [pc, #440]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e02d      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x334>
 8002322:	4b6a      	ldr	r3, [pc, #424]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a69      	ldr	r2, [pc, #420]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b67      	ldr	r3, [pc, #412]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a66      	ldr	r2, [pc, #408]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	e01c      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x356>
 8002344:	4b61      	ldr	r3, [pc, #388]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a60      	ldr	r2, [pc, #384]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4b5e      	ldr	r3, [pc, #376]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a5d      	ldr	r2, [pc, #372]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800235e:	4b5b      	ldr	r3, [pc, #364]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a5a      	ldr	r2, [pc, #360]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b58      	ldr	r3, [pc, #352]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a57      	ldr	r2, [pc, #348]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7fe ff3d 	bl	80011fc <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe ff39 	bl	80011fc <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0b1      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RCC_OscConfig+0x37e>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7fe ff27 	bl	80011fc <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe ff23 	bl	80011fc <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e09b      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4b40      	ldr	r3, [pc, #256]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b3c      	ldr	r3, [pc, #240]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a3b      	ldr	r2, [pc, #236]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8087 	beq.w	80024fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f0:	4b36      	ldr	r3, [pc, #216]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d061      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d146      	bne.n	8002492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b33      	ldr	r3, [pc, #204]	@ (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe fef7 	bl	80011fc <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fef3 	bl	80011fc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e06d      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243a:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4921      	ldr	r1, [pc, #132]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a19      	ldr	r1, [r3, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	430b      	orrs	r3, r1
 800245e:	491b      	ldr	r1, [pc, #108]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe fec7 	bl	80011fc <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7fe fec3 	bl	80011fc <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e03d      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x46a>
 8002490:	e035      	b.n	80024fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe feb0 	bl	80011fc <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe feac 	bl	80011fc <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e026      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x498>
 80024be:	e01e      	b.n	80024fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e019      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_OscConfig+0x500>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0d0      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b67      	ldr	r3, [pc, #412]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4965      	ldr	r1, [pc, #404]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b63      	ldr	r3, [pc, #396]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002568:	4b59      	ldr	r3, [pc, #356]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a58      	ldr	r2, [pc, #352]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002580:	4b53      	ldr	r3, [pc, #332]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a52      	ldr	r2, [pc, #328]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800258a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b50      	ldr	r3, [pc, #320]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	494d      	ldr	r1, [pc, #308]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d040      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b47      	ldr	r3, [pc, #284]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d115      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e073      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06b      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b39      	ldr	r3, [pc, #228]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4936      	ldr	r1, [pc, #216]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7fe fdfe 	bl	80011fc <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7fe fdfa 	bl	80011fc <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e053      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2d      	ldr	r3, [pc, #180]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b27      	ldr	r3, [pc, #156]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d210      	bcs.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4922      	ldr	r1, [pc, #136]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e032      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4916      	ldr	r1, [pc, #88]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002686:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490e      	ldr	r1, [pc, #56]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269a:	f000 f821 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	490a      	ldr	r1, [pc, #40]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	5ccb      	ldrb	r3, [r1, r3]
 80026ae:	fa22 f303 	lsr.w	r3, r2, r3
 80026b2:	4a09      	ldr	r2, [pc, #36]	@ (80026d8 <HAL_RCC_ClockConfig+0x1cc>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_RCC_ClockConfig+0x1d0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fd5c 	bl	8001178 <HAL_InitTick>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000
 80026d0:	40021000 	.word	0x40021000
 80026d4:	080044b4 	.word	0x080044b4
 80026d8:	20000008 	.word	0x20000008
 80026dc:	2000000c 	.word	0x2000000c

080026e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x94>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b04      	cmp	r3, #4
 8002708:	d002      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x30>
 800270a:	2b08      	cmp	r3, #8
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x36>
 800270e:	e027      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002710:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x98>)
 8002712:	613b      	str	r3, [r7, #16]
      break;
 8002714:	e027      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0c9b      	lsrs	r3, r3, #18
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	4a17      	ldr	r2, [pc, #92]	@ (800277c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002720:	5cd3      	ldrb	r3, [r2, r3]
 8002722:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d010      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800272e:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x94>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0c5b      	lsrs	r3, r3, #17
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	4a11      	ldr	r2, [pc, #68]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xa0>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a0d      	ldr	r2, [pc, #52]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x98>)
 8002742:	fb03 f202 	mul.w	r2, r3, r2
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e004      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a0c      	ldr	r2, [pc, #48]	@ (8002784 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	613b      	str	r3, [r7, #16]
      break;
 800275e:	e002      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x98>)
 8002762:	613b      	str	r3, [r7, #16]
      break;
 8002764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002766:	693b      	ldr	r3, [r7, #16]
}
 8002768:	4618      	mov	r0, r3
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	007a1200 	.word	0x007a1200
 800277c:	080044cc 	.word	0x080044cc
 8002780:	080044dc 	.word	0x080044dc
 8002784:	003d0900 	.word	0x003d0900

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b02      	ldr	r3, [pc, #8]	@ (8002798 <HAL_RCC_GetHCLKFreq+0x10>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000008 	.word	0x20000008

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a0:	f7ff fff2 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4903      	ldr	r1, [pc, #12]	@ (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	080044c4 	.word	0x080044c4

080027c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c8:	f7ff ffde 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	0adb      	lsrs	r3, r3, #11
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	@ (80027e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	080044c4 	.word	0x080044c4

080027ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <RCC_Delay+0x34>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <RCC_Delay+0x38>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0a5b      	lsrs	r3, r3, #9
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002808:	bf00      	nop
  }
  while (Delay --);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	60fa      	str	r2, [r7, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f9      	bne.n	8002808 <RCC_Delay+0x1c>
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	20000008 	.word	0x20000008
 8002824:	10624dd3 	.word	0x10624dd3

08002828 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d07d      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002844:	2300      	movs	r3, #0
 8002846:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002848:	4b4f      	ldr	r3, [pc, #316]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10d      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4b4c      	ldr	r3, [pc, #304]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4a4b      	ldr	r2, [pc, #300]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285e:	61d3      	str	r3, [r2, #28]
 8002860:	4b49      	ldr	r3, [pc, #292]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286c:	2301      	movs	r3, #1
 800286e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	4b46      	ldr	r3, [pc, #280]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d118      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287c:	4b43      	ldr	r3, [pc, #268]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a42      	ldr	r2, [pc, #264]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002886:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002888:	f7fe fcb8 	bl	80011fc <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	e008      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002890:	f7fe fcb4 	bl	80011fc <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e06d      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b3a      	ldr	r3, [pc, #232]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f0      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ae:	4b36      	ldr	r3, [pc, #216]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d02e      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d027      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028e2:	4a29      	ldr	r2, [pc, #164]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d014      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe fc83 	bl	80011fc <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f8:	e00a      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7fe fc7f 	bl	80011fc <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002908:	4293      	cmp	r3, r2
 800290a:	d901      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e036      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	4b1d      	ldr	r3, [pc, #116]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ee      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291c:	4b1a      	ldr	r3, [pc, #104]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4917      	ldr	r1, [pc, #92]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	4313      	orrs	r3, r2
 800292c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800292e:	7dfb      	ldrb	r3, [r7, #23]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d105      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	4a13      	ldr	r2, [pc, #76]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800293e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800294c:	4b0e      	ldr	r3, [pc, #56]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	490b      	ldr	r1, [pc, #44]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800296a:	4b07      	ldr	r3, [pc, #28]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4904      	ldr	r1, [pc, #16]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000
 800298c:	40007000 	.word	0x40007000
 8002990:	42420440 	.word	0x42420440

08002994 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	f200 808a 	bhi.w	8002ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d045      	beq.n	8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d075      	beq.n	8002ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80029ca:	e082      	b.n	8002ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80029cc:	4b46      	ldr	r3, [pc, #280]	@ (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80029d2:	4b45      	ldr	r3, [pc, #276]	@ (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d07b      	beq.n	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	0c9b      	lsrs	r3, r3, #18
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	4a41      	ldr	r2, [pc, #260]	@ (8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80029e8:	5cd3      	ldrb	r3, [r2, r3]
 80029ea:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d015      	beq.n	8002a22 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029f6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	0c5b      	lsrs	r3, r3, #17
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	4a3b      	ldr	r2, [pc, #236]	@ (8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a10:	4a38      	ldr	r2, [pc, #224]	@ (8002af4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	e004      	b.n	8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4a34      	ldr	r2, [pc, #208]	@ (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a38:	d102      	bne.n	8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	61bb      	str	r3, [r7, #24]
      break;
 8002a3e:	e04a      	b.n	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4a2d      	ldr	r2, [pc, #180]	@ (8002afc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	61bb      	str	r3, [r7, #24]
      break;
 8002a4e:	e042      	b.n	8002ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002a50:	4b25      	ldr	r3, [pc, #148]	@ (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a60:	d108      	bne.n	8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e01f      	b.n	8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a7e:	d109      	bne.n	8002a94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002a80:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002a8c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e00f      	b.n	8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a9e:	d11c      	bne.n	8002ada <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d016      	beq.n	8002ada <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002aac:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002ab0:	61bb      	str	r3, [r7, #24]
      break;
 8002ab2:	e012      	b.n	8002ada <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ab4:	e011      	b.n	8002ada <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002ab6:	f7ff fe85 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	0b9b      	lsrs	r3, r3, #14
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	61bb      	str	r3, [r7, #24]
      break;
 8002ad0:	e004      	b.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e002      	b.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ada:	bf00      	nop
    }
  }
  return (frequency);
 8002adc:	69bb      	ldr	r3, [r7, #24]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	080044e0 	.word	0x080044e0
 8002af0:	080044f0 	.word	0x080044f0
 8002af4:	007a1200 	.word	0x007a1200
 8002af8:	003d0900 	.word	0x003d0900
 8002afc:	aaaaaaab 	.word	0xaaaaaaab

08002b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e076      	b.n	8002c00 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d108      	bne.n	8002b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b22:	d009      	beq.n	8002b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
 8002b2a:	e005      	b.n	8002b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe f97c 	bl	8000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bbc:	ea42 0103 	orr.w	r1, r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	0c1a      	lsrs	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f002 0204 	and.w	r2, r2, #4
 8002bde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c18:	f7fe faf0 	bl	80011fc <HAL_GetTick>
 8002c1c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d001      	beq.n	8002c32 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e12a      	b.n	8002e88 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_SPI_Transmit+0x36>
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e122      	b.n	8002e88 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_SPI_Transmit+0x48>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e11b      	b.n	8002e88 <HAL_SPI_Transmit+0x280>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	88fa      	ldrh	r2, [r7, #6]
 8002c70:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	88fa      	ldrh	r2, [r7, #6]
 8002c76:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c9e:	d10f      	bne.n	8002cc0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cbe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cca:	2b40      	cmp	r3, #64	@ 0x40
 8002ccc:	d007      	beq.n	8002cde <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ce6:	d152      	bne.n	8002d8e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_SPI_Transmit+0xee>
 8002cf0:	8b7b      	ldrh	r3, [r7, #26]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d145      	bne.n	8002d82 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	1c9a      	adds	r2, r3, #2
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d1a:	e032      	b.n	8002d82 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d112      	bne.n	8002d50 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	1c9a      	adds	r2, r3, #2
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d4e:	e018      	b.n	8002d82 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d50:	f7fe fa54 	bl	80011fc <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d803      	bhi.n	8002d68 <HAL_SPI_Transmit+0x160>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d66:	d102      	bne.n	8002d6e <HAL_SPI_Transmit+0x166>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e082      	b.n	8002e88 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1c7      	bne.n	8002d1c <HAL_SPI_Transmit+0x114>
 8002d8c:	e053      	b.n	8002e36 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_SPI_Transmit+0x194>
 8002d96:	8b7b      	ldrh	r3, [r7, #26]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d147      	bne.n	8002e2c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	330c      	adds	r3, #12
 8002da6:	7812      	ldrb	r2, [r2, #0]
 8002da8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002dc2:	e033      	b.n	8002e2c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d113      	bne.n	8002dfa <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002df8:	e018      	b.n	8002e2c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dfa:	f7fe f9ff 	bl	80011fc <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d803      	bhi.n	8002e12 <HAL_SPI_Transmit+0x20a>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d102      	bne.n	8002e18 <HAL_SPI_Transmit+0x210>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e02d      	b.n	8002e88 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1c6      	bne.n	8002dc4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	6839      	ldr	r1, [r7, #0]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fbc4 	bl	80035c8 <SPI_EndRxTxTransaction>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002e86:	2300      	movs	r3, #0
  }
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d001      	beq.n	8002eb0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
 8002eae:	e104      	b.n	80030ba <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eb8:	d112      	bne.n	8002ee0 <HAL_SPI_Receive+0x50>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eca:	88fa      	ldrh	r2, [r7, #6]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f8f3 	bl	80030c2 <HAL_SPI_TransmitReceive>
 8002edc:	4603      	mov	r3, r0
 8002ede:	e0ec      	b.n	80030ba <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ee0:	f7fe f98c 	bl	80011fc <HAL_GetTick>
 8002ee4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_SPI_Receive+0x62>
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0e1      	b.n	80030ba <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_SPI_Receive+0x74>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e0da      	b.n	80030ba <HAL_SPI_Receive+0x22a>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	88fa      	ldrh	r2, [r7, #6]
 8002f24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f52:	d10f      	bne.n	8002f74 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f72:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7e:	2b40      	cmp	r3, #64	@ 0x40
 8002f80:	d007      	beq.n	8002f92 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d170      	bne.n	800307c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f9a:	e035      	b.n	8003008 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d115      	bne.n	8002fd6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f103 020c 	add.w	r2, r3, #12
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb6:	7812      	ldrb	r2, [r2, #0]
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fd4:	e018      	b.n	8003008 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd6:	f7fe f911 	bl	80011fc <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d803      	bhi.n	8002fee <HAL_SPI_Receive+0x15e>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d102      	bne.n	8002ff4 <HAL_SPI_Receive+0x164>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e058      	b.n	80030ba <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1c4      	bne.n	8002f9c <HAL_SPI_Receive+0x10c>
 8003012:	e038      	b.n	8003086 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d113      	bne.n	800304a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302c:	b292      	uxth	r2, r2
 800302e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003034:	1c9a      	adds	r2, r3, #2
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003048:	e018      	b.n	800307c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800304a:	f7fe f8d7 	bl	80011fc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d803      	bhi.n	8003062 <HAL_SPI_Receive+0x1d2>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d102      	bne.n	8003068 <HAL_SPI_Receive+0x1d8>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e01e      	b.n	80030ba <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1c6      	bne.n	8003014 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fa4a 	bl	8003524 <SPI_EndRxTransaction>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2220      	movs	r2, #32
 800309a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80030b8:	2300      	movs	r3, #0
  }
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b08a      	sub	sp, #40	@ 0x28
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030d0:	2301      	movs	r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030d4:	f7fe f892 	bl	80011fc <HAL_GetTick>
 80030d8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030e0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030ec:	7ffb      	ldrb	r3, [r7, #31]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d00c      	beq.n	800310c <HAL_SPI_TransmitReceive+0x4a>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030f8:	d106      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x46>
 8003102:	7ffb      	ldrb	r3, [r7, #31]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d001      	beq.n	800310c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
 800310a:	e17f      	b.n	800340c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <HAL_SPI_TransmitReceive+0x5c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HAL_SPI_TransmitReceive+0x5c>
 8003118:	887b      	ldrh	r3, [r7, #2]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e174      	b.n	800340c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x6e>
 800312c:	2302      	movs	r3, #2
 800312e:	e16d      	b.n	800340c <HAL_SPI_TransmitReceive+0x34a>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b04      	cmp	r3, #4
 8003142:	d003      	beq.n	800314c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2205      	movs	r2, #5
 8003148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	887a      	ldrh	r2, [r7, #2]
 8003162:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	887a      	ldrh	r2, [r7, #2]
 800316e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318c:	2b40      	cmp	r3, #64	@ 0x40
 800318e:	d007      	beq.n	80031a0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800319e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031a8:	d17e      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0xf6>
 80031b2:	8afb      	ldrh	r3, [r7, #22]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d16c      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031bc:	881a      	ldrh	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	1c9a      	adds	r2, r3, #2
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031dc:	e059      	b.n	8003292 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d11b      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x162>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d016      	beq.n	8003224 <HAL_SPI_TransmitReceive+0x162>
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d113      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	1c9a      	adds	r2, r3, #2
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d119      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x1a4>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d014      	beq.n	8003266 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003246:	b292      	uxth	r2, r2
 8003248:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324e:	1c9a      	adds	r2, r3, #2
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003262:	2301      	movs	r3, #1
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003266:	f7fd ffc9 	bl	80011fc <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003272:	429a      	cmp	r2, r3
 8003274:	d80d      	bhi.n	8003292 <HAL_SPI_TransmitReceive+0x1d0>
 8003276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d009      	beq.n	8003292 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e0bc      	b.n	800340c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1a0      	bne.n	80031de <HAL_SPI_TransmitReceive+0x11c>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d19b      	bne.n	80031de <HAL_SPI_TransmitReceive+0x11c>
 80032a6:	e082      	b.n	80033ae <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_SPI_TransmitReceive+0x1f4>
 80032b0:	8afb      	ldrh	r3, [r7, #22]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d171      	bne.n	800339a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	7812      	ldrb	r2, [r2, #0]
 80032c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032dc:	e05d      	b.n	800339a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d11c      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x264>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d017      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x264>
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d114      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	330c      	adds	r3, #12
 8003306:	7812      	ldrb	r2, [r2, #0]
 8003308:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d119      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x2a6>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d014      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003364:	2301      	movs	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003368:	f7fd ff48 	bl	80011fc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003374:	429a      	cmp	r2, r3
 8003376:	d803      	bhi.n	8003380 <HAL_SPI_TransmitReceive+0x2be>
 8003378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d102      	bne.n	8003386 <HAL_SPI_TransmitReceive+0x2c4>
 8003380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e038      	b.n	800340c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d19c      	bne.n	80032de <HAL_SPI_TransmitReceive+0x21c>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d197      	bne.n	80032de <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ae:	6a3a      	ldr	r2, [r7, #32]
 80033b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f908 	bl	80035c8 <SPI_EndRxTxTransaction>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e01d      	b.n	800340c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800340a:	2300      	movs	r3, #0
  }
}
 800340c:	4618      	mov	r0, r3
 800340e:	3728      	adds	r7, #40	@ 0x28
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003424:	f7fd feea 	bl	80011fc <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	4413      	add	r3, r2
 8003432:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003434:	f7fd fee2 	bl	80011fc <HAL_GetTick>
 8003438:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800343a:	4b39      	ldr	r3, [pc, #228]	@ (8003520 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	015b      	lsls	r3, r3, #5
 8003440:	0d1b      	lsrs	r3, r3, #20
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	fb02 f303 	mul.w	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800344a:	e054      	b.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d050      	beq.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003454:	f7fd fed2 	bl	80011fc <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	429a      	cmp	r2, r3
 8003462:	d902      	bls.n	800346a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d13d      	bne.n	80034e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003478:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003482:	d111      	bne.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348c:	d004      	beq.n	8003498 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003496:	d107      	bne.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b0:	d10f      	bne.n	80034d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e017      	b.n	8003516 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4013      	ands	r3, r2
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	429a      	cmp	r2, r3
 8003512:	d19b      	bne.n	800344c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000008 	.word	0x20000008

08003524 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003538:	d111      	bne.n	800355e <SPI_EndRxTransaction+0x3a>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003542:	d004      	beq.n	800354e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800354c:	d107      	bne.n	800355e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800355c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003566:	d117      	bne.n	8003598 <SPI_EndRxTransaction+0x74>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003570:	d112      	bne.n	8003598 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2200      	movs	r2, #0
 800357a:	2101      	movs	r1, #1
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f7ff ff49 	bl	8003414 <SPI_WaitFlagStateUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01a      	beq.n	80035be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800358c:	f043 0220 	orr.w	r2, r3, #32
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e013      	b.n	80035c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2200      	movs	r2, #0
 80035a0:	2180      	movs	r1, #128	@ 0x80
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f7ff ff36 	bl	8003414 <SPI_WaitFlagStateUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b2:	f043 0220 	orr.w	r2, r3, #32
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e000      	b.n	80035c0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2201      	movs	r2, #1
 80035dc:	2102      	movs	r1, #2
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7ff ff18 	bl	8003414 <SPI_WaitFlagStateUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e013      	b.n	8003622 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2200      	movs	r2, #0
 8003602:	2180      	movs	r1, #128	@ 0x80
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff ff05 	bl	8003414 <SPI_WaitFlagStateUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e000      	b.n	8003622 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e042      	b.n	80036c2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fd fd0b 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2224      	movs	r2, #36	@ 0x24
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800366c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f972 	bl	8003958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003682:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003692:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b08a      	sub	sp, #40	@ 0x28
 80036ce:	af02      	add	r7, sp, #8
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d175      	bne.n	80037d6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_UART_Transmit+0x2c>
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06e      	b.n	80037d8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2221      	movs	r2, #33	@ 0x21
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003708:	f7fd fd78 	bl	80011fc <HAL_GetTick>
 800370c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	88fa      	ldrh	r2, [r7, #6]
 8003718:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003722:	d108      	bne.n	8003736 <HAL_UART_Transmit+0x6c>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800372c:	2300      	movs	r3, #0
 800372e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	e003      	b.n	800373e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800373e:	e02e      	b.n	800379e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2200      	movs	r2, #0
 8003748:	2180      	movs	r1, #128	@ 0x80
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f848 	bl	80037e0 <UART_WaitOnFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d005      	beq.n	8003762 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e03a      	b.n	80037d8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003776:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	3302      	adds	r3, #2
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	e007      	b.n	8003790 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3301      	adds	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003794:	b29b      	uxth	r3, r3
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1cb      	bne.n	8003740 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2200      	movs	r2, #0
 80037b0:	2140      	movs	r1, #64	@ 0x40
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f814 	bl	80037e0 <UART_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e006      	b.n	80037d8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e000      	b.n	80037d8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3720      	adds	r7, #32
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f0:	e03b      	b.n	800386a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d037      	beq.n	800386a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fa:	f7fd fcff 	bl	80011fc <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	429a      	cmp	r2, r3
 8003808:	d302      	bcc.n	8003810 <UART_WaitOnFlagUntilTimeout+0x30>
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e03a      	b.n	800388a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d023      	beq.n	800386a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b80      	cmp	r3, #128	@ 0x80
 8003826:	d020      	beq.n	800386a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b40      	cmp	r3, #64	@ 0x40
 800382c:	d01d      	beq.n	800386a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d116      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f81d 	bl	8003892 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2208      	movs	r2, #8
 800385c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e00f      	b.n	800388a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4013      	ands	r3, r2
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	bf0c      	ite	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	2300      	movne	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	429a      	cmp	r2, r3
 8003886:	d0b4      	beq.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003892:	b480      	push	{r7}
 8003894:	b095      	sub	sp, #84	@ 0x54
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80038bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e5      	bne.n	800389a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3314      	adds	r3, #20
 80038d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3314      	adds	r3, #20
 80038ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e5      	bne.n	80038ce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	2b01      	cmp	r3, #1
 8003908:	d119      	bne.n	800393e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	330c      	adds	r3, #12
 8003910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	60bb      	str	r3, [r7, #8]
   return(result);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f023 0310 	bic.w	r3, r3, #16
 8003920:	647b      	str	r3, [r7, #68]	@ 0x44
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800392a:	61ba      	str	r2, [r7, #24]
 800392c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6979      	ldr	r1, [r7, #20]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	613b      	str	r3, [r7, #16]
   return(result);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e5      	bne.n	800390a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800394c:	bf00      	nop
 800394e:	3754      	adds	r7, #84	@ 0x54
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
	...

08003958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003992:	f023 030c 	bic.w	r3, r3, #12
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	430b      	orrs	r3, r1
 800399e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a2c      	ldr	r2, [pc, #176]	@ (8003a6c <UART_SetConfig+0x114>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d103      	bne.n	80039c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039c0:	f7fe ff00 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	e002      	b.n	80039ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039c8:	f7fe fee8 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 80039cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	4a22      	ldr	r2, [pc, #136]	@ (8003a70 <UART_SetConfig+0x118>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	0119      	lsls	r1, r3, #4
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	009a      	lsls	r2, r3, #2
 80039f8:	441a      	add	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a04:	4b1a      	ldr	r3, [pc, #104]	@ (8003a70 <UART_SetConfig+0x118>)
 8003a06:	fba3 0302 	umull	r0, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2064      	movs	r0, #100	@ 0x64
 8003a0e:	fb00 f303 	mul.w	r3, r0, r3
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	3332      	adds	r3, #50	@ 0x32
 8003a18:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <UART_SetConfig+0x118>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a24:	4419      	add	r1, r3
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009a      	lsls	r2, r3, #2
 8003a30:	441a      	add	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a70 <UART_SetConfig+0x118>)
 8003a3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	2064      	movs	r0, #100	@ 0x64
 8003a46:	fb00 f303 	mul.w	r3, r0, r3
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	3332      	adds	r3, #50	@ 0x32
 8003a50:	4a07      	ldr	r2, [pc, #28]	@ (8003a70 <UART_SetConfig+0x118>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	440a      	add	r2, r1
 8003a62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40013800 	.word	0x40013800
 8003a70:	51eb851f 	.word	0x51eb851f

08003a74 <sniprintf>:
 8003a74:	b40c      	push	{r2, r3}
 8003a76:	b530      	push	{r4, r5, lr}
 8003a78:	4b18      	ldr	r3, [pc, #96]	@ (8003adc <sniprintf+0x68>)
 8003a7a:	1e0c      	subs	r4, r1, #0
 8003a7c:	681d      	ldr	r5, [r3, #0]
 8003a7e:	b09d      	sub	sp, #116	@ 0x74
 8003a80:	da08      	bge.n	8003a94 <sniprintf+0x20>
 8003a82:	238b      	movs	r3, #139	@ 0x8b
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	b01d      	add	sp, #116	@ 0x74
 8003a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a90:	b002      	add	sp, #8
 8003a92:	4770      	bx	lr
 8003a94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003a98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003aa2:	bf0c      	ite	eq
 8003aa4:	4623      	moveq	r3, r4
 8003aa6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003aaa:	9304      	str	r3, [sp, #16]
 8003aac:	9307      	str	r3, [sp, #28]
 8003aae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ab2:	9002      	str	r0, [sp, #8]
 8003ab4:	9006      	str	r0, [sp, #24]
 8003ab6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003aba:	4628      	mov	r0, r5
 8003abc:	ab21      	add	r3, sp, #132	@ 0x84
 8003abe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003ac0:	a902      	add	r1, sp, #8
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	f000 f992 	bl	8003dec <_svfiprintf_r>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	bfbc      	itt	lt
 8003acc:	238b      	movlt	r3, #139	@ 0x8b
 8003ace:	602b      	strlt	r3, [r5, #0]
 8003ad0:	2c00      	cmp	r4, #0
 8003ad2:	d0da      	beq.n	8003a8a <sniprintf+0x16>
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	9b02      	ldr	r3, [sp, #8]
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e7d6      	b.n	8003a8a <sniprintf+0x16>
 8003adc:	20000014 	.word	0x20000014

08003ae0 <memset>:
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4402      	add	r2, r0
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d100      	bne.n	8003aea <memset+0xa>
 8003ae8:	4770      	bx	lr
 8003aea:	f803 1b01 	strb.w	r1, [r3], #1
 8003aee:	e7f9      	b.n	8003ae4 <memset+0x4>

08003af0 <__errno>:
 8003af0:	4b01      	ldr	r3, [pc, #4]	@ (8003af8 <__errno+0x8>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000014 	.word	0x20000014

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	2600      	movs	r6, #0
 8003b00:	4d0c      	ldr	r5, [pc, #48]	@ (8003b34 <__libc_init_array+0x38>)
 8003b02:	4c0d      	ldr	r4, [pc, #52]	@ (8003b38 <__libc_init_array+0x3c>)
 8003b04:	1b64      	subs	r4, r4, r5
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	42a6      	cmp	r6, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	f000 fc76 	bl	80043fc <_init>
 8003b10:	2600      	movs	r6, #0
 8003b12:	4d0a      	ldr	r5, [pc, #40]	@ (8003b3c <__libc_init_array+0x40>)
 8003b14:	4c0a      	ldr	r4, [pc, #40]	@ (8003b40 <__libc_init_array+0x44>)
 8003b16:	1b64      	subs	r4, r4, r5
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	42a6      	cmp	r6, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b24:	4798      	blx	r3
 8003b26:	3601      	adds	r6, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2e:	4798      	blx	r3
 8003b30:	3601      	adds	r6, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08004528 	.word	0x08004528
 8003b38:	08004528 	.word	0x08004528
 8003b3c:	08004528 	.word	0x08004528
 8003b40:	0800452c 	.word	0x0800452c

08003b44 <__retarget_lock_acquire_recursive>:
 8003b44:	4770      	bx	lr

08003b46 <__retarget_lock_release_recursive>:
 8003b46:	4770      	bx	lr

08003b48 <_free_r>:
 8003b48:	b538      	push	{r3, r4, r5, lr}
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	2900      	cmp	r1, #0
 8003b4e:	d040      	beq.n	8003bd2 <_free_r+0x8a>
 8003b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b54:	1f0c      	subs	r4, r1, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bfb8      	it	lt
 8003b5a:	18e4      	addlt	r4, r4, r3
 8003b5c:	f000 f8de 	bl	8003d1c <__malloc_lock>
 8003b60:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd4 <_free_r+0x8c>)
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	b933      	cbnz	r3, 8003b74 <_free_r+0x2c>
 8003b66:	6063      	str	r3, [r4, #4]
 8003b68:	6014      	str	r4, [r2, #0]
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b70:	f000 b8da 	b.w	8003d28 <__malloc_unlock>
 8003b74:	42a3      	cmp	r3, r4
 8003b76:	d908      	bls.n	8003b8a <_free_r+0x42>
 8003b78:	6820      	ldr	r0, [r4, #0]
 8003b7a:	1821      	adds	r1, r4, r0
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	bf01      	itttt	eq
 8003b80:	6819      	ldreq	r1, [r3, #0]
 8003b82:	685b      	ldreq	r3, [r3, #4]
 8003b84:	1809      	addeq	r1, r1, r0
 8003b86:	6021      	streq	r1, [r4, #0]
 8003b88:	e7ed      	b.n	8003b66 <_free_r+0x1e>
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	b10b      	cbz	r3, 8003b94 <_free_r+0x4c>
 8003b90:	42a3      	cmp	r3, r4
 8003b92:	d9fa      	bls.n	8003b8a <_free_r+0x42>
 8003b94:	6811      	ldr	r1, [r2, #0]
 8003b96:	1850      	adds	r0, r2, r1
 8003b98:	42a0      	cmp	r0, r4
 8003b9a:	d10b      	bne.n	8003bb4 <_free_r+0x6c>
 8003b9c:	6820      	ldr	r0, [r4, #0]
 8003b9e:	4401      	add	r1, r0
 8003ba0:	1850      	adds	r0, r2, r1
 8003ba2:	4283      	cmp	r3, r0
 8003ba4:	6011      	str	r1, [r2, #0]
 8003ba6:	d1e0      	bne.n	8003b6a <_free_r+0x22>
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4408      	add	r0, r1
 8003bae:	6010      	str	r0, [r2, #0]
 8003bb0:	6053      	str	r3, [r2, #4]
 8003bb2:	e7da      	b.n	8003b6a <_free_r+0x22>
 8003bb4:	d902      	bls.n	8003bbc <_free_r+0x74>
 8003bb6:	230c      	movs	r3, #12
 8003bb8:	602b      	str	r3, [r5, #0]
 8003bba:	e7d6      	b.n	8003b6a <_free_r+0x22>
 8003bbc:	6820      	ldr	r0, [r4, #0]
 8003bbe:	1821      	adds	r1, r4, r0
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	bf01      	itttt	eq
 8003bc4:	6819      	ldreq	r1, [r3, #0]
 8003bc6:	685b      	ldreq	r3, [r3, #4]
 8003bc8:	1809      	addeq	r1, r1, r0
 8003bca:	6021      	streq	r1, [r4, #0]
 8003bcc:	6063      	str	r3, [r4, #4]
 8003bce:	6054      	str	r4, [r2, #4]
 8003bd0:	e7cb      	b.n	8003b6a <_free_r+0x22>
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
 8003bd4:	2000029c 	.word	0x2000029c

08003bd8 <sbrk_aligned>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	4e0f      	ldr	r6, [pc, #60]	@ (8003c18 <sbrk_aligned+0x40>)
 8003bdc:	460c      	mov	r4, r1
 8003bde:	6831      	ldr	r1, [r6, #0]
 8003be0:	4605      	mov	r5, r0
 8003be2:	b911      	cbnz	r1, 8003bea <sbrk_aligned+0x12>
 8003be4:	f000 fba8 	bl	8004338 <_sbrk_r>
 8003be8:	6030      	str	r0, [r6, #0]
 8003bea:	4621      	mov	r1, r4
 8003bec:	4628      	mov	r0, r5
 8003bee:	f000 fba3 	bl	8004338 <_sbrk_r>
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	d103      	bne.n	8003bfe <sbrk_aligned+0x26>
 8003bf6:	f04f 34ff 	mov.w	r4, #4294967295
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	bd70      	pop	{r4, r5, r6, pc}
 8003bfe:	1cc4      	adds	r4, r0, #3
 8003c00:	f024 0403 	bic.w	r4, r4, #3
 8003c04:	42a0      	cmp	r0, r4
 8003c06:	d0f8      	beq.n	8003bfa <sbrk_aligned+0x22>
 8003c08:	1a21      	subs	r1, r4, r0
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f000 fb94 	bl	8004338 <_sbrk_r>
 8003c10:	3001      	adds	r0, #1
 8003c12:	d1f2      	bne.n	8003bfa <sbrk_aligned+0x22>
 8003c14:	e7ef      	b.n	8003bf6 <sbrk_aligned+0x1e>
 8003c16:	bf00      	nop
 8003c18:	20000298 	.word	0x20000298

08003c1c <_malloc_r>:
 8003c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c20:	1ccd      	adds	r5, r1, #3
 8003c22:	f025 0503 	bic.w	r5, r5, #3
 8003c26:	3508      	adds	r5, #8
 8003c28:	2d0c      	cmp	r5, #12
 8003c2a:	bf38      	it	cc
 8003c2c:	250c      	movcc	r5, #12
 8003c2e:	2d00      	cmp	r5, #0
 8003c30:	4606      	mov	r6, r0
 8003c32:	db01      	blt.n	8003c38 <_malloc_r+0x1c>
 8003c34:	42a9      	cmp	r1, r5
 8003c36:	d904      	bls.n	8003c42 <_malloc_r+0x26>
 8003c38:	230c      	movs	r3, #12
 8003c3a:	6033      	str	r3, [r6, #0]
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d18 <_malloc_r+0xfc>
 8003c46:	f000 f869 	bl	8003d1c <__malloc_lock>
 8003c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c4e:	461c      	mov	r4, r3
 8003c50:	bb44      	cbnz	r4, 8003ca4 <_malloc_r+0x88>
 8003c52:	4629      	mov	r1, r5
 8003c54:	4630      	mov	r0, r6
 8003c56:	f7ff ffbf 	bl	8003bd8 <sbrk_aligned>
 8003c5a:	1c43      	adds	r3, r0, #1
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	d158      	bne.n	8003d12 <_malloc_r+0xf6>
 8003c60:	f8d8 4000 	ldr.w	r4, [r8]
 8003c64:	4627      	mov	r7, r4
 8003c66:	2f00      	cmp	r7, #0
 8003c68:	d143      	bne.n	8003cf2 <_malloc_r+0xd6>
 8003c6a:	2c00      	cmp	r4, #0
 8003c6c:	d04b      	beq.n	8003d06 <_malloc_r+0xea>
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	4639      	mov	r1, r7
 8003c72:	4630      	mov	r0, r6
 8003c74:	eb04 0903 	add.w	r9, r4, r3
 8003c78:	f000 fb5e 	bl	8004338 <_sbrk_r>
 8003c7c:	4581      	cmp	r9, r0
 8003c7e:	d142      	bne.n	8003d06 <_malloc_r+0xea>
 8003c80:	6821      	ldr	r1, [r4, #0]
 8003c82:	4630      	mov	r0, r6
 8003c84:	1a6d      	subs	r5, r5, r1
 8003c86:	4629      	mov	r1, r5
 8003c88:	f7ff ffa6 	bl	8003bd8 <sbrk_aligned>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d03a      	beq.n	8003d06 <_malloc_r+0xea>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	442b      	add	r3, r5
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	f8d8 3000 	ldr.w	r3, [r8]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	bb62      	cbnz	r2, 8003cf8 <_malloc_r+0xdc>
 8003c9e:	f8c8 7000 	str.w	r7, [r8]
 8003ca2:	e00f      	b.n	8003cc4 <_malloc_r+0xa8>
 8003ca4:	6822      	ldr	r2, [r4, #0]
 8003ca6:	1b52      	subs	r2, r2, r5
 8003ca8:	d420      	bmi.n	8003cec <_malloc_r+0xd0>
 8003caa:	2a0b      	cmp	r2, #11
 8003cac:	d917      	bls.n	8003cde <_malloc_r+0xc2>
 8003cae:	1961      	adds	r1, r4, r5
 8003cb0:	42a3      	cmp	r3, r4
 8003cb2:	6025      	str	r5, [r4, #0]
 8003cb4:	bf18      	it	ne
 8003cb6:	6059      	strne	r1, [r3, #4]
 8003cb8:	6863      	ldr	r3, [r4, #4]
 8003cba:	bf08      	it	eq
 8003cbc:	f8c8 1000 	streq.w	r1, [r8]
 8003cc0:	5162      	str	r2, [r4, r5]
 8003cc2:	604b      	str	r3, [r1, #4]
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	f000 f82f 	bl	8003d28 <__malloc_unlock>
 8003cca:	f104 000b 	add.w	r0, r4, #11
 8003cce:	1d23      	adds	r3, r4, #4
 8003cd0:	f020 0007 	bic.w	r0, r0, #7
 8003cd4:	1ac2      	subs	r2, r0, r3
 8003cd6:	bf1c      	itt	ne
 8003cd8:	1a1b      	subne	r3, r3, r0
 8003cda:	50a3      	strne	r3, [r4, r2]
 8003cdc:	e7af      	b.n	8003c3e <_malloc_r+0x22>
 8003cde:	6862      	ldr	r2, [r4, #4]
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	bf0c      	ite	eq
 8003ce4:	f8c8 2000 	streq.w	r2, [r8]
 8003ce8:	605a      	strne	r2, [r3, #4]
 8003cea:	e7eb      	b.n	8003cc4 <_malloc_r+0xa8>
 8003cec:	4623      	mov	r3, r4
 8003cee:	6864      	ldr	r4, [r4, #4]
 8003cf0:	e7ae      	b.n	8003c50 <_malloc_r+0x34>
 8003cf2:	463c      	mov	r4, r7
 8003cf4:	687f      	ldr	r7, [r7, #4]
 8003cf6:	e7b6      	b.n	8003c66 <_malloc_r+0x4a>
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	d1fb      	bne.n	8003cf8 <_malloc_r+0xdc>
 8003d00:	2300      	movs	r3, #0
 8003d02:	6053      	str	r3, [r2, #4]
 8003d04:	e7de      	b.n	8003cc4 <_malloc_r+0xa8>
 8003d06:	230c      	movs	r3, #12
 8003d08:	4630      	mov	r0, r6
 8003d0a:	6033      	str	r3, [r6, #0]
 8003d0c:	f000 f80c 	bl	8003d28 <__malloc_unlock>
 8003d10:	e794      	b.n	8003c3c <_malloc_r+0x20>
 8003d12:	6005      	str	r5, [r0, #0]
 8003d14:	e7d6      	b.n	8003cc4 <_malloc_r+0xa8>
 8003d16:	bf00      	nop
 8003d18:	2000029c 	.word	0x2000029c

08003d1c <__malloc_lock>:
 8003d1c:	4801      	ldr	r0, [pc, #4]	@ (8003d24 <__malloc_lock+0x8>)
 8003d1e:	f7ff bf11 	b.w	8003b44 <__retarget_lock_acquire_recursive>
 8003d22:	bf00      	nop
 8003d24:	20000294 	.word	0x20000294

08003d28 <__malloc_unlock>:
 8003d28:	4801      	ldr	r0, [pc, #4]	@ (8003d30 <__malloc_unlock+0x8>)
 8003d2a:	f7ff bf0c 	b.w	8003b46 <__retarget_lock_release_recursive>
 8003d2e:	bf00      	nop
 8003d30:	20000294 	.word	0x20000294

08003d34 <__ssputs_r>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	461f      	mov	r7, r3
 8003d3a:	688e      	ldr	r6, [r1, #8]
 8003d3c:	4682      	mov	sl, r0
 8003d3e:	42be      	cmp	r6, r7
 8003d40:	460c      	mov	r4, r1
 8003d42:	4690      	mov	r8, r2
 8003d44:	680b      	ldr	r3, [r1, #0]
 8003d46:	d82d      	bhi.n	8003da4 <__ssputs_r+0x70>
 8003d48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003d50:	d026      	beq.n	8003da0 <__ssputs_r+0x6c>
 8003d52:	6965      	ldr	r5, [r4, #20]
 8003d54:	6909      	ldr	r1, [r1, #16]
 8003d56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d5a:	eba3 0901 	sub.w	r9, r3, r1
 8003d5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d62:	1c7b      	adds	r3, r7, #1
 8003d64:	444b      	add	r3, r9
 8003d66:	106d      	asrs	r5, r5, #1
 8003d68:	429d      	cmp	r5, r3
 8003d6a:	bf38      	it	cc
 8003d6c:	461d      	movcc	r5, r3
 8003d6e:	0553      	lsls	r3, r2, #21
 8003d70:	d527      	bpl.n	8003dc2 <__ssputs_r+0x8e>
 8003d72:	4629      	mov	r1, r5
 8003d74:	f7ff ff52 	bl	8003c1c <_malloc_r>
 8003d78:	4606      	mov	r6, r0
 8003d7a:	b360      	cbz	r0, 8003dd6 <__ssputs_r+0xa2>
 8003d7c:	464a      	mov	r2, r9
 8003d7e:	6921      	ldr	r1, [r4, #16]
 8003d80:	f000 faf8 	bl	8004374 <memcpy>
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	6126      	str	r6, [r4, #16]
 8003d92:	444e      	add	r6, r9
 8003d94:	6026      	str	r6, [r4, #0]
 8003d96:	463e      	mov	r6, r7
 8003d98:	6165      	str	r5, [r4, #20]
 8003d9a:	eba5 0509 	sub.w	r5, r5, r9
 8003d9e:	60a5      	str	r5, [r4, #8]
 8003da0:	42be      	cmp	r6, r7
 8003da2:	d900      	bls.n	8003da6 <__ssputs_r+0x72>
 8003da4:	463e      	mov	r6, r7
 8003da6:	4632      	mov	r2, r6
 8003da8:	4641      	mov	r1, r8
 8003daa:	6820      	ldr	r0, [r4, #0]
 8003dac:	f000 faaa 	bl	8004304 <memmove>
 8003db0:	2000      	movs	r0, #0
 8003db2:	68a3      	ldr	r3, [r4, #8]
 8003db4:	1b9b      	subs	r3, r3, r6
 8003db6:	60a3      	str	r3, [r4, #8]
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	4433      	add	r3, r6
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc2:	462a      	mov	r2, r5
 8003dc4:	f000 fae4 	bl	8004390 <_realloc_r>
 8003dc8:	4606      	mov	r6, r0
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	d1e0      	bne.n	8003d90 <__ssputs_r+0x5c>
 8003dce:	4650      	mov	r0, sl
 8003dd0:	6921      	ldr	r1, [r4, #16]
 8003dd2:	f7ff feb9 	bl	8003b48 <_free_r>
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	f8ca 3000 	str.w	r3, [sl]
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	f04f 30ff 	mov.w	r0, #4294967295
 8003de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003de6:	81a3      	strh	r3, [r4, #12]
 8003de8:	e7e9      	b.n	8003dbe <__ssputs_r+0x8a>
	...

08003dec <_svfiprintf_r>:
 8003dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df0:	4698      	mov	r8, r3
 8003df2:	898b      	ldrh	r3, [r1, #12]
 8003df4:	4607      	mov	r7, r0
 8003df6:	061b      	lsls	r3, r3, #24
 8003df8:	460d      	mov	r5, r1
 8003dfa:	4614      	mov	r4, r2
 8003dfc:	b09d      	sub	sp, #116	@ 0x74
 8003dfe:	d510      	bpl.n	8003e22 <_svfiprintf_r+0x36>
 8003e00:	690b      	ldr	r3, [r1, #16]
 8003e02:	b973      	cbnz	r3, 8003e22 <_svfiprintf_r+0x36>
 8003e04:	2140      	movs	r1, #64	@ 0x40
 8003e06:	f7ff ff09 	bl	8003c1c <_malloc_r>
 8003e0a:	6028      	str	r0, [r5, #0]
 8003e0c:	6128      	str	r0, [r5, #16]
 8003e0e:	b930      	cbnz	r0, 8003e1e <_svfiprintf_r+0x32>
 8003e10:	230c      	movs	r3, #12
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	b01d      	add	sp, #116	@ 0x74
 8003e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e1e:	2340      	movs	r3, #64	@ 0x40
 8003e20:	616b      	str	r3, [r5, #20]
 8003e22:	2300      	movs	r3, #0
 8003e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e26:	2320      	movs	r3, #32
 8003e28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e2c:	2330      	movs	r3, #48	@ 0x30
 8003e2e:	f04f 0901 	mov.w	r9, #1
 8003e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003fd0 <_svfiprintf_r+0x1e4>
 8003e3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e3e:	4623      	mov	r3, r4
 8003e40:	469a      	mov	sl, r3
 8003e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e46:	b10a      	cbz	r2, 8003e4c <_svfiprintf_r+0x60>
 8003e48:	2a25      	cmp	r2, #37	@ 0x25
 8003e4a:	d1f9      	bne.n	8003e40 <_svfiprintf_r+0x54>
 8003e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e50:	d00b      	beq.n	8003e6a <_svfiprintf_r+0x7e>
 8003e52:	465b      	mov	r3, fp
 8003e54:	4622      	mov	r2, r4
 8003e56:	4629      	mov	r1, r5
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7ff ff6b 	bl	8003d34 <__ssputs_r>
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f000 80a7 	beq.w	8003fb2 <_svfiprintf_r+0x1c6>
 8003e64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e66:	445a      	add	r2, fp
 8003e68:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 809f 	beq.w	8003fb2 <_svfiprintf_r+0x1c6>
 8003e74:	2300      	movs	r3, #0
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e7e:	f10a 0a01 	add.w	sl, sl, #1
 8003e82:	9304      	str	r3, [sp, #16]
 8003e84:	9307      	str	r3, [sp, #28]
 8003e86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e8c:	4654      	mov	r4, sl
 8003e8e:	2205      	movs	r2, #5
 8003e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e94:	484e      	ldr	r0, [pc, #312]	@ (8003fd0 <_svfiprintf_r+0x1e4>)
 8003e96:	f000 fa5f 	bl	8004358 <memchr>
 8003e9a:	9a04      	ldr	r2, [sp, #16]
 8003e9c:	b9d8      	cbnz	r0, 8003ed6 <_svfiprintf_r+0xea>
 8003e9e:	06d0      	lsls	r0, r2, #27
 8003ea0:	bf44      	itt	mi
 8003ea2:	2320      	movmi	r3, #32
 8003ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ea8:	0711      	lsls	r1, r2, #28
 8003eaa:	bf44      	itt	mi
 8003eac:	232b      	movmi	r3, #43	@ 0x2b
 8003eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003eb8:	d015      	beq.n	8003ee6 <_svfiprintf_r+0xfa>
 8003eba:	4654      	mov	r4, sl
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f04f 0c0a 	mov.w	ip, #10
 8003ec2:	9a07      	ldr	r2, [sp, #28]
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eca:	3b30      	subs	r3, #48	@ 0x30
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	d94b      	bls.n	8003f68 <_svfiprintf_r+0x17c>
 8003ed0:	b1b0      	cbz	r0, 8003f00 <_svfiprintf_r+0x114>
 8003ed2:	9207      	str	r2, [sp, #28]
 8003ed4:	e014      	b.n	8003f00 <_svfiprintf_r+0x114>
 8003ed6:	eba0 0308 	sub.w	r3, r0, r8
 8003eda:	fa09 f303 	lsl.w	r3, r9, r3
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	46a2      	mov	sl, r4
 8003ee2:	9304      	str	r3, [sp, #16]
 8003ee4:	e7d2      	b.n	8003e8c <_svfiprintf_r+0xa0>
 8003ee6:	9b03      	ldr	r3, [sp, #12]
 8003ee8:	1d19      	adds	r1, r3, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	9103      	str	r1, [sp, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bfbb      	ittet	lt
 8003ef2:	425b      	neglt	r3, r3
 8003ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ef8:	9307      	strge	r3, [sp, #28]
 8003efa:	9307      	strlt	r3, [sp, #28]
 8003efc:	bfb8      	it	lt
 8003efe:	9204      	strlt	r2, [sp, #16]
 8003f00:	7823      	ldrb	r3, [r4, #0]
 8003f02:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f04:	d10a      	bne.n	8003f1c <_svfiprintf_r+0x130>
 8003f06:	7863      	ldrb	r3, [r4, #1]
 8003f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f0a:	d132      	bne.n	8003f72 <_svfiprintf_r+0x186>
 8003f0c:	9b03      	ldr	r3, [sp, #12]
 8003f0e:	3402      	adds	r4, #2
 8003f10:	1d1a      	adds	r2, r3, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	9203      	str	r2, [sp, #12]
 8003f16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f1a:	9305      	str	r3, [sp, #20]
 8003f1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003fd4 <_svfiprintf_r+0x1e8>
 8003f20:	2203      	movs	r2, #3
 8003f22:	4650      	mov	r0, sl
 8003f24:	7821      	ldrb	r1, [r4, #0]
 8003f26:	f000 fa17 	bl	8004358 <memchr>
 8003f2a:	b138      	cbz	r0, 8003f3c <_svfiprintf_r+0x150>
 8003f2c:	2240      	movs	r2, #64	@ 0x40
 8003f2e:	9b04      	ldr	r3, [sp, #16]
 8003f30:	eba0 000a 	sub.w	r0, r0, sl
 8003f34:	4082      	lsls	r2, r0
 8003f36:	4313      	orrs	r3, r2
 8003f38:	3401      	adds	r4, #1
 8003f3a:	9304      	str	r3, [sp, #16]
 8003f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f40:	2206      	movs	r2, #6
 8003f42:	4825      	ldr	r0, [pc, #148]	@ (8003fd8 <_svfiprintf_r+0x1ec>)
 8003f44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f48:	f000 fa06 	bl	8004358 <memchr>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d036      	beq.n	8003fbe <_svfiprintf_r+0x1d2>
 8003f50:	4b22      	ldr	r3, [pc, #136]	@ (8003fdc <_svfiprintf_r+0x1f0>)
 8003f52:	bb1b      	cbnz	r3, 8003f9c <_svfiprintf_r+0x1b0>
 8003f54:	9b03      	ldr	r3, [sp, #12]
 8003f56:	3307      	adds	r3, #7
 8003f58:	f023 0307 	bic.w	r3, r3, #7
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	9303      	str	r3, [sp, #12]
 8003f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f62:	4433      	add	r3, r6
 8003f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f66:	e76a      	b.n	8003e3e <_svfiprintf_r+0x52>
 8003f68:	460c      	mov	r4, r1
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f70:	e7a8      	b.n	8003ec4 <_svfiprintf_r+0xd8>
 8003f72:	2300      	movs	r3, #0
 8003f74:	f04f 0c0a 	mov.w	ip, #10
 8003f78:	4619      	mov	r1, r3
 8003f7a:	3401      	adds	r4, #1
 8003f7c:	9305      	str	r3, [sp, #20]
 8003f7e:	4620      	mov	r0, r4
 8003f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f84:	3a30      	subs	r2, #48	@ 0x30
 8003f86:	2a09      	cmp	r2, #9
 8003f88:	d903      	bls.n	8003f92 <_svfiprintf_r+0x1a6>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0c6      	beq.n	8003f1c <_svfiprintf_r+0x130>
 8003f8e:	9105      	str	r1, [sp, #20]
 8003f90:	e7c4      	b.n	8003f1c <_svfiprintf_r+0x130>
 8003f92:	4604      	mov	r4, r0
 8003f94:	2301      	movs	r3, #1
 8003f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f9a:	e7f0      	b.n	8003f7e <_svfiprintf_r+0x192>
 8003f9c:	ab03      	add	r3, sp, #12
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	462a      	mov	r2, r5
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe0 <_svfiprintf_r+0x1f4>)
 8003fa6:	a904      	add	r1, sp, #16
 8003fa8:	f3af 8000 	nop.w
 8003fac:	1c42      	adds	r2, r0, #1
 8003fae:	4606      	mov	r6, r0
 8003fb0:	d1d6      	bne.n	8003f60 <_svfiprintf_r+0x174>
 8003fb2:	89ab      	ldrh	r3, [r5, #12]
 8003fb4:	065b      	lsls	r3, r3, #25
 8003fb6:	f53f af2d 	bmi.w	8003e14 <_svfiprintf_r+0x28>
 8003fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003fbc:	e72c      	b.n	8003e18 <_svfiprintf_r+0x2c>
 8003fbe:	ab03      	add	r3, sp, #12
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	462a      	mov	r2, r5
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <_svfiprintf_r+0x1f4>)
 8003fc8:	a904      	add	r1, sp, #16
 8003fca:	f000 f87d 	bl	80040c8 <_printf_i>
 8003fce:	e7ed      	b.n	8003fac <_svfiprintf_r+0x1c0>
 8003fd0:	080044f2 	.word	0x080044f2
 8003fd4:	080044f8 	.word	0x080044f8
 8003fd8:	080044fc 	.word	0x080044fc
 8003fdc:	00000000 	.word	0x00000000
 8003fe0:	08003d35 	.word	0x08003d35

08003fe4 <_printf_common>:
 8003fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	4616      	mov	r6, r2
 8003fea:	4698      	mov	r8, r3
 8003fec:	688a      	ldr	r2, [r1, #8]
 8003fee:	690b      	ldr	r3, [r1, #16]
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	bfb8      	it	lt
 8003ff6:	4613      	movlt	r3, r2
 8003ff8:	6033      	str	r3, [r6, #0]
 8003ffa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ffe:	460c      	mov	r4, r1
 8004000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004004:	b10a      	cbz	r2, 800400a <_printf_common+0x26>
 8004006:	3301      	adds	r3, #1
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	0699      	lsls	r1, r3, #26
 800400e:	bf42      	ittt	mi
 8004010:	6833      	ldrmi	r3, [r6, #0]
 8004012:	3302      	addmi	r3, #2
 8004014:	6033      	strmi	r3, [r6, #0]
 8004016:	6825      	ldr	r5, [r4, #0]
 8004018:	f015 0506 	ands.w	r5, r5, #6
 800401c:	d106      	bne.n	800402c <_printf_common+0x48>
 800401e:	f104 0a19 	add.w	sl, r4, #25
 8004022:	68e3      	ldr	r3, [r4, #12]
 8004024:	6832      	ldr	r2, [r6, #0]
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	42ab      	cmp	r3, r5
 800402a:	dc2b      	bgt.n	8004084 <_printf_common+0xa0>
 800402c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	3b00      	subs	r3, #0
 8004034:	bf18      	it	ne
 8004036:	2301      	movne	r3, #1
 8004038:	0692      	lsls	r2, r2, #26
 800403a:	d430      	bmi.n	800409e <_printf_common+0xba>
 800403c:	4641      	mov	r1, r8
 800403e:	4638      	mov	r0, r7
 8004040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004044:	47c8      	blx	r9
 8004046:	3001      	adds	r0, #1
 8004048:	d023      	beq.n	8004092 <_printf_common+0xae>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	6922      	ldr	r2, [r4, #16]
 800404e:	f003 0306 	and.w	r3, r3, #6
 8004052:	2b04      	cmp	r3, #4
 8004054:	bf14      	ite	ne
 8004056:	2500      	movne	r5, #0
 8004058:	6833      	ldreq	r3, [r6, #0]
 800405a:	f04f 0600 	mov.w	r6, #0
 800405e:	bf08      	it	eq
 8004060:	68e5      	ldreq	r5, [r4, #12]
 8004062:	f104 041a 	add.w	r4, r4, #26
 8004066:	bf08      	it	eq
 8004068:	1aed      	subeq	r5, r5, r3
 800406a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800406e:	bf08      	it	eq
 8004070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004074:	4293      	cmp	r3, r2
 8004076:	bfc4      	itt	gt
 8004078:	1a9b      	subgt	r3, r3, r2
 800407a:	18ed      	addgt	r5, r5, r3
 800407c:	42b5      	cmp	r5, r6
 800407e:	d11a      	bne.n	80040b6 <_printf_common+0xd2>
 8004080:	2000      	movs	r0, #0
 8004082:	e008      	b.n	8004096 <_printf_common+0xb2>
 8004084:	2301      	movs	r3, #1
 8004086:	4652      	mov	r2, sl
 8004088:	4641      	mov	r1, r8
 800408a:	4638      	mov	r0, r7
 800408c:	47c8      	blx	r9
 800408e:	3001      	adds	r0, #1
 8004090:	d103      	bne.n	800409a <_printf_common+0xb6>
 8004092:	f04f 30ff 	mov.w	r0, #4294967295
 8004096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409a:	3501      	adds	r5, #1
 800409c:	e7c1      	b.n	8004022 <_printf_common+0x3e>
 800409e:	2030      	movs	r0, #48	@ 0x30
 80040a0:	18e1      	adds	r1, r4, r3
 80040a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040ac:	4422      	add	r2, r4
 80040ae:	3302      	adds	r3, #2
 80040b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040b4:	e7c2      	b.n	800403c <_printf_common+0x58>
 80040b6:	2301      	movs	r3, #1
 80040b8:	4622      	mov	r2, r4
 80040ba:	4641      	mov	r1, r8
 80040bc:	4638      	mov	r0, r7
 80040be:	47c8      	blx	r9
 80040c0:	3001      	adds	r0, #1
 80040c2:	d0e6      	beq.n	8004092 <_printf_common+0xae>
 80040c4:	3601      	adds	r6, #1
 80040c6:	e7d9      	b.n	800407c <_printf_common+0x98>

080040c8 <_printf_i>:
 80040c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040cc:	7e0f      	ldrb	r7, [r1, #24]
 80040ce:	4691      	mov	r9, r2
 80040d0:	2f78      	cmp	r7, #120	@ 0x78
 80040d2:	4680      	mov	r8, r0
 80040d4:	460c      	mov	r4, r1
 80040d6:	469a      	mov	sl, r3
 80040d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040de:	d807      	bhi.n	80040f0 <_printf_i+0x28>
 80040e0:	2f62      	cmp	r7, #98	@ 0x62
 80040e2:	d80a      	bhi.n	80040fa <_printf_i+0x32>
 80040e4:	2f00      	cmp	r7, #0
 80040e6:	f000 80d1 	beq.w	800428c <_printf_i+0x1c4>
 80040ea:	2f58      	cmp	r7, #88	@ 0x58
 80040ec:	f000 80b8 	beq.w	8004260 <_printf_i+0x198>
 80040f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040f8:	e03a      	b.n	8004170 <_printf_i+0xa8>
 80040fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040fe:	2b15      	cmp	r3, #21
 8004100:	d8f6      	bhi.n	80040f0 <_printf_i+0x28>
 8004102:	a101      	add	r1, pc, #4	@ (adr r1, 8004108 <_printf_i+0x40>)
 8004104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004108:	08004161 	.word	0x08004161
 800410c:	08004175 	.word	0x08004175
 8004110:	080040f1 	.word	0x080040f1
 8004114:	080040f1 	.word	0x080040f1
 8004118:	080040f1 	.word	0x080040f1
 800411c:	080040f1 	.word	0x080040f1
 8004120:	08004175 	.word	0x08004175
 8004124:	080040f1 	.word	0x080040f1
 8004128:	080040f1 	.word	0x080040f1
 800412c:	080040f1 	.word	0x080040f1
 8004130:	080040f1 	.word	0x080040f1
 8004134:	08004273 	.word	0x08004273
 8004138:	0800419f 	.word	0x0800419f
 800413c:	0800422d 	.word	0x0800422d
 8004140:	080040f1 	.word	0x080040f1
 8004144:	080040f1 	.word	0x080040f1
 8004148:	08004295 	.word	0x08004295
 800414c:	080040f1 	.word	0x080040f1
 8004150:	0800419f 	.word	0x0800419f
 8004154:	080040f1 	.word	0x080040f1
 8004158:	080040f1 	.word	0x080040f1
 800415c:	08004235 	.word	0x08004235
 8004160:	6833      	ldr	r3, [r6, #0]
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6032      	str	r2, [r6, #0]
 8004168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800416c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004170:	2301      	movs	r3, #1
 8004172:	e09c      	b.n	80042ae <_printf_i+0x1e6>
 8004174:	6833      	ldr	r3, [r6, #0]
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	1d19      	adds	r1, r3, #4
 800417a:	6031      	str	r1, [r6, #0]
 800417c:	0606      	lsls	r6, r0, #24
 800417e:	d501      	bpl.n	8004184 <_printf_i+0xbc>
 8004180:	681d      	ldr	r5, [r3, #0]
 8004182:	e003      	b.n	800418c <_printf_i+0xc4>
 8004184:	0645      	lsls	r5, r0, #25
 8004186:	d5fb      	bpl.n	8004180 <_printf_i+0xb8>
 8004188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800418c:	2d00      	cmp	r5, #0
 800418e:	da03      	bge.n	8004198 <_printf_i+0xd0>
 8004190:	232d      	movs	r3, #45	@ 0x2d
 8004192:	426d      	negs	r5, r5
 8004194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004198:	230a      	movs	r3, #10
 800419a:	4858      	ldr	r0, [pc, #352]	@ (80042fc <_printf_i+0x234>)
 800419c:	e011      	b.n	80041c2 <_printf_i+0xfa>
 800419e:	6821      	ldr	r1, [r4, #0]
 80041a0:	6833      	ldr	r3, [r6, #0]
 80041a2:	0608      	lsls	r0, r1, #24
 80041a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80041a8:	d402      	bmi.n	80041b0 <_printf_i+0xe8>
 80041aa:	0649      	lsls	r1, r1, #25
 80041ac:	bf48      	it	mi
 80041ae:	b2ad      	uxthmi	r5, r5
 80041b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80041b2:	6033      	str	r3, [r6, #0]
 80041b4:	bf14      	ite	ne
 80041b6:	230a      	movne	r3, #10
 80041b8:	2308      	moveq	r3, #8
 80041ba:	4850      	ldr	r0, [pc, #320]	@ (80042fc <_printf_i+0x234>)
 80041bc:	2100      	movs	r1, #0
 80041be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041c2:	6866      	ldr	r6, [r4, #4]
 80041c4:	2e00      	cmp	r6, #0
 80041c6:	60a6      	str	r6, [r4, #8]
 80041c8:	db05      	blt.n	80041d6 <_printf_i+0x10e>
 80041ca:	6821      	ldr	r1, [r4, #0]
 80041cc:	432e      	orrs	r6, r5
 80041ce:	f021 0104 	bic.w	r1, r1, #4
 80041d2:	6021      	str	r1, [r4, #0]
 80041d4:	d04b      	beq.n	800426e <_printf_i+0x1a6>
 80041d6:	4616      	mov	r6, r2
 80041d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80041dc:	fb03 5711 	mls	r7, r3, r1, r5
 80041e0:	5dc7      	ldrb	r7, [r0, r7]
 80041e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041e6:	462f      	mov	r7, r5
 80041e8:	42bb      	cmp	r3, r7
 80041ea:	460d      	mov	r5, r1
 80041ec:	d9f4      	bls.n	80041d8 <_printf_i+0x110>
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d10b      	bne.n	800420a <_printf_i+0x142>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	07df      	lsls	r7, r3, #31
 80041f6:	d508      	bpl.n	800420a <_printf_i+0x142>
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	6861      	ldr	r1, [r4, #4]
 80041fc:	4299      	cmp	r1, r3
 80041fe:	bfde      	ittt	le
 8004200:	2330      	movle	r3, #48	@ 0x30
 8004202:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004206:	f106 36ff 	addle.w	r6, r6, #4294967295
 800420a:	1b92      	subs	r2, r2, r6
 800420c:	6122      	str	r2, [r4, #16]
 800420e:	464b      	mov	r3, r9
 8004210:	4621      	mov	r1, r4
 8004212:	4640      	mov	r0, r8
 8004214:	f8cd a000 	str.w	sl, [sp]
 8004218:	aa03      	add	r2, sp, #12
 800421a:	f7ff fee3 	bl	8003fe4 <_printf_common>
 800421e:	3001      	adds	r0, #1
 8004220:	d14a      	bne.n	80042b8 <_printf_i+0x1f0>
 8004222:	f04f 30ff 	mov.w	r0, #4294967295
 8004226:	b004      	add	sp, #16
 8004228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	f043 0320 	orr.w	r3, r3, #32
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	2778      	movs	r7, #120	@ 0x78
 8004236:	4832      	ldr	r0, [pc, #200]	@ (8004300 <_printf_i+0x238>)
 8004238:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	6831      	ldr	r1, [r6, #0]
 8004240:	061f      	lsls	r7, r3, #24
 8004242:	f851 5b04 	ldr.w	r5, [r1], #4
 8004246:	d402      	bmi.n	800424e <_printf_i+0x186>
 8004248:	065f      	lsls	r7, r3, #25
 800424a:	bf48      	it	mi
 800424c:	b2ad      	uxthmi	r5, r5
 800424e:	6031      	str	r1, [r6, #0]
 8004250:	07d9      	lsls	r1, r3, #31
 8004252:	bf44      	itt	mi
 8004254:	f043 0320 	orrmi.w	r3, r3, #32
 8004258:	6023      	strmi	r3, [r4, #0]
 800425a:	b11d      	cbz	r5, 8004264 <_printf_i+0x19c>
 800425c:	2310      	movs	r3, #16
 800425e:	e7ad      	b.n	80041bc <_printf_i+0xf4>
 8004260:	4826      	ldr	r0, [pc, #152]	@ (80042fc <_printf_i+0x234>)
 8004262:	e7e9      	b.n	8004238 <_printf_i+0x170>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	f023 0320 	bic.w	r3, r3, #32
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	e7f6      	b.n	800425c <_printf_i+0x194>
 800426e:	4616      	mov	r6, r2
 8004270:	e7bd      	b.n	80041ee <_printf_i+0x126>
 8004272:	6833      	ldr	r3, [r6, #0]
 8004274:	6825      	ldr	r5, [r4, #0]
 8004276:	1d18      	adds	r0, r3, #4
 8004278:	6961      	ldr	r1, [r4, #20]
 800427a:	6030      	str	r0, [r6, #0]
 800427c:	062e      	lsls	r6, r5, #24
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	d501      	bpl.n	8004286 <_printf_i+0x1be>
 8004282:	6019      	str	r1, [r3, #0]
 8004284:	e002      	b.n	800428c <_printf_i+0x1c4>
 8004286:	0668      	lsls	r0, r5, #25
 8004288:	d5fb      	bpl.n	8004282 <_printf_i+0x1ba>
 800428a:	8019      	strh	r1, [r3, #0]
 800428c:	2300      	movs	r3, #0
 800428e:	4616      	mov	r6, r2
 8004290:	6123      	str	r3, [r4, #16]
 8004292:	e7bc      	b.n	800420e <_printf_i+0x146>
 8004294:	6833      	ldr	r3, [r6, #0]
 8004296:	2100      	movs	r1, #0
 8004298:	1d1a      	adds	r2, r3, #4
 800429a:	6032      	str	r2, [r6, #0]
 800429c:	681e      	ldr	r6, [r3, #0]
 800429e:	6862      	ldr	r2, [r4, #4]
 80042a0:	4630      	mov	r0, r6
 80042a2:	f000 f859 	bl	8004358 <memchr>
 80042a6:	b108      	cbz	r0, 80042ac <_printf_i+0x1e4>
 80042a8:	1b80      	subs	r0, r0, r6
 80042aa:	6060      	str	r0, [r4, #4]
 80042ac:	6863      	ldr	r3, [r4, #4]
 80042ae:	6123      	str	r3, [r4, #16]
 80042b0:	2300      	movs	r3, #0
 80042b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042b6:	e7aa      	b.n	800420e <_printf_i+0x146>
 80042b8:	4632      	mov	r2, r6
 80042ba:	4649      	mov	r1, r9
 80042bc:	4640      	mov	r0, r8
 80042be:	6923      	ldr	r3, [r4, #16]
 80042c0:	47d0      	blx	sl
 80042c2:	3001      	adds	r0, #1
 80042c4:	d0ad      	beq.n	8004222 <_printf_i+0x15a>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	079b      	lsls	r3, r3, #30
 80042ca:	d413      	bmi.n	80042f4 <_printf_i+0x22c>
 80042cc:	68e0      	ldr	r0, [r4, #12]
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	4298      	cmp	r0, r3
 80042d2:	bfb8      	it	lt
 80042d4:	4618      	movlt	r0, r3
 80042d6:	e7a6      	b.n	8004226 <_printf_i+0x15e>
 80042d8:	2301      	movs	r3, #1
 80042da:	4632      	mov	r2, r6
 80042dc:	4649      	mov	r1, r9
 80042de:	4640      	mov	r0, r8
 80042e0:	47d0      	blx	sl
 80042e2:	3001      	adds	r0, #1
 80042e4:	d09d      	beq.n	8004222 <_printf_i+0x15a>
 80042e6:	3501      	adds	r5, #1
 80042e8:	68e3      	ldr	r3, [r4, #12]
 80042ea:	9903      	ldr	r1, [sp, #12]
 80042ec:	1a5b      	subs	r3, r3, r1
 80042ee:	42ab      	cmp	r3, r5
 80042f0:	dcf2      	bgt.n	80042d8 <_printf_i+0x210>
 80042f2:	e7eb      	b.n	80042cc <_printf_i+0x204>
 80042f4:	2500      	movs	r5, #0
 80042f6:	f104 0619 	add.w	r6, r4, #25
 80042fa:	e7f5      	b.n	80042e8 <_printf_i+0x220>
 80042fc:	08004503 	.word	0x08004503
 8004300:	08004514 	.word	0x08004514

08004304 <memmove>:
 8004304:	4288      	cmp	r0, r1
 8004306:	b510      	push	{r4, lr}
 8004308:	eb01 0402 	add.w	r4, r1, r2
 800430c:	d902      	bls.n	8004314 <memmove+0x10>
 800430e:	4284      	cmp	r4, r0
 8004310:	4623      	mov	r3, r4
 8004312:	d807      	bhi.n	8004324 <memmove+0x20>
 8004314:	1e43      	subs	r3, r0, #1
 8004316:	42a1      	cmp	r1, r4
 8004318:	d008      	beq.n	800432c <memmove+0x28>
 800431a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800431e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004322:	e7f8      	b.n	8004316 <memmove+0x12>
 8004324:	4601      	mov	r1, r0
 8004326:	4402      	add	r2, r0
 8004328:	428a      	cmp	r2, r1
 800432a:	d100      	bne.n	800432e <memmove+0x2a>
 800432c:	bd10      	pop	{r4, pc}
 800432e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004336:	e7f7      	b.n	8004328 <memmove+0x24>

08004338 <_sbrk_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	2300      	movs	r3, #0
 800433c:	4d05      	ldr	r5, [pc, #20]	@ (8004354 <_sbrk_r+0x1c>)
 800433e:	4604      	mov	r4, r0
 8004340:	4608      	mov	r0, r1
 8004342:	602b      	str	r3, [r5, #0]
 8004344:	f7fc fe2c 	bl	8000fa0 <_sbrk>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_sbrk_r+0x1a>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	b103      	cbz	r3, 8004352 <_sbrk_r+0x1a>
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	20000290 	.word	0x20000290

08004358 <memchr>:
 8004358:	4603      	mov	r3, r0
 800435a:	b510      	push	{r4, lr}
 800435c:	b2c9      	uxtb	r1, r1
 800435e:	4402      	add	r2, r0
 8004360:	4293      	cmp	r3, r2
 8004362:	4618      	mov	r0, r3
 8004364:	d101      	bne.n	800436a <memchr+0x12>
 8004366:	2000      	movs	r0, #0
 8004368:	e003      	b.n	8004372 <memchr+0x1a>
 800436a:	7804      	ldrb	r4, [r0, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	428c      	cmp	r4, r1
 8004370:	d1f6      	bne.n	8004360 <memchr+0x8>
 8004372:	bd10      	pop	{r4, pc}

08004374 <memcpy>:
 8004374:	440a      	add	r2, r1
 8004376:	4291      	cmp	r1, r2
 8004378:	f100 33ff 	add.w	r3, r0, #4294967295
 800437c:	d100      	bne.n	8004380 <memcpy+0xc>
 800437e:	4770      	bx	lr
 8004380:	b510      	push	{r4, lr}
 8004382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004386:	4291      	cmp	r1, r2
 8004388:	f803 4f01 	strb.w	r4, [r3, #1]!
 800438c:	d1f9      	bne.n	8004382 <memcpy+0xe>
 800438e:	bd10      	pop	{r4, pc}

08004390 <_realloc_r>:
 8004390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004394:	4607      	mov	r7, r0
 8004396:	4614      	mov	r4, r2
 8004398:	460d      	mov	r5, r1
 800439a:	b921      	cbnz	r1, 80043a6 <_realloc_r+0x16>
 800439c:	4611      	mov	r1, r2
 800439e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043a2:	f7ff bc3b 	b.w	8003c1c <_malloc_r>
 80043a6:	b92a      	cbnz	r2, 80043b4 <_realloc_r+0x24>
 80043a8:	f7ff fbce 	bl	8003b48 <_free_r>
 80043ac:	4625      	mov	r5, r4
 80043ae:	4628      	mov	r0, r5
 80043b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b4:	f000 f81a 	bl	80043ec <_malloc_usable_size_r>
 80043b8:	4284      	cmp	r4, r0
 80043ba:	4606      	mov	r6, r0
 80043bc:	d802      	bhi.n	80043c4 <_realloc_r+0x34>
 80043be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043c2:	d8f4      	bhi.n	80043ae <_realloc_r+0x1e>
 80043c4:	4621      	mov	r1, r4
 80043c6:	4638      	mov	r0, r7
 80043c8:	f7ff fc28 	bl	8003c1c <_malloc_r>
 80043cc:	4680      	mov	r8, r0
 80043ce:	b908      	cbnz	r0, 80043d4 <_realloc_r+0x44>
 80043d0:	4645      	mov	r5, r8
 80043d2:	e7ec      	b.n	80043ae <_realloc_r+0x1e>
 80043d4:	42b4      	cmp	r4, r6
 80043d6:	4622      	mov	r2, r4
 80043d8:	4629      	mov	r1, r5
 80043da:	bf28      	it	cs
 80043dc:	4632      	movcs	r2, r6
 80043de:	f7ff ffc9 	bl	8004374 <memcpy>
 80043e2:	4629      	mov	r1, r5
 80043e4:	4638      	mov	r0, r7
 80043e6:	f7ff fbaf 	bl	8003b48 <_free_r>
 80043ea:	e7f1      	b.n	80043d0 <_realloc_r+0x40>

080043ec <_malloc_usable_size_r>:
 80043ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f0:	1f18      	subs	r0, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bfbc      	itt	lt
 80043f6:	580b      	ldrlt	r3, [r1, r0]
 80043f8:	18c0      	addlt	r0, r0, r3
 80043fa:	4770      	bx	lr

080043fc <_init>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr

08004408 <_fini>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	bf00      	nop
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr
