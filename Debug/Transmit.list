
Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080055dc  080055dc  000065dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005668  08005668  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005668  08005668  00007064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005668  08005668  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800566c  0800566c  0000666c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005670  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000064  080056d4  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080056d4  00007334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119e2  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003106  00000000  00000000  00018a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df5  00000000  00000000  0001cd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fe0  00000000  00000000  0001db7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158da  00000000  00000000  00037b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091eb2  00000000  00000000  0004d437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df2e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f10  00000000  00000000  000df32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000e423c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080055c4 	.word	0x080055c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080055c4 	.word	0x080055c4

0800014c <csn_high>:
uint8_t nrf24_get_status(void)
{
    return nrf24_r_reg(STATUS, 1);  // ★ 'STATUS' 사용 (NRF_STATUS 아님)
}

void csn_high(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000156:	4802      	ldr	r0, [pc, #8]	@ (8000160 <csn_high+0x14>)
 8000158:	f002 fc32 	bl	80029c0 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 시작 표시
	   // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40011000 	.word	0x40011000

08000164 <csn_low>:



void csn_low(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800016e:	4802      	ldr	r0, [pc, #8]	@ (8000178 <csn_low+0x14>)
 8000170:	f002 fc26 	bl	80029c0 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 종료 표시
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40011000 	.word	0x40011000

0800017c <ce_high>:

void ce_high(void){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000186:	4802      	ldr	r0, [pc, #8]	@ (8000190 <ce_high+0x14>)
 8000188:	f002 fc1a 	bl	80029c0 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <ce_low>:

void ce_low(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019e:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <ce_low+0x14>)
 80001a0:	f002 fc0e 	bl	80029c0 <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	6039      	str	r1, [r7, #0]
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001c6:	f7ff ffcd 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001ca:	f107 010f 	add.w	r1, r7, #15
 80001ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d2:	2201      	movs	r2, #1
 80001d4:	4808      	ldr	r0, [pc, #32]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001d6:	f003 fa0b 	bl	80035f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	b29a      	uxth	r2, r3
 80001de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e2:	6839      	ldr	r1, [r7, #0]
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001e6:	f003 fa03 	bl	80035f0 <HAL_SPI_Transmit>

	csn_high();
 80001ea:	f7ff ffaf 	bl	800014c <csn_high>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	200000fc 	.word	0x200000fc

080001fc <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	4613      	mov	r3, r2
 800020a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000214:	f7ff ffa6 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000218:	f107 010f 	add.w	r1, r7, #15
 800021c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000220:	2201      	movs	r2, #1
 8000222:	4809      	ldr	r0, [pc, #36]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000224:	f003 f9e4 	bl	80035f0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000228:	79bb      	ldrb	r3, [r7, #6]
 800022a:	b29a      	uxth	r2, r3
 800022c:	f107 010e 	add.w	r1, r7, #14
 8000230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000234:	4804      	ldr	r0, [pc, #16]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000236:	f003 fb1f 	bl	8003878 <HAL_SPI_Receive>

	csn_high();
 800023a:	f7ff ff87 	bl	800014c <csn_high>

	return data;
 800023e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200000fc 	.word	0x200000fc

0800024c <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000256:	1df9      	adds	r1, r7, #7
 8000258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800025c:	2201      	movs	r2, #1
 800025e:	4803      	ldr	r0, [pc, #12]	@ (800026c <nrf24_w_spec_cmd+0x20>)
 8000260:	f003 f9c6 	bl	80035f0 <HAL_SPI_Transmit>
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200000fc 	.word	0x200000fc

08000270 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800027a:	2101      	movs	r1, #1
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ffbd 	bl	80001fc <nrf24_r_reg>
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f043 0302 	orr.w	r3, r3, #2
 800028c:	b2db      	uxtb	r3, r3
 800028e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	2201      	movs	r2, #1
 8000294:	4619      	mov	r1, r3
 8000296:	2000      	movs	r0, #0
 8000298:	f7ff ff88 	bl	80001ac <nrf24_w_reg>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <nrf24_pwr_dwn>:

void nrf24_pwr_dwn(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80002ae:	2101      	movs	r1, #1
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ffa3 	bl	80001fc <nrf24_r_reg>
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PWR_UP);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f023 0302 	bic.w	r3, r3, #2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	2201      	movs	r2, #1
 80002c8:	4619      	mov	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f7ff ff6e 	bl	80001ac <nrf24_w_reg>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <nrf24_tx_pwr>:

void nrf24_tx_pwr(uint8_t pwr){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80002e6:	2101      	movs	r1, #1
 80002e8:	2006      	movs	r0, #6
 80002ea:	f7ff ff87 	bl	80001fc <nrf24_r_reg>
 80002ee:	4603      	mov	r3, r0
 80002f0:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	b25a      	sxtb	r2, r3
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	b25b      	sxtb	r3, r3
 8000308:	4313      	orrs	r3, r2
 800030a:	b25b      	sxtb	r3, r3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000310:	f107 030f 	add.w	r3, r7, #15
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	2006      	movs	r0, #6
 800031a:	f7ff ff47 	bl	80001ac <nrf24_w_reg>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	4603      	mov	r3, r0
 800032e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000334:	2101      	movs	r1, #1
 8000336:	2006      	movs	r0, #6
 8000338:	f7ff ff60 	bl	80001fc <nrf24_r_reg>
 800033c:	4603      	mov	r3, r0
 800033e:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000346:	b2db      	uxtb	r3, r3
 8000348:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d105      	bne.n	800035c <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	b2db      	uxtb	r3, r3
 8000358:	73fb      	strb	r3, [r7, #15]
 800035a:	e007      	b.n	800036c <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d104      	bne.n	800036c <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f043 0320 	orr.w	r3, r3, #32
 8000368:	b2db      	uxtb	r3, r3
 800036a:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 800036c:	f107 030f 	add.w	r3, r7, #15
 8000370:	2201      	movs	r2, #1
 8000372:	4619      	mov	r1, r3
 8000374:	2006      	movs	r0, #6
 8000376:	f7ff ff19 	bl	80001ac <nrf24_w_reg>
}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000382:	b580      	push	{r7, lr}
 8000384:	b082      	sub	sp, #8
 8000386:	af00      	add	r7, sp, #0
 8000388:	4603      	mov	r3, r0
 800038a:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	2005      	movs	r0, #5
 8000394:	f7ff ff0a 	bl	80001ac <nrf24_w_reg>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 80003a8:	2205      	movs	r2, #5
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	2010      	movs	r0, #16
 80003ae:	f7ff fefd 	bl	80001ac <nrf24_w_reg>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	460a      	mov	r2, r1
 80003c6:	71fb      	strb	r3, [r7, #7]
 80003c8:	4613      	mov	r3, r2
 80003ca:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	2b20      	cmp	r3, #32
 80003d0:	d901      	bls.n	80003d6 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 80003d2:	2320      	movs	r3, #32
 80003d4:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b05      	cmp	r3, #5
 80003da:	d839      	bhi.n	8000450 <nrf24_pipe_pld_size+0x94>
 80003dc:	a201      	add	r2, pc, #4	@ (adr r2, 80003e4 <nrf24_pipe_pld_size+0x28>)
 80003de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e2:	bf00      	nop
 80003e4:	080003fd 	.word	0x080003fd
 80003e8:	0800040b 	.word	0x0800040b
 80003ec:	08000419 	.word	0x08000419
 80003f0:	08000427 	.word	0x08000427
 80003f4:	08000435 	.word	0x08000435
 80003f8:	08000443 	.word	0x08000443
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 80003fc:	1dbb      	adds	r3, r7, #6
 80003fe:	2201      	movs	r2, #1
 8000400:	4619      	mov	r1, r3
 8000402:	2011      	movs	r0, #17
 8000404:	f7ff fed2 	bl	80001ac <nrf24_w_reg>

		break;
 8000408:	e022      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800040a:	1dbb      	adds	r3, r7, #6
 800040c:	2201      	movs	r2, #1
 800040e:	4619      	mov	r1, r3
 8000410:	2012      	movs	r0, #18
 8000412:	f7ff fecb 	bl	80001ac <nrf24_w_reg>

		break;
 8000416:	e01b      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 8000418:	1dbb      	adds	r3, r7, #6
 800041a:	2201      	movs	r2, #1
 800041c:	4619      	mov	r1, r3
 800041e:	2013      	movs	r0, #19
 8000420:	f7ff fec4 	bl	80001ac <nrf24_w_reg>

		break;
 8000424:	e014      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	2014      	movs	r0, #20
 800042e:	f7ff febd 	bl	80001ac <nrf24_w_reg>

		break;
 8000432:	e00d      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000434:	1dbb      	adds	r3, r7, #6
 8000436:	2201      	movs	r2, #1
 8000438:	4619      	mov	r1, r3
 800043a:	2015      	movs	r0, #21
 800043c:	f7ff feb6 	bl	80001ac <nrf24_w_reg>

		break;
 8000440:	e006      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	2201      	movs	r2, #1
 8000446:	4619      	mov	r1, r3
 8000448:	2016      	movs	r0, #22
 800044a:	f7ff feaf 	bl	80001ac <nrf24_w_reg>

		break;
 800044e:	bf00      	nop
	}
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <nrf24_cls_rx_pipe>:
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_cls_rx_pipe(uint8_t pipe){
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(EN_RXADDR, 1);
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fec9 	bl	80001fc <nrf24_r_reg>
 800046a:	4603      	mov	r3, r0
 800046c:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << pipe);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2201      	movs	r2, #1
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	b25b      	sxtb	r3, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	b25a      	sxtb	r2, r3
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	b25b      	sxtb	r3, r3
 8000480:	4013      	ands	r3, r2
 8000482:	b25b      	sxtb	r3, r3
 8000484:	b2db      	uxtb	r3, r3
 8000486:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000488:	f107 030f 	add.w	r3, r7, #15
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	2002      	movs	r0, #2
 8000492:	f7ff fe8b 	bl	80001ac <nrf24_w_reg>
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <nrf24_set_crc>:

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 800049e:	b580      	push	{r7, lr}
 80004a0:	b084      	sub	sp, #16
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	460a      	mov	r2, r1
 80004a8:	71fb      	strb	r3, [r7, #7]
 80004aa:	4613      	mov	r3, r2
 80004ac:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80004ae:	2101      	movs	r1, #1
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fea3 	bl	80001fc <nrf24_r_reg>
 80004b6:	4603      	mov	r3, r0
 80004b8:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	f023 030c 	bic.w	r3, r3, #12
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	4313      	orrs	r3, r2
 80004de:	b25b      	sxtb	r3, r3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80004e4:	f107 030f 	add.w	r3, r7, #15
 80004e8:	2201      	movs	r2, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fe5d 	bl	80001ac <nrf24_w_reg>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4603      	mov	r3, r0
 8000502:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	3b02      	subs	r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	2003      	movs	r0, #3
 8000514:	f7ff fe4a 	bl	80001ac <nrf24_w_reg>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	csn_low();
 8000524:	f7ff fe1e 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000528:	20e1      	movs	r0, #225	@ 0xe1
 800052a:	f7ff fe8f 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 800052e:	f7ff fe0d 	bl	800014c <csn_high>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}

08000536 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
	csn_low();
 800053a:	f7ff fe13 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 800053e:	20e2      	movs	r0, #226	@ 0xe2
 8000540:	f7ff fe84 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 8000544:	f7ff fe02 	bl	800014c <csn_high>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8000556:	23ff      	movs	r3, #255	@ 0xff
 8000558:	71bb      	strb	r3, [r7, #6]

	csn_low();
 800055a:	f7ff fe03 	bl	8000164 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 800055e:	1dfa      	adds	r2, r7, #7
 8000560:	1db9      	adds	r1, r7, #6
 8000562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2301      	movs	r3, #1
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <nrf24_r_status+0x34>)
 800056c:	f003 fa9d 	bl	8003aaa <HAL_SPI_TransmitReceive>
	csn_high();
 8000570:	f7ff fdec 	bl	800014c <csn_high>

	return data;
 8000574:	79fb      	ldrb	r3, [r7, #7]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000fc 	.word	0x200000fc

08000584 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800058e:	f7ff ffdd 	bl	800054c <nrf24_r_status>
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800059c:	b2db      	uxtb	r3, r3
 800059e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	2007      	movs	r0, #7
 80005a8:	f7ff fe00 	bl	80001ac <nrf24_w_reg>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005be:	f7ff ffc5 	bl	800054c <nrf24_r_status>
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	2007      	movs	r0, #7
 80005d8:	f7ff fde8 	bl	80001ac <nrf24_w_reg>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005ee:	f7ff ffad 	bl	800054c <nrf24_r_status>
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f043 0310 	orr.w	r3, r3, #16
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	2007      	movs	r0, #7
 8000608:	f7ff fdd0 	bl	80001ac <nrf24_w_reg>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800061e:	2101      	movs	r1, #1
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fdeb 	bl	80001fc <nrf24_r_reg>
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fdb6 	bl	80001ac <nrf24_w_reg>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000652:	2101      	movs	r1, #1
 8000654:	201d      	movs	r0, #29
 8000656:	f7ff fdd1 	bl	80001fc <nrf24_r_reg>
 800065a:	4603      	mov	r3, r0
 800065c:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d105      	bne.n	8000670 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e004      	b.n	800067a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	f023 0304 	bic.w	r3, r3, #4
 8000676:	b2db      	uxtb	r3, r3
 8000678:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800067a:	f107 030f 	add.w	r3, r7, #15
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	201d      	movs	r0, #29
 8000684:	f7ff fd92 	bl	80001ac <nrf24_w_reg>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 80006a0:	2101      	movs	r1, #1
 80006a2:	201c      	movs	r0, #28
 80006a4:	f7ff fdaa 	bl	80001fc <nrf24_r_reg>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d901      	bls.n	80006b6 <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 80006b2:	2305      	movs	r3, #5
 80006b4:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00b      	beq.n	80006d4 <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2201      	movs	r2, #1
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	e00c      	b.n	80006ee <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2201      	movs	r2, #1
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	4013      	ands	r3, r2
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 80006ee:	f107 030f 	add.w	r3, r7, #15
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	201c      	movs	r0, #28
 80006f8:	f7ff fd58 	bl	80001ac <nrf24_w_reg>
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <nrf24_auto_ack>:

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d901      	bls.n	800071e <nrf24_auto_ack+0x1a>
		pipe = 5;
 800071a:	2305      	movs	r3, #5
 800071c:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800071e:	2101      	movs	r1, #1
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff fd6b 	bl	80001fc <nrf24_r_reg>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00b      	beq.n	8000748 <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2201      	movs	r2, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	b25a      	sxtb	r2, r3
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	b25b      	sxtb	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b25b      	sxtb	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e00c      	b.n	8000762 <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2201      	movs	r2, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	b25b      	sxtb	r3, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	b25a      	sxtb	r2, r3
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	b25b      	sxtb	r3, r3
 800075a:	4013      	ands	r3, r2
 800075c:	b25b      	sxtb	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000762:	f107 030f 	add.w	r3, r7, #15
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fd1e 	bl	80001ac <nrf24_w_reg>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <nrf24_auto_ack_all>:

void nrf24_auto_ack_all(uint8_t ack){
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000782:	2101      	movs	r1, #1
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff fd39 	bl	80001fc <nrf24_r_reg>
 800078a:	4603      	mov	r3, r0
 800078c:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <nrf24_auto_ack_all+0x22>
		enaa = 63;
 8000794:	233f      	movs	r3, #63	@ 0x3f
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e001      	b.n	800079e <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 800079e:	f107 030f 	add.w	r3, r7, #15
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fd00 	bl	80001ac <nrf24_w_reg>
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80007be:	2101      	movs	r1, #1
 80007c0:	201d      	movs	r0, #29
 80007c2:	f7ff fd1b 	bl	80001fc <nrf24_r_reg>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73fb      	strb	r3, [r7, #15]

	if(en){
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e004      	b.n	80007e6 <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f023 0302 	bic.w	r3, r3, #2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80007e6:	f107 030f 	add.w	r3, r7, #15
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	201d      	movs	r0, #29
 80007f0:	f7ff fcdc 	bl	80001ac <nrf24_w_reg>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000806:	2101      	movs	r1, #1
 8000808:	201d      	movs	r0, #29
 800080a:	f7ff fcf7 	bl	80001fc <nrf24_r_reg>
 800080e:	4603      	mov	r3, r0
 8000810:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e004      	b.n	800082e <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f023 0301 	bic.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800082e:	f107 030f 	add.w	r3, r7, #15
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	201d      	movs	r0, #29
 8000838:	f7ff fcb8 	bl	80001ac <nrf24_w_reg>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <nrf24_auto_retr_delay>:

void nrf24_auto_retr_delay(uint8_t delay){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 800084e:	2101      	movs	r1, #1
 8000850:	2004      	movs	r0, #4
 8000852:	f7ff fcd3 	bl	80001fc <nrf24_r_reg>
 8000856:	4603      	mov	r3, r0
 8000858:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	f003 030f 	and.w	r3, r3, #15
 8000860:	b2db      	uxtb	r3, r3
 8000862:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	b25a      	sxtb	r2, r3
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	b25b      	sxtb	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8000878:	f107 030f 	add.w	r3, r7, #15
 800087c:	2201      	movs	r2, #1
 800087e:	4619      	mov	r1, r3
 8000880:	2004      	movs	r0, #4
 8000882:	f7ff fc93 	bl	80001ac <nrf24_w_reg>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000898:	2101      	movs	r1, #1
 800089a:	2004      	movs	r0, #4
 800089c:	f7ff fcae 	bl	80001fc <nrf24_r_reg>
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	f023 030f 	bic.w	r3, r3, #15
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80008b8:	f107 030f 	add.w	r3, r7, #15
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	2004      	movs	r0, #4
 80008c2:	f7ff fc73 	bl	80001ac <nrf24_w_reg>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]

	ce_low();
 80008dc:	f7ff fc5a 	bl	8000194 <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 80008e0:	23a0      	movs	r3, #160	@ 0xa0
 80008e2:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80008e4:	f7ff fc3e 	bl	8000164 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80008e8:	f107 010f 	add.w	r1, r7, #15
 80008ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f0:	2201      	movs	r2, #1
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <nrf24_transmit+0x70>)
 80008f4:	f002 fe7c 	bl	80035f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	480f      	ldr	r0, [pc, #60]	@ (8000940 <nrf24_transmit+0x70>)
 8000904:	f002 fe74 	bl	80035f0 <HAL_SPI_Transmit>
	csn_high();
 8000908:	f7ff fc20 	bl	800014c <csn_high>

	ce_high();
 800090c:	f7ff fc36 	bl	800017c <ce_high>
	HAL_Delay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f000 fdef 	bl	80014f4 <HAL_Delay>
	ce_low();
 8000916:	f7ff fc3d 	bl	8000194 <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 800091a:	f7ff fe17 	bl	800054c <nrf24_r_status>
 800091e:	4603      	mov	r3, r0
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 8000928:	f7ff fe5c 	bl	80005e4 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 800092c:	f7ff fdf8 	bl	8000520 <nrf24_flush_tx>
		return 1;
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <nrf24_transmit+0x66>
	}

	return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000fc 	.word	0x200000fc

08000944 <nrf24_defaults>:
	csn_high();

	nrf24_clear_rx_dr();
}

void nrf24_defaults(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	ce_low();
 800094a:	f7ff fc23 	bl	8000194 <ce_low>

	nrf24_pwr_dwn();
 800094e:	f7ff fca9 	bl	80002a4 <nrf24_pwr_dwn>
	nrf24_tx_pwr(3);
 8000952:	2003      	movs	r0, #3
 8000954:	f7ff fcc0 	bl	80002d8 <nrf24_tx_pwr>
	nrf24_data_rate(_1mbps);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fce4 	bl	8000326 <nrf24_data_rate>
	nrf24_set_channel(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff fd0f 	bl	8000382 <nrf24_set_channel>
	nrf24_set_crc(no_crc, _1byte);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fd99 	bl	800049e <nrf24_set_crc>
	nrf24_set_addr_width(5);
 800096c:	2005      	movs	r0, #5
 800096e:	f7ff fdc4 	bl	80004fa <nrf24_set_addr_width>
	nrf24_flush_tx();
 8000972:	f7ff fdd5 	bl	8000520 <nrf24_flush_tx>
	nrf24_flush_rx();
 8000976:	f7ff fdde 	bl	8000536 <nrf24_flush_rx>
	nrf24_clear_rx_dr();
 800097a:	f7ff fe03 	bl	8000584 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 800097e:	f7ff fe19 	bl	80005b4 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000982:	f7ff fe2f 	bl	80005e4 <nrf24_clear_max_rt>
	nrf24_stop_listen();
 8000986:	f7ff fe45 	bl	8000614 <nrf24_stop_listen>
	nrf24_dpl(disable);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe5c 	bl	8000648 <nrf24_dpl>
	nrf24_en_ack_pld(disable);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ff0f 	bl	80007b4 <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff30 	bl	80007fc <nrf24_en_dyn_ack>
	nrf24_auto_retr_delay(0);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ff51 	bl	8000844 <nrf24_auto_retr_delay>
	nrf24_auto_retr_limit(3);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f7ff ff73 	bl	800088e <nrf24_auto_retr_limit>


	for(uint8_t i = 0; i < 5; i++){
 80009a8:	2300      	movs	r3, #0
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	e015      	b.n	80009da <nrf24_defaults+0x96>
		nrf24_pipe_pld_size(i, 0);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd02 	bl	80003bc <nrf24_pipe_pld_size>
		nrf24_cls_rx_pipe(i);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fd4c 	bl	8000458 <nrf24_cls_rx_pipe>
		nrf24_set_rx_dpl(i, disable);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe63 	bl	8000690 <nrf24_set_rx_dpl>
		nrf24_auto_ack(i, enable);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe98 	bl	8000704 <nrf24_auto_ack>
	for(uint8_t i = 0; i < 5; i++){
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	3301      	adds	r3, #1
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d9e6      	bls.n	80009ae <nrf24_defaults+0x6a>
	}

	ce_high();
 80009e0:	f7ff fbcc 	bl	800017c <ce_high>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <nrf24_init>:

void nrf24_init(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80009f0:	f7ff fc3e 	bl	8000270 <nrf24_pwr_up>

	nrf24_flush_tx();
 80009f4:	f7ff fd94 	bl	8000520 <nrf24_flush_tx>
	nrf24_flush_rx();
 80009f8:	f7ff fd9d 	bl	8000536 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80009fc:	f7ff fdc2 	bl	8000584 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8000a00:	f7ff fdd8 	bl	80005b4 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000a04:	f7ff fdee 	bl	80005e4 <nrf24_clear_max_rt>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a1e:	4a28      	ldr	r2, [pc, #160]	@ (8000ac0 <MX_ADC1_Init+0xb4>)
 8000a20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a38:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4a:	481c      	ldr	r0, [pc, #112]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a4c:	f000 fd76 	bl	800153c <HAL_ADC_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000a56:	f000 faa3 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a62:	2307      	movs	r3, #7
 8000a64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4814      	ldr	r0, [pc, #80]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a6c:	f001 f83a 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 fa93 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a88:	f001 f82c 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a92:	f000 fa85 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a96:	230c      	movs	r3, #12
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000aa4:	f001 f81e 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000aae:	f000 fa77 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000080 	.word	0x20000080
 8000ac0:	40012400 	.word	0x40012400

08000ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d151      	bne.n	8000b88 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a24      	ldr	r2, [pc, #144]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = X_axis_Pin|Y_axis_Pin|Z_axis_Pin;
 8000b14:	2307      	movs	r3, #7
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	481d      	ldr	r0, [pc, #116]	@ (8000b98 <HAL_ADC_MspInit+0xd4>)
 8000b24:	f001 fdc8 	bl	80026b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b52:	2220      	movs	r2, #32
 8000b54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b5c:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b5e:	f001 fb81 	bl	8002264 <HAL_DMA_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000b68:	f000 fa1a 	bl	8000fa0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b70:	621a      	str	r2, [r3, #32]
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f001 fb3a 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b82:	2012      	movs	r0, #18
 8000b84:	f001 fb53 	bl	800222e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40012400 	.word	0x40012400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	200000b0 	.word	0x200000b0
 8000ba0:	40020008 	.word	0x40020008

08000ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200b      	movs	r0, #11
 8000bc8:	f001 fb15 	bl	80021f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bcc:	200b      	movs	r0, #11
 8000bce:	f001 fb2e 	bl	800222e <HAL_NVIC_EnableIRQ>

}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	4b28      	ldr	r3, [pc, #160]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a27      	ldr	r2, [pc, #156]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a21      	ldr	r2, [pc, #132]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c12:	f043 0320 	orr.w	r3, r3, #32
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a1b      	ldr	r2, [pc, #108]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <MX_GPIO_Init+0xb8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_Pin_GPIO_Port, CSN_Pin_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c42:	4816      	ldr	r0, [pc, #88]	@ (8000c9c <MX_GPIO_Init+0xbc>)
 8000c44:	f001 febc 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_Pin_GPIO_Port, CE_Pin_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c4e:	4814      	ldr	r0, [pc, #80]	@ (8000ca0 <MX_GPIO_Init+0xc0>)
 8000c50:	f001 feb6 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CSN_Pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin;
 8000c54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480b      	ldr	r0, [pc, #44]	@ (8000c9c <MX_GPIO_Init+0xbc>)
 8000c6e:	f001 fd23 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin_Pin */
  GPIO_InitStruct.Pin = CE_Pin_Pin;
 8000c72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_GPIO_Init+0xc0>)
 8000c8c:	f001 fd14 	bl	80026b8 <HAL_GPIO_Init>

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <nrf24_set_payload_size>:
 * Receive data
 */
void nrf24_receive(uint8_t *data, uint8_t size);

static inline void nrf24_set_payload_size(uint8_t size)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
    nrf24_pipe_pld_size(0, size);   // 파이프 0만 사용
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff fb82 	bl	80003bc <nrf24_pipe_pld_size>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc4:	f000 fbb4 	bl	8001430 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc8:	f000 f826 	bl	8000d18 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ccc:	f7ff ff88 	bl	8000be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd0:	f7ff ff68 	bl	8000ba4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cd4:	f000 f96a 	bl	8000fac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000cd8:	f000 fb10 	bl	80012fc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000cdc:	f7ff fe96 	bl	8000a0c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ce0:	f000 fa9c 	bl	800121c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


HAL_ADCEx_Calibration_Start(&hadc1);
 8000ce4:	4809      	ldr	r0, [pc, #36]	@ (8000d0c <main+0x4c>)
 8000ce6:	f001 f8f7 	bl	8001ed8 <HAL_ADCEx_Calibration_Start>
//타이머 인터럽트 시작 20ms마다
HAL_TIM_Base_Start_IT(&htim2);
 8000cea:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <main+0x50>)
 8000cec:	f003 f9e0 	bl	80040b0 <HAL_TIM_Base_Start_IT>


nrf24_init();
 8000cf0:	f7ff fe7c 	bl	80009ec <nrf24_init>
nrf24_transmitter_setup();
 8000cf4:	f000 f86c 	bl	8000dd0 <nrf24_transmitter_setup>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 if(adc_conversion_complete){	//DMA가 메모리 저장을 완료하여 콜백함수에 의해 adc_conversion_complete = 1이 되어 조건이 참이된다면
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <main+0x54>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <main+0x46>
			  transmit_sensor_data();
 8000d02:	f000 f8a3 	bl	8000e4c <transmit_sensor_data>
		  }
	  __WFI();
 8000d06:	bf30      	wfi
	 if(adc_conversion_complete){	//DMA가 메모리 저장을 완료하여 콜백함수에 의해 adc_conversion_complete = 1이 되어 조건이 참이된다면
 8000d08:	e7f6      	b.n	8000cf8 <main+0x38>
 8000d0a:	bf00      	nop
 8000d0c:	20000080 	.word	0x20000080
 8000d10:	20000158 	.word	0x20000158
 8000d14:	200000fa 	.word	0x200000fa

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	@ 0x50
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d22:	2228      	movs	r2, #40	@ 0x28
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f003 ffbe 	bl	8004ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d4c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d64:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fe3e 	bl	80029f0 <HAL_RCC_OscConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d7a:	f000 f911 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7e:	230f      	movs	r3, #15
 8000d80:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 f8aa 	bl	8002ef4 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000da6:	f000 f8fb 	bl	8000fa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000daa:	2302      	movs	r3, #2
 8000dac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000db2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fa2a 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dc2:	f000 f8ed 	bl	8000fa0 <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3750      	adds	r7, #80	@ 0x50
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <nrf24_transmitter_setup>:

/* USER CODE BEGIN 4 */

void nrf24_transmitter_setup(void)

{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
nrf24_defaults();
 8000dd6:	f7ff fdb5 	bl	8000944 <nrf24_defaults>
nrf24_pwr_up();
 8000dda:	f7ff fa49 	bl	8000270 <nrf24_pwr_up>
nrf24_flush_tx();
 8000dde:	f7ff fb9f 	bl	8000520 <nrf24_flush_tx>
nrf24_flush_rx();
 8000de2:	f7ff fba8 	bl	8000536 <nrf24_flush_rx>
nrf24_clear_rx_dr();
 8000de6:	f7ff fbcd 	bl	8000584 <nrf24_clear_rx_dr>
nrf24_clear_tx_ds();
 8000dea:	f7ff fbe3 	bl	80005b4 <nrf24_clear_tx_ds>
nrf24_clear_max_rt();
 8000dee:	f7ff fbf9 	bl	80005e4 <nrf24_clear_max_rt>
nrf24_stop_listen();                        //수신모드 비활성화 하여 송신 전용 모드로 전환
 8000df2:	f7ff fc0f 	bl	8000614 <nrf24_stop_listen>
nrf24_set_channel(40);                      //무선 채널 40번으로 설정
 8000df6:	2028      	movs	r0, #40	@ 0x28
 8000df8:	f7ff fac3 	bl	8000382 <nrf24_set_channel>
nrf24_auto_ack_all(disable);                //자동 ack기능 off=>단순 송신만 수행
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fcbb 	bl	8000778 <nrf24_auto_ack_all>
nrf24_set_payload_size(6);                  //한번에 전송할 페이로드 크기 최대 32바이트
 8000e02:	2006      	movs	r0, #6
 8000e04:	f7ff ff4e 	bl	8000ca4 <nrf24_set_payload_size>
nrf24_tx_pwr(3);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f7ff fa65 	bl	80002d8 <nrf24_tx_pwr>
nrf24_data_rate(_1mbps);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff fa89 	bl	8000326 <nrf24_data_rate>
nrf24_open_tx_pipe(tx_address);             //파이프 0에 tx_address를 열어 송신 대상 지정
 8000e14:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <nrf24_transmitter_setup+0x78>)
 8000e16:	f7ff fac3 	bl	80003a0 <nrf24_open_tx_pipe>
nrf24_pwr_up();                             //모듈 power up=>송신 준비 완료
 8000e1a:	f7ff fa29 	bl	8000270 <nrf24_pwr_up>

    uint8_t cfg = nrf24_r_reg(CONFIG, 1);
 8000e1e:	2101      	movs	r1, #1
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff f9eb 	bl	80001fc <nrf24_r_reg>
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
    cfg &= ~((1<<5)|(1<<4));                // MASK_TX_DS=5, MASK_MAX_RT=4 -> 0
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	71fb      	strb	r3, [r7, #7]
    nrf24_w_reg(CONFIG, &cfg, 1);
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	2201      	movs	r2, #1
 8000e38:	4619      	mov	r1, r3
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff f9b6 	bl	80001ac <nrf24_w_reg>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000000 	.word	0x20000000

08000e4c <transmit_sensor_data>:
return ch;
}



void transmit_sensor_data(void){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b09a      	sub	sp, #104	@ 0x68
 8000e50:	af02      	add	r7, sp, #8
	adc_conversion_complete = 0;
 8000e52:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <transmit_sensor_data+0xc4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop

	uint16_t local_adc_buffer[3];

	//adc_buffer값을 local_adc_buffer에 복사
	__disable_irq(); //복사중 모든 인터럽트 중지
	memcpy(local_adc_buffer, (void*)adc_buffer, sizeof(adc_buffer));
 8000e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f14 <transmit_sensor_data+0xc8>)
 8000e5e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e66:	6018      	str	r0, [r3, #0]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	8019      	strh	r1, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e6c:	b662      	cpsie	i
}
 8000e6e:	bf00      	nop
/*memcpy함수는 메모리 특정 영역을 다른 영역으로 복사한다
 *함수 기본형태-void *memcpy(붙여넣을 메모리 시작주소, 복사할 내용이 있는 메모리 시작주소, sizeof(원본);
 *함수
 */

	uint16_t x = local_adc_buffer[0];
 8000e70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000e74:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	uint16_t y = local_adc_buffer[1];
 8000e78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000e7c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
	uint16_t z = local_adc_buffer[2];
 8000e80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000e84:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	//6바이트 2진 패킹
	uint8_t payload[6];
	payload[0] = (uint8_t)(x & 0xff);	//x하위8비트
 8000e88:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	payload[1] = (uint8_t)(x >> 8);		//x상위8비트 시프트
 8000e92:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000e96:	0a1b      	lsrs	r3, r3, #8
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	payload[2] = (uint8_t)(y & 0xff);	//y하위8비트
 8000ea0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	payload[3] = (uint8_t)(y >> 8);		//y상위8비트
 8000eaa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	payload[4] = (uint8_t)(z & 0xff);	//z하위8비트
 8000eb8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	payload[5] = (uint8_t)(z >> 8);		//z상위8비트
 8000ec2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

	//최종 데이터 발송
	nrf24_transmit(payload, 6);
 8000ed0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ed4:	2106      	movs	r1, #6
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fcfa 	bl	80008d0 <nrf24_transmit>

	//uart디버깅
	char dbg[64];
	int dlen = snprintf(dbg, sizeof(dbg), "X: %u | Y: %u | Z: %u\r\n", x, y, z);
 8000edc:	f8b7 105e 	ldrh.w	r1, [r7, #94]	@ 0x5e
 8000ee0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000ee4:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000ee8:	1d38      	adds	r0, r7, #4
 8000eea:	9201      	str	r2, [sp, #4]
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4a09      	ldr	r2, [pc, #36]	@ (8000f18 <transmit_sensor_data+0xcc>)
 8000ef2:	2140      	movs	r1, #64	@ 0x40
 8000ef4:	f003 fea2 	bl	8004c3c <sniprintf>
 8000ef8:	6578      	str	r0, [r7, #84]	@ 0x54
	HAL_UART_Transmit(&huart2, (uint8_t*)dbg, dlen, 100);
 8000efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	1d39      	adds	r1, r7, #4
 8000f00:	2364      	movs	r3, #100	@ 0x64
 8000f02:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <transmit_sensor_data+0xd0>)
 8000f04:	f003 fcc6 	bl	8004894 <HAL_UART_Transmit>

}
 8000f08:	bf00      	nop
 8000f0a:	3760      	adds	r7, #96	@ 0x60
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200000fa 	.word	0x200000fa
 8000f14:	200000f4 	.word	0x200000f4
 8000f18:	080055dc 	.word	0x080055dc
 8000f1c:	200001a0 	.word	0x200001a0

08000f20 <HAL_TIM_PeriodElapsedCallback>:

//타이머가 만료될 때마다 호출되는 콜백함수 20ms주기
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
    // 이벤트가 발생한 타이머가 TIM2인지 확인
    if (htim->Instance == TIM2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f30:	d104      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
    	//3개의 ADC값을 변환해서 그 결과를 adc_buffer에 DMA로 저장 시작
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 3);
 8000f32:	2203      	movs	r2, #3
 8000f34:	4903      	ldr	r1, [pc, #12]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f36:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f38:	f000 fbd8 	bl	80016ec <HAL_ADC_Start_DMA>
    }
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200000f4 	.word	0x200000f4
 8000f48:	20000080 	.word	0x20000080

08000f4c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    // 이벤트가 발생한 ADC가 ADC1인지 확인
    if (hadc->Instance == ADC1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d102      	bne.n	8000f64 <HAL_ADC_ConvCpltCallback+0x18>
    {
        // Main루프의 if문 조건이 참이 되어 transmit_sensor_data함수호출
        adc_conversion_complete = 1;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_ADC_ConvCpltCallback+0x28>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
    }
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40012400 	.word	0x40012400
 8000f74:	200000fa 	.word	0x200000fa

08000f78 <HAL_ADC_ErrorCallback>:


//ADC변환 중 오류가 발생했을 때 자동으로 호출, DMA전송을 중지
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <HAL_ADC_ErrorCallback+0x20>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d102      	bne.n	8000f90 <HAL_ADC_ErrorCallback+0x18>
    {
        // ADC 오류 발생 시, 진행 중이던 DMA를 안전하게 중지
        // 다음 타이머 주기(20ms 후)에 HAL_ADC_Start_DMA가 다시 호출되며 자동으로 복구를 시도함
        HAL_ADC_Stop_DMA(&hadc1);
 8000f8a:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <HAL_ADC_ErrorCallback+0x24>)
 8000f8c:	f000 fc8c 	bl	80018a8 <HAL_ADC_Stop_DMA>
    }
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	20000080 	.word	0x20000080

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop

__disable_irq();



while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <Error_Handler+0x8>

08000fac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fb2:	4a18      	ldr	r2, [pc, #96]	@ (8001014 <MX_SPI1_Init+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fe0:	2218      	movs	r2, #24
 8000fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ff8:	220a      	movs	r2, #10
 8000ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ffe:	f002 fa73 	bl	80034e8 <HAL_SPI_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001008:	f7ff ffca 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200000fc 	.word	0x200000fc
 8001014:	40013000 	.word	0x40013000

08001018 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <HAL_SPI_MspInit+0x88>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d12f      	bne.n	8001098 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <HAL_SPI_MspInit+0x8c>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a19      	ldr	r2, [pc, #100]	@ (80010a4 <HAL_SPI_MspInit+0x8c>)
 800103e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <HAL_SPI_MspInit+0x8c>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_SPI_MspInit+0x8c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <HAL_SPI_MspInit+0x8c>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_SPI_MspInit+0x8c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001068:	23a0      	movs	r3, #160	@ 0xa0
 800106a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <HAL_SPI_MspInit+0x90>)
 800107c:	f001 fb1c 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001080:	2340      	movs	r3, #64	@ 0x40
 8001082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <HAL_SPI_MspInit+0x90>)
 8001094:	f001 fb10 	bl	80026b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40013000 	.word	0x40013000
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010800 	.word	0x40010800

080010ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <HAL_MspInit+0x5c>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	4a14      	ldr	r2, [pc, #80]	@ (8001108 <HAL_MspInit+0x5c>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6193      	str	r3, [r2, #24]
 80010be:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_MspInit+0x5c>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <HAL_MspInit+0x5c>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <HAL_MspInit+0x5c>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	61d3      	str	r3, [r2, #28]
 80010d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <HAL_MspInit+0x5c>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_MspInit+0x60>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <HAL_MspInit+0x60>)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000
 800110c:	40010000 	.word	0x40010000

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <NMI_Handler+0x4>

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <MemManage_Handler+0x4>

08001128 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <UsageFault_Handler+0x4>

08001138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 f9ac 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <DMA1_Channel1_IRQHandler+0x10>)
 800116e:	f001 f96f 	bl	8002450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200000b0 	.word	0x200000b0

0800117c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <ADC1_2_IRQHandler+0x10>)
 8001182:	f000 fbdd 	bl	8001940 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000080 	.word	0x20000080

08001190 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <TIM2_IRQHandler+0x10>)
 8001196:	f002 ffdd 	bl	8004154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000158 	.word	0x20000158

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	@ (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	@ (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f003 fd70 	bl	8004cb8 <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	@ (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <_sbrk+0x64>)
 80011f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20005000 	.word	0x20005000
 8001204:	00000400 	.word	0x00000400
 8001208:	20000154 	.word	0x20000154
 800120c:	20000338 	.word	0x20000338

08001210 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001238:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <MX_TIM2_Init+0x94>)
 800123a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800123e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001240:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <MX_TIM2_Init+0x94>)
 8001242:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001246:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <MX_TIM2_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <MX_TIM2_Init+0x94>)
 8001250:	22c7      	movs	r2, #199	@ 0xc7
 8001252:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <MX_TIM2_Init+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <MX_TIM2_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001260:	4813      	ldr	r0, [pc, #76]	@ (80012b0 <MX_TIM2_Init+0x94>)
 8001262:	f002 fed6 	bl	8004012 <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800126c:	f7ff fe98 	bl	8000fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <MX_TIM2_Init+0x94>)
 800127e:	f003 f859 	bl	8004334 <HAL_TIM_ConfigClockSource>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001288:	f7ff fe8a 	bl	8000fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001294:	463b      	mov	r3, r7
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_TIM2_Init+0x94>)
 800129a:	f003 fa3b 	bl	8004714 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012a4:	f7ff fe7c 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000158 	.word	0x20000158

080012b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012c4:	d113      	bne.n	80012ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <HAL_TIM_Base_MspInit+0x44>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <HAL_TIM_Base_MspInit+0x44>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_TIM_Base_MspInit+0x44>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	201c      	movs	r0, #28
 80012e4:	f000 ff87 	bl	80021f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012e8:	201c      	movs	r0, #28
 80012ea:	f000 ffa0 	bl	800222e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000

080012fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <MX_USART2_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001334:	f003 fa5e 	bl	80047f4 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f7ff fe2f 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001a0 	.word	0x200001a0
 800134c:	40004400 	.word	0x40004400

08001350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a1b      	ldr	r2, [pc, #108]	@ (80013d8 <HAL_UART_MspInit+0x88>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d12f      	bne.n	80013d0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <HAL_UART_MspInit+0x8c>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	4a19      	ldr	r2, [pc, #100]	@ (80013dc <HAL_UART_MspInit+0x8c>)
 8001376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800137a:	61d3      	str	r3, [r2, #28]
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <HAL_UART_MspInit+0x8c>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <HAL_UART_MspInit+0x8c>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a13      	ldr	r2, [pc, #76]	@ (80013dc <HAL_UART_MspInit+0x8c>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <HAL_UART_MspInit+0x8c>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013a0:	2304      	movs	r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <HAL_UART_MspInit+0x90>)
 80013b4:	f001 f980 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013b8:	2308      	movs	r3, #8
 80013ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4619      	mov	r1, r3
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <HAL_UART_MspInit+0x90>)
 80013cc:	f001 f974 	bl	80026b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40004400 	.word	0x40004400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010800 	.word	0x40010800

080013e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e4:	f7ff ff14 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e8:	480b      	ldr	r0, [pc, #44]	@ (8001418 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ea:	490c      	ldr	r1, [pc, #48]	@ (800141c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a09      	ldr	r2, [pc, #36]	@ (8001424 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001400:	4c09      	ldr	r4, [pc, #36]	@ (8001428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f003 fc59 	bl	8004cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001412:	f7ff fc55 	bl	8000cc0 <main>
  bx lr
 8001416:	4770      	bx	lr
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001420:	08005670 	.word	0x08005670
  ldr r2, =_sbss
 8001424:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001428:	20000334 	.word	0x20000334

0800142c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800142c:	e7fe      	b.n	800142c <CAN1_RX1_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_Init+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_Init+0x28>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 fecd 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fe2e 	bl	80010ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fee5 	bl	800224a <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 fead 	bl	80021f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000010 	.word	0x20000010
 80014b8:	2000000c 	.word	0x2000000c

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_IncTick+0x1c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_IncTick+0x20>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a03      	ldr	r2, [pc, #12]	@ (80014dc <HAL_IncTick+0x20>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000010 	.word	0x20000010
 80014dc:	200001e8 	.word	0x200001e8

080014e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b02      	ldr	r3, [pc, #8]	@ (80014f0 <HAL_GetTick+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	200001e8 	.word	0x200001e8

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff fff0 	bl	80014e0 <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_Delay+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffe0 	bl	80014e0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000010 	.word	0x20000010

0800153c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0be      	b.n	80016dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff faa2 	bl	8000ac4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fc01 	bl	8001d88 <ADC_ConversionStop_Disable>
 8001586:	4603      	mov	r3, r0
 8001588:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 8099 	bne.w	80016ca <HAL_ADC_Init+0x18e>
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 8095 	bne.w	80016ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015a8:	f023 0302 	bic.w	r3, r3, #2
 80015ac:	f043 0202 	orr.w	r2, r3, #2
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7b1b      	ldrb	r3, [r3, #12]
 80015c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015d4:	d003      	beq.n	80015de <HAL_ADC_Init+0xa2>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d102      	bne.n	80015e4 <HAL_ADC_Init+0xa8>
 80015de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e2:	e000      	b.n	80015e6 <HAL_ADC_Init+0xaa>
 80015e4:	2300      	movs	r3, #0
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7d1b      	ldrb	r3, [r3, #20]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d119      	bne.n	8001628 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7b1b      	ldrb	r3, [r3, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	3b01      	subs	r3, #1
 8001602:	035a      	lsls	r2, r3, #13
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	e00b      	b.n	8001628 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001614:	f043 0220 	orr.w	r2, r3, #32
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	4b28      	ldr	r3, [pc, #160]	@ (80016e4 <HAL_ADC_Init+0x1a8>)
 8001644:	4013      	ands	r3, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	430b      	orrs	r3, r1
 800164e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001658:	d003      	beq.n	8001662 <HAL_ADC_Init+0x126>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d104      	bne.n	800166c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	3b01      	subs	r3, #1
 8001668:	051b      	lsls	r3, r3, #20
 800166a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001672:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	430a      	orrs	r2, r1
 800167e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <HAL_ADC_Init+0x1ac>)
 8001688:	4013      	ands	r3, r2
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	429a      	cmp	r2, r3
 800168e:	d10b      	bne.n	80016a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169a:	f023 0303 	bic.w	r3, r3, #3
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016a6:	e018      	b.n	80016da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	f023 0312 	bic.w	r3, r3, #18
 80016b0:	f043 0210 	orr.w	r2, r3, #16
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016c8:	e007      	b.n	80016da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ce:	f043 0210 	orr.w	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016da:	7dfb      	ldrb	r3, [r7, #23]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	ffe1f7fd 	.word	0xffe1f7fd
 80016e8:	ff1f0efe 	.word	0xff1f0efe

080016ec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a64      	ldr	r2, [pc, #400]	@ (8001894 <HAL_ADC_Start_DMA+0x1a8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d004      	beq.n	8001710 <HAL_ADC_Start_DMA+0x24>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a63      	ldr	r2, [pc, #396]	@ (8001898 <HAL_ADC_Start_DMA+0x1ac>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d106      	bne.n	800171e <HAL_ADC_Start_DMA+0x32>
 8001710:	4b60      	ldr	r3, [pc, #384]	@ (8001894 <HAL_ADC_Start_DMA+0x1a8>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001718:	2b00      	cmp	r3, #0
 800171a:	f040 80b3 	bne.w	8001884 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_ADC_Start_DMA+0x40>
 8001728:	2302      	movs	r3, #2
 800172a:	e0ae      	b.n	800188a <HAL_ADC_Start_DMA+0x19e>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 facd 	bl	8001cd4 <ADC_Enable>
 800173a:	4603      	mov	r3, r0
 800173c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800173e:	7dfb      	ldrb	r3, [r7, #23]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f040 809a 	bne.w	800187a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a4e      	ldr	r2, [pc, #312]	@ (8001898 <HAL_ADC_Start_DMA+0x1ac>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d105      	bne.n	8001770 <HAL_ADC_Start_DMA+0x84>
 8001764:	4b4b      	ldr	r3, [pc, #300]	@ (8001894 <HAL_ADC_Start_DMA+0x1a8>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d115      	bne.n	800179c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001774:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001786:	2b00      	cmp	r3, #0
 8001788:	d026      	beq.n	80017d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001792:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800179a:	e01d      	b.n	80017d8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a39      	ldr	r2, [pc, #228]	@ (8001894 <HAL_ADC_Start_DMA+0x1a8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d004      	beq.n	80017bc <HAL_ADC_Start_DMA+0xd0>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a38      	ldr	r2, [pc, #224]	@ (8001898 <HAL_ADC_Start_DMA+0x1ac>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d10d      	bne.n	80017d8 <HAL_ADC_Start_DMA+0xec>
 80017bc:	4b35      	ldr	r3, [pc, #212]	@ (8001894 <HAL_ADC_Start_DMA+0x1a8>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d007      	beq.n	80017d8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e8:	f023 0206 	bic.w	r2, r3, #6
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017f0:	e002      	b.n	80017f8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4a25      	ldr	r2, [pc, #148]	@ (800189c <HAL_ADC_Start_DMA+0x1b0>)
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a24      	ldr	r2, [pc, #144]	@ (80018a0 <HAL_ADC_Start_DMA+0x1b4>)
 800180e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a23      	ldr	r2, [pc, #140]	@ (80018a4 <HAL_ADC_Start_DMA+0x1b8>)
 8001816:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0202 	mvn.w	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001830:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a18      	ldr	r0, [r3, #32]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	334c      	adds	r3, #76	@ 0x4c
 800183c:	4619      	mov	r1, r3
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f000 fd69 	bl	8002318 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001850:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001854:	d108      	bne.n	8001868 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001864:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001866:	e00f      	b.n	8001888 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001876:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001878:	e006      	b.n	8001888 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001882:	e001      	b.n	8001888 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001888:	7dfb      	ldrb	r3, [r7, #23]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40012400 	.word	0x40012400
 8001898:	40012800 	.word	0x40012800
 800189c:	08001e0b 	.word	0x08001e0b
 80018a0:	08001e87 	.word	0x08001e87
 80018a4:	08001ea3 	.word	0x08001ea3

080018a8 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_Stop_DMA+0x1a>
 80018be:	2302      	movs	r3, #2
 80018c0:	e03a      	b.n	8001938 <HAL_ADC_Stop_DMA+0x90>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fa5c 	bl	8001d88 <ADC_ConversionStop_Disable>
 80018d0:	4603      	mov	r3, r0
 80018d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d129      	bne.n	800192e <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018e8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d11a      	bne.n	800192e <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fd6b 	bl	80023d8 <HAL_DMA_Abort>
 8001902:	4603      	mov	r3, r0
 8001904:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10a      	bne.n	8001922 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001910:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	f043 0201 	orr.w	r2, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001920:	e005      	b.n	800192e <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001926:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	2b00      	cmp	r3, #0
 8001960:	d03e      	beq.n	80019e0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d039      	beq.n	80019e0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800198e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001992:	d11d      	bne.n	80019d0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001998:	2b00      	cmp	r3, #0
 800199a:	d119      	bne.n	80019d0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0220 	bic.w	r2, r2, #32
 80019aa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fabb 	bl	8000f4c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f06f 0212 	mvn.w	r2, #18
 80019de:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d04d      	beq.n	8001a86 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d048      	beq.n	8001a86 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001a16:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001a1a:	d012      	beq.n	8001a42 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d125      	bne.n	8001a76 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a34:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a38:	d11d      	bne.n	8001a76 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d119      	bne.n	8001a76 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a50:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fadc 	bl	8002034 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 020c 	mvn.w	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d012      	beq.n	8001ab6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00d      	beq.n	8001ab6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f812 	bl	8001ad0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0201 	mvn.w	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x20>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0dc      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x1da>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d81c      	bhi.n	8001b4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b05      	subs	r3, #5
 8001b26:	221f      	movs	r2, #31
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b05      	subs	r3, #5
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b4c:	e03c      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d81c      	bhi.n	8001b90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	3b23      	subs	r3, #35	@ 0x23
 8001b68:	221f      	movs	r2, #31
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4019      	ands	r1, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b23      	subs	r3, #35	@ 0x23
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b8e:	e01b      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b41      	subs	r3, #65	@ 0x41
 8001ba2:	221f      	movs	r2, #31
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	4019      	ands	r1, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	3b41      	subs	r3, #65	@ 0x41
 8001bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b09      	cmp	r3, #9
 8001bce:	d91c      	bls.n	8001c0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68d9      	ldr	r1, [r3, #12]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	3b1e      	subs	r3, #30
 8001be2:	2207      	movs	r2, #7
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4019      	ands	r1, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6898      	ldr	r0, [r3, #8]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3b1e      	subs	r3, #30
 8001bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	e019      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6919      	ldr	r1, [r3, #16]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4019      	ands	r1, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	6898      	ldr	r0, [r3, #8]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	fa00 f203 	lsl.w	r2, r0, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d003      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c4a:	2b11      	cmp	r3, #17
 8001c4c:	d132      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d125      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d126      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d11a      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <HAL_ADC_ConfigChannel+0x1e8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a13      	ldr	r2, [pc, #76]	@ (8001cd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0c9a      	lsrs	r2, r3, #18
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x1b2>
 8001ca2:	e007      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40012400 	.word	0x40012400
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	431bde83 	.word	0x431bde83

08001cd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d040      	beq.n	8001d74 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0201 	orr.w	r2, r2, #1
 8001d00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d02:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <ADC_Enable+0xac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a1f      	ldr	r2, [pc, #124]	@ (8001d84 <ADC_Enable+0xb0>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	0c9b      	lsrs	r3, r3, #18
 8001d0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d10:	e002      	b.n	8001d18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d1e:	f7ff fbdf 	bl	80014e0 <HAL_GetTick>
 8001d22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d24:	e01f      	b.n	8001d66 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d26:	f7ff fbdb 	bl	80014e0 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d918      	bls.n	8001d66 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d011      	beq.n	8001d66 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	f043 0210 	orr.w	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e007      	b.n	8001d76 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d1d8      	bne.n	8001d26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000008 	.word	0x20000008
 8001d84:	431bde83 	.word	0x431bde83

08001d88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d12e      	bne.n	8001e00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001db2:	f7ff fb95 	bl	80014e0 <HAL_GetTick>
 8001db6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001db8:	e01b      	b.n	8001df2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dba:	f7ff fb91 	bl	80014e0 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d914      	bls.n	8001df2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10d      	bne.n	8001df2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dda:	f043 0210 	orr.w	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de6:	f043 0201 	orr.w	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e007      	b.n	8001e02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d0dc      	beq.n	8001dba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d127      	bne.n	8001e74 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e3a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e3e:	d115      	bne.n	8001e6c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d111      	bne.n	8001e6c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff f86d 	bl	8000f4c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e72:	e004      	b.n	8001e7e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	4798      	blx	r3
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e92:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f7ff fe12 	bl	8001abe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f7ff f855 	bl	8000f78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADCEx_Calibration_Start+0x1e>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e097      	b.n	8002026 <HAL_ADCEx_Calibration_Start+0x14e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff42 	bl	8001d88 <ADC_ConversionStop_Disable>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff fee3 	bl	8001cd4 <ADC_Enable>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f040 8081 	bne.w	800201c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f22:	f023 0302 	bic.w	r3, r3, #2
 8001f26:	f043 0202 	orr.w	r2, r3, #2
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f2e:	4b40      	ldr	r3, [pc, #256]	@ (8002030 <HAL_ADCEx_Calibration_Start+0x158>)
 8001f30:	681c      	ldr	r4, [r3, #0]
 8001f32:	2002      	movs	r0, #2
 8001f34:	f001 fa22 	bl	800337c <HAL_RCCEx_GetPeriphCLKFreq>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001f3e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001f40:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001f42:	e002      	b.n	8001f4a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f9      	bne.n	8001f44 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0208 	orr.w	r2, r2, #8
 8001f5e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001f60:	f7ff fabe 	bl	80014e0 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f66:	e01b      	b.n	8001fa0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f68:	f7ff faba 	bl	80014e0 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b0a      	cmp	r3, #10
 8001f74:	d914      	bls.n	8001fa0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	f023 0312 	bic.w	r3, r3, #18
 8001f8c:	f043 0210 	orr.w	r2, r3, #16
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e042      	b.n	8002026 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1dc      	bne.n	8001f68 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0204 	orr.w	r2, r2, #4
 8001fbc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001fbe:	f7ff fa8f 	bl	80014e0 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001fc4:	e01b      	b.n	8001ffe <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001fc6:	f7ff fa8b 	bl	80014e0 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b0a      	cmp	r3, #10
 8001fd2:	d914      	bls.n	8001ffe <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	f023 0312 	bic.w	r3, r3, #18
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e013      	b.n	8002026 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1dc      	bne.n	8001fc6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002010:	f023 0303 	bic.w	r3, r3, #3
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002024:	7dfb      	ldrb	r3, [r7, #23]
}
 8002026:	4618      	mov	r0, r3
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008

08002034 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
	...

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	@ (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bc80      	pop	{r7}
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4906      	ldr	r1, [pc, #24]	@ (80020e0 <__NVIC_EnableIRQ+0x34>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	@ (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	@ (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	@ 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	@ 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff90 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff2d 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002208:	f7ff ff42 	bl	8002090 <__NVIC_GetPriorityGrouping>
 800220c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff90 	bl	8002138 <NVIC_EncodePriority>
 8002218:	4602      	mov	r2, r0
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff5f 	bl	80020e4 <__NVIC_SetPriority>
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff35 	bl	80020ac <__NVIC_EnableIRQ>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffa2 	bl	800219c <SysTick_Config>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e043      	b.n	8002302 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4b22      	ldr	r3, [pc, #136]	@ (800230c <HAL_DMA_Init+0xa8>)
 8002282:	4413      	add	r3, r2
 8002284:	4a22      	ldr	r2, [pc, #136]	@ (8002310 <HAL_DMA_Init+0xac>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	009a      	lsls	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a1f      	ldr	r2, [pc, #124]	@ (8002314 <HAL_DMA_Init+0xb0>)
 8002296:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80022b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	bffdfff8 	.word	0xbffdfff8
 8002310:	cccccccd 	.word	0xcccccccd
 8002314:	40020000 	.word	0x40020000

08002318 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_DMA_Start_IT+0x20>
 8002334:	2302      	movs	r3, #2
 8002336:	e04b      	b.n	80023d0 <HAL_DMA_Start_IT+0xb8>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	d13a      	bne.n	80023c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f973 	bl	800265c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 020e 	orr.w	r2, r2, #14
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e00f      	b.n	80023b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 020a 	orr.w	r2, r2, #10
 80023ae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e005      	b.n	80023ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
 80023cc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d008      	beq.n	8002402 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2204      	movs	r2, #4
 80023f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e020      	b.n	8002444 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 020e 	bic.w	r2, r2, #14
 8002410:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0201 	bic.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242a:	2101      	movs	r1, #1
 800242c:	fa01 f202 	lsl.w	r2, r1, r2
 8002430:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002442:	7bfb      	ldrb	r3, [r7, #15]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
	...

08002450 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	2204      	movs	r2, #4
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d04f      	beq.n	8002518 <HAL_DMA_IRQHandler+0xc8>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d04a      	beq.n	8002518 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d107      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a66      	ldr	r2, [pc, #408]	@ (8002640 <HAL_DMA_IRQHandler+0x1f0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d029      	beq.n	80024fe <HAL_DMA_IRQHandler+0xae>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a65      	ldr	r2, [pc, #404]	@ (8002644 <HAL_DMA_IRQHandler+0x1f4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d022      	beq.n	80024fa <HAL_DMA_IRQHandler+0xaa>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a63      	ldr	r2, [pc, #396]	@ (8002648 <HAL_DMA_IRQHandler+0x1f8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01a      	beq.n	80024f4 <HAL_DMA_IRQHandler+0xa4>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a62      	ldr	r2, [pc, #392]	@ (800264c <HAL_DMA_IRQHandler+0x1fc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d012      	beq.n	80024ee <HAL_DMA_IRQHandler+0x9e>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a60      	ldr	r2, [pc, #384]	@ (8002650 <HAL_DMA_IRQHandler+0x200>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00a      	beq.n	80024e8 <HAL_DMA_IRQHandler+0x98>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002654 <HAL_DMA_IRQHandler+0x204>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d102      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x92>
 80024dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024e0:	e00e      	b.n	8002500 <HAL_DMA_IRQHandler+0xb0>
 80024e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80024e6:	e00b      	b.n	8002500 <HAL_DMA_IRQHandler+0xb0>
 80024e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80024ec:	e008      	b.n	8002500 <HAL_DMA_IRQHandler+0xb0>
 80024ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024f2:	e005      	b.n	8002500 <HAL_DMA_IRQHandler+0xb0>
 80024f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024f8:	e002      	b.n	8002500 <HAL_DMA_IRQHandler+0xb0>
 80024fa:	2340      	movs	r3, #64	@ 0x40
 80024fc:	e000      	b.n	8002500 <HAL_DMA_IRQHandler+0xb0>
 80024fe:	2304      	movs	r3, #4
 8002500:	4a55      	ldr	r2, [pc, #340]	@ (8002658 <HAL_DMA_IRQHandler+0x208>)
 8002502:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8094 	beq.w	8002636 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002516:	e08e      	b.n	8002636 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	2202      	movs	r2, #2
 800251e:	409a      	lsls	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d056      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x186>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d051      	beq.n	80025d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10b      	bne.n	8002558 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 020a 	bic.w	r2, r2, #10
 800254e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a38      	ldr	r2, [pc, #224]	@ (8002640 <HAL_DMA_IRQHandler+0x1f0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d029      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x166>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a37      	ldr	r2, [pc, #220]	@ (8002644 <HAL_DMA_IRQHandler+0x1f4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x162>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a35      	ldr	r2, [pc, #212]	@ (8002648 <HAL_DMA_IRQHandler+0x1f8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d01a      	beq.n	80025ac <HAL_DMA_IRQHandler+0x15c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a34      	ldr	r2, [pc, #208]	@ (800264c <HAL_DMA_IRQHandler+0x1fc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d012      	beq.n	80025a6 <HAL_DMA_IRQHandler+0x156>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a32      	ldr	r2, [pc, #200]	@ (8002650 <HAL_DMA_IRQHandler+0x200>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00a      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x150>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a31      	ldr	r2, [pc, #196]	@ (8002654 <HAL_DMA_IRQHandler+0x204>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d102      	bne.n	800259a <HAL_DMA_IRQHandler+0x14a>
 8002594:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002598:	e00e      	b.n	80025b8 <HAL_DMA_IRQHandler+0x168>
 800259a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800259e:	e00b      	b.n	80025b8 <HAL_DMA_IRQHandler+0x168>
 80025a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025a4:	e008      	b.n	80025b8 <HAL_DMA_IRQHandler+0x168>
 80025a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025aa:	e005      	b.n	80025b8 <HAL_DMA_IRQHandler+0x168>
 80025ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025b0:	e002      	b.n	80025b8 <HAL_DMA_IRQHandler+0x168>
 80025b2:	2320      	movs	r3, #32
 80025b4:	e000      	b.n	80025b8 <HAL_DMA_IRQHandler+0x168>
 80025b6:	2302      	movs	r3, #2
 80025b8:	4a27      	ldr	r2, [pc, #156]	@ (8002658 <HAL_DMA_IRQHandler+0x208>)
 80025ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d034      	beq.n	8002636 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025d4:	e02f      	b.n	8002636 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	2208      	movs	r2, #8
 80025dc:	409a      	lsls	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d028      	beq.n	8002638 <HAL_DMA_IRQHandler+0x1e8>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d023      	beq.n	8002638 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 020e 	bic.w	r2, r2, #14
 80025fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f202 	lsl.w	r2, r1, r2
 800260e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
    }
  }
  return;
 8002636:	bf00      	nop
 8002638:	bf00      	nop
}
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40020008 	.word	0x40020008
 8002644:	4002001c 	.word	0x4002001c
 8002648:	40020030 	.word	0x40020030
 800264c:	40020044 	.word	0x40020044
 8002650:	40020058 	.word	0x40020058
 8002654:	4002006c 	.word	0x4002006c
 8002658:	40020000 	.word	0x40020000

0800265c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b10      	cmp	r3, #16
 8002688:	d108      	bne.n	800269c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800269a:	e007      	b.n	80026ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b08b      	sub	sp, #44	@ 0x2c
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ca:	e169      	b.n	80029a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026cc:	2201      	movs	r2, #1
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 8158 	bne.w	800299a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002958 <HAL_GPIO_Init+0x2a0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d05e      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 80026f4:	4a98      	ldr	r2, [pc, #608]	@ (8002958 <HAL_GPIO_Init+0x2a0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d875      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 80026fa:	4a98      	ldr	r2, [pc, #608]	@ (800295c <HAL_GPIO_Init+0x2a4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d058      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002700:	4a96      	ldr	r2, [pc, #600]	@ (800295c <HAL_GPIO_Init+0x2a4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d86f      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002706:	4a96      	ldr	r2, [pc, #600]	@ (8002960 <HAL_GPIO_Init+0x2a8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d052      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 800270c:	4a94      	ldr	r2, [pc, #592]	@ (8002960 <HAL_GPIO_Init+0x2a8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d869      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002712:	4a94      	ldr	r2, [pc, #592]	@ (8002964 <HAL_GPIO_Init+0x2ac>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04c      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002718:	4a92      	ldr	r2, [pc, #584]	@ (8002964 <HAL_GPIO_Init+0x2ac>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d863      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 800271e:	4a92      	ldr	r2, [pc, #584]	@ (8002968 <HAL_GPIO_Init+0x2b0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d046      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002724:	4a90      	ldr	r2, [pc, #576]	@ (8002968 <HAL_GPIO_Init+0x2b0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d85d      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 800272a:	2b12      	cmp	r3, #18
 800272c:	d82a      	bhi.n	8002784 <HAL_GPIO_Init+0xcc>
 800272e:	2b12      	cmp	r3, #18
 8002730:	d859      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002732:	a201      	add	r2, pc, #4	@ (adr r2, 8002738 <HAL_GPIO_Init+0x80>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	080027b3 	.word	0x080027b3
 800273c:	0800278d 	.word	0x0800278d
 8002740:	0800279f 	.word	0x0800279f
 8002744:	080027e1 	.word	0x080027e1
 8002748:	080027e7 	.word	0x080027e7
 800274c:	080027e7 	.word	0x080027e7
 8002750:	080027e7 	.word	0x080027e7
 8002754:	080027e7 	.word	0x080027e7
 8002758:	080027e7 	.word	0x080027e7
 800275c:	080027e7 	.word	0x080027e7
 8002760:	080027e7 	.word	0x080027e7
 8002764:	080027e7 	.word	0x080027e7
 8002768:	080027e7 	.word	0x080027e7
 800276c:	080027e7 	.word	0x080027e7
 8002770:	080027e7 	.word	0x080027e7
 8002774:	080027e7 	.word	0x080027e7
 8002778:	080027e7 	.word	0x080027e7
 800277c:	08002795 	.word	0x08002795
 8002780:	080027a9 	.word	0x080027a9
 8002784:	4a79      	ldr	r2, [pc, #484]	@ (800296c <HAL_GPIO_Init+0x2b4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800278a:	e02c      	b.n	80027e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	623b      	str	r3, [r7, #32]
          break;
 8002792:	e029      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	3304      	adds	r3, #4
 800279a:	623b      	str	r3, [r7, #32]
          break;
 800279c:	e024      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	3308      	adds	r3, #8
 80027a4:	623b      	str	r3, [r7, #32]
          break;
 80027a6:	e01f      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	330c      	adds	r3, #12
 80027ae:	623b      	str	r3, [r7, #32]
          break;
 80027b0:	e01a      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ba:	2304      	movs	r3, #4
 80027bc:	623b      	str	r3, [r7, #32]
          break;
 80027be:	e013      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c8:	2308      	movs	r3, #8
 80027ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	611a      	str	r2, [r3, #16]
          break;
 80027d2:	e009      	b.n	80027e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d4:	2308      	movs	r3, #8
 80027d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	615a      	str	r2, [r3, #20]
          break;
 80027de:	e003      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
          break;
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          break;
 80027e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2bff      	cmp	r3, #255	@ 0xff
 80027ec:	d801      	bhi.n	80027f2 <HAL_GPIO_Init+0x13a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	e001      	b.n	80027f6 <HAL_GPIO_Init+0x13e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2bff      	cmp	r3, #255	@ 0xff
 80027fc:	d802      	bhi.n	8002804 <HAL_GPIO_Init+0x14c>
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	e002      	b.n	800280a <HAL_GPIO_Init+0x152>
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	3b08      	subs	r3, #8
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	210f      	movs	r1, #15
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	401a      	ands	r2, r3
 800281c:	6a39      	ldr	r1, [r7, #32]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	431a      	orrs	r2, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80b1 	beq.w	800299a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002838:	4b4d      	ldr	r3, [pc, #308]	@ (8002970 <HAL_GPIO_Init+0x2b8>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a4c      	ldr	r2, [pc, #304]	@ (8002970 <HAL_GPIO_Init+0x2b8>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <HAL_GPIO_Init+0x2b8>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002850:	4a48      	ldr	r2, [pc, #288]	@ (8002974 <HAL_GPIO_Init+0x2bc>)
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a40      	ldr	r2, [pc, #256]	@ (8002978 <HAL_GPIO_Init+0x2c0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <HAL_GPIO_Init+0x1ec>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a3f      	ldr	r2, [pc, #252]	@ (800297c <HAL_GPIO_Init+0x2c4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d00d      	beq.n	80028a0 <HAL_GPIO_Init+0x1e8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a3e      	ldr	r2, [pc, #248]	@ (8002980 <HAL_GPIO_Init+0x2c8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d007      	beq.n	800289c <HAL_GPIO_Init+0x1e4>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3d      	ldr	r2, [pc, #244]	@ (8002984 <HAL_GPIO_Init+0x2cc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d101      	bne.n	8002898 <HAL_GPIO_Init+0x1e0>
 8002894:	2303      	movs	r3, #3
 8002896:	e006      	b.n	80028a6 <HAL_GPIO_Init+0x1ee>
 8002898:	2304      	movs	r3, #4
 800289a:	e004      	b.n	80028a6 <HAL_GPIO_Init+0x1ee>
 800289c:	2302      	movs	r3, #2
 800289e:	e002      	b.n	80028a6 <HAL_GPIO_Init+0x1ee>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_GPIO_Init+0x1ee>
 80028a4:	2300      	movs	r3, #0
 80028a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028a8:	f002 0203 	and.w	r2, r2, #3
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	4093      	lsls	r3, r2
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028b6:	492f      	ldr	r1, [pc, #188]	@ (8002974 <HAL_GPIO_Init+0x2bc>)
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	3302      	adds	r3, #2
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	492c      	ldr	r1, [pc, #176]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	608b      	str	r3, [r1, #8]
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028de:	4b2a      	ldr	r3, [pc, #168]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4928      	ldr	r1, [pc, #160]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028f8:	4b23      	ldr	r3, [pc, #140]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4922      	ldr	r1, [pc, #136]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	60cb      	str	r3, [r1, #12]
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002906:	4b20      	ldr	r3, [pc, #128]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	43db      	mvns	r3, r3
 800290e:	491e      	ldr	r1, [pc, #120]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 8002910:	4013      	ands	r3, r2
 8002912:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002920:	4b19      	ldr	r3, [pc, #100]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4918      	ldr	r1, [pc, #96]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800292e:	4b16      	ldr	r3, [pc, #88]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	43db      	mvns	r3, r3
 8002936:	4914      	ldr	r1, [pc, #80]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 8002938:	4013      	ands	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d021      	beq.n	800298c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002948:	4b0f      	ldr	r3, [pc, #60]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	490e      	ldr	r1, [pc, #56]	@ (8002988 <HAL_GPIO_Init+0x2d0>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
 8002954:	e021      	b.n	800299a <HAL_GPIO_Init+0x2e2>
 8002956:	bf00      	nop
 8002958:	10320000 	.word	0x10320000
 800295c:	10310000 	.word	0x10310000
 8002960:	10220000 	.word	0x10220000
 8002964:	10210000 	.word	0x10210000
 8002968:	10120000 	.word	0x10120000
 800296c:	10110000 	.word	0x10110000
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000
 8002978:	40010800 	.word	0x40010800
 800297c:	40010c00 	.word	0x40010c00
 8002980:	40011000 	.word	0x40011000
 8002984:	40011400 	.word	0x40011400
 8002988:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_GPIO_Init+0x304>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	43db      	mvns	r3, r3
 8002994:	4909      	ldr	r1, [pc, #36]	@ (80029bc <HAL_GPIO_Init+0x304>)
 8002996:	4013      	ands	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	3301      	adds	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f47f ae8e 	bne.w	80026cc <HAL_GPIO_Init+0x14>
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	372c      	adds	r7, #44	@ 0x2c
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40010400 	.word	0x40010400

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029dc:	e003      	b.n	80029e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	041a      	lsls	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	611a      	str	r2, [r3, #16]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e272      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8087 	beq.w	8002b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a10:	4b92      	ldr	r3, [pc, #584]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d00c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d112      	bne.n	8002a4e <HAL_RCC_OscConfig+0x5e>
 8002a28:	4b8c      	ldr	r3, [pc, #560]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a34:	d10b      	bne.n	8002a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a36:	4b89      	ldr	r3, [pc, #548]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d06c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x12c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d168      	bne.n	8002b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e24c      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x76>
 8002a58:	4b80      	ldr	r3, [pc, #512]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e02e      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd4>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x98>
 8002a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7a      	ldr	r2, [pc, #488]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b78      	ldr	r3, [pc, #480]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a77      	ldr	r2, [pc, #476]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e01d      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd4>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0xbc>
 8002a92:	4b72      	ldr	r3, [pc, #456]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a71      	ldr	r2, [pc, #452]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd4>
 8002aac:	4b6b      	ldr	r3, [pc, #428]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b68      	ldr	r3, [pc, #416]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a67      	ldr	r2, [pc, #412]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fe fd08 	bl	80014e0 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ad4:	f7fe fd04 	bl	80014e0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	@ 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e200      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xe4>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe fcf4 	bl	80014e0 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002afc:	f7fe fcf0 	bl	80014e0 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	@ 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e1ec      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	4b53      	ldr	r3, [pc, #332]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x10c>
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d063      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b36:	4b49      	ldr	r3, [pc, #292]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d11c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x18c>
 8002b42:	4b46      	ldr	r3, [pc, #280]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4e:	4b43      	ldr	r3, [pc, #268]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_RCC_OscConfig+0x176>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e1c0      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b66:	4b3d      	ldr	r3, [pc, #244]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4939      	ldr	r1, [pc, #228]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7a:	e03a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b84:	4b36      	ldr	r3, [pc, #216]	@ (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fca9 	bl	80014e0 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b92:	f7fe fca5 	bl	80014e0 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1a1      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4927      	ldr	r1, [pc, #156]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc6:	4b26      	ldr	r3, [pc, #152]	@ (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fc88 	bl	80014e0 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fc84 	bl	80014e0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e180      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d03a      	beq.n	8002c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d019      	beq.n	8002c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c06:	4b17      	ldr	r3, [pc, #92]	@ (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fc68 	bl	80014e0 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c14:	f7fe fc64 	bl	80014e0 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e160      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	4b0d      	ldr	r3, [pc, #52]	@ (8002c5c <HAL_RCC_OscConfig+0x26c>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c32:	2001      	movs	r0, #1
 8002c34:	f000 face 	bl	80031d4 <RCC_Delay>
 8002c38:	e01c      	b.n	8002c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fe fc4e 	bl	80014e0 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c46:	e00f      	b.n	8002c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fe fc4a 	bl	80014e0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d908      	bls.n	8002c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e146      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	42420000 	.word	0x42420000
 8002c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c68:	4b92      	ldr	r3, [pc, #584]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e9      	bne.n	8002c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a6 	beq.w	8002dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c86:	4b8b      	ldr	r3, [pc, #556]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10d      	bne.n	8002cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	4b88      	ldr	r3, [pc, #544]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4a87      	ldr	r2, [pc, #540]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	61d3      	str	r3, [r2, #28]
 8002c9e:	4b85      	ldr	r3, [pc, #532]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002caa:	2301      	movs	r3, #1
 8002cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cae:	4b82      	ldr	r3, [pc, #520]	@ (8002eb8 <HAL_RCC_OscConfig+0x4c8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d118      	bne.n	8002cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cba:	4b7f      	ldr	r3, [pc, #508]	@ (8002eb8 <HAL_RCC_OscConfig+0x4c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8002eb8 <HAL_RCC_OscConfig+0x4c8>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fc0b 	bl	80014e0 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cce:	f7fe fc07 	bl	80014e0 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b64      	cmp	r3, #100	@ 0x64
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e103      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	4b75      	ldr	r3, [pc, #468]	@ (8002eb8 <HAL_RCC_OscConfig+0x4c8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCC_OscConfig+0x312>
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6213      	str	r3, [r2, #32]
 8002d00:	e02d      	b.n	8002d5e <HAL_RCC_OscConfig+0x36e>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x334>
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a69      	ldr	r2, [pc, #420]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6213      	str	r3, [r2, #32]
 8002d16:	4b67      	ldr	r3, [pc, #412]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4a66      	ldr	r2, [pc, #408]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	f023 0304 	bic.w	r3, r3, #4
 8002d20:	6213      	str	r3, [r2, #32]
 8002d22:	e01c      	b.n	8002d5e <HAL_RCC_OscConfig+0x36e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x356>
 8002d2c:	4b61      	ldr	r3, [pc, #388]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4a60      	ldr	r2, [pc, #384]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	f043 0304 	orr.w	r3, r3, #4
 8002d36:	6213      	str	r3, [r2, #32]
 8002d38:	4b5e      	ldr	r3, [pc, #376]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6213      	str	r3, [r2, #32]
 8002d44:	e00b      	b.n	8002d5e <HAL_RCC_OscConfig+0x36e>
 8002d46:	4b5b      	ldr	r3, [pc, #364]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	4b58      	ldr	r3, [pc, #352]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a57      	ldr	r2, [pc, #348]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7fe fbbb 	bl	80014e0 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7fe fbb7 	bl	80014e0 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0b1      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	4b4b      	ldr	r3, [pc, #300]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ee      	beq.n	8002d6e <HAL_RCC_OscConfig+0x37e>
 8002d90:	e014      	b.n	8002dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fba5 	bl	80014e0 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fba1 	bl	80014e0 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e09b      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	4b40      	ldr	r3, [pc, #256]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ee      	bne.n	8002d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8087 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd8:	4b36      	ldr	r3, [pc, #216]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d061      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d146      	bne.n	8002e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b33      	ldr	r3, [pc, #204]	@ (8002ebc <HAL_RCC_OscConfig+0x4cc>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe fb75 	bl	80014e0 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fe fb71 	bl	80014e0 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e06d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0c:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e20:	d108      	bne.n	8002e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e22:	4b24      	ldr	r3, [pc, #144]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	4921      	ldr	r1, [pc, #132]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e34:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a19      	ldr	r1, [r3, #32]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	430b      	orrs	r3, r1
 8002e46:	491b      	ldr	r1, [pc, #108]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ebc <HAL_RCC_OscConfig+0x4cc>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7fe fb45 	bl	80014e0 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe fb41 	bl	80014e0 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e03d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCC_OscConfig+0x46a>
 8002e78:	e035      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7a:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <HAL_RCC_OscConfig+0x4cc>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fb2e 	bl	80014e0 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe fb2a 	bl	80014e0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e026      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x498>
 8002ea6:	e01e      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e019      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_RCC_OscConfig+0x500>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0d0      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b6a      	ldr	r3, [pc, #424]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d910      	bls.n	8002f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b67      	ldr	r3, [pc, #412]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	4965      	ldr	r1, [pc, #404]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b63      	ldr	r3, [pc, #396]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0b8      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d020      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f50:	4b59      	ldr	r3, [pc, #356]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a58      	ldr	r2, [pc, #352]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f68:	4b53      	ldr	r3, [pc, #332]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f74:	4b50      	ldr	r3, [pc, #320]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	494d      	ldr	r1, [pc, #308]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d040      	beq.n	8003014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b47      	ldr	r3, [pc, #284]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e07f      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b41      	ldr	r3, [pc, #260]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e073      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e06b      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4936      	ldr	r1, [pc, #216]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fa7c 	bl	80014e0 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe fa78 	bl	80014e0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e053      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b27      	ldr	r3, [pc, #156]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d210      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b24      	ldr	r3, [pc, #144]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 0207 	bic.w	r2, r3, #7
 800302a:	4922      	ldr	r1, [pc, #136]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e032      	b.n	80030aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003050:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4916      	ldr	r1, [pc, #88]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800306e:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	490e      	ldr	r1, [pc, #56]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003082:	f000 f821 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003086:	4602      	mov	r2, r0
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	490a      	ldr	r1, [pc, #40]	@ (80030bc <HAL_RCC_ClockConfig+0x1c8>)
 8003094:	5ccb      	ldrb	r3, [r1, r3]
 8003096:	fa22 f303 	lsr.w	r3, r2, r3
 800309a:	4a09      	ldr	r2, [pc, #36]	@ (80030c0 <HAL_RCC_ClockConfig+0x1cc>)
 800309c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800309e:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_ClockConfig+0x1d0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe f9da 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40022000 	.word	0x40022000
 80030b8:	40021000 	.word	0x40021000
 80030bc:	080055f4 	.word	0x080055f4
 80030c0:	20000008 	.word	0x20000008
 80030c4:	2000000c 	.word	0x2000000c

080030c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030e2:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <HAL_RCC_GetSysClockFreq+0x94>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d002      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x30>
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x36>
 80030f6:	e027      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030f8:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x98>)
 80030fa:	613b      	str	r3, [r7, #16]
      break;
 80030fc:	e027      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0c9b      	lsrs	r3, r3, #18
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	4a17      	ldr	r2, [pc, #92]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003108:	5cd3      	ldrb	r3, [r2, r3]
 800310a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003116:	4b11      	ldr	r3, [pc, #68]	@ (800315c <HAL_RCC_GetSysClockFreq+0x94>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	0c5b      	lsrs	r3, r3, #17
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	4a11      	ldr	r2, [pc, #68]	@ (8003168 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003122:	5cd3      	ldrb	r3, [r2, r3]
 8003124:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a0d      	ldr	r2, [pc, #52]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x98>)
 800312a:	fb03 f202 	mul.w	r2, r3, r2
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e004      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a0c      	ldr	r2, [pc, #48]	@ (800316c <HAL_RCC_GetSysClockFreq+0xa4>)
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	613b      	str	r3, [r7, #16]
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x98>)
 800314a:	613b      	str	r3, [r7, #16]
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	693b      	ldr	r3, [r7, #16]
}
 8003150:	4618      	mov	r0, r3
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	007a1200 	.word	0x007a1200
 8003164:	0800560c 	.word	0x0800560c
 8003168:	0800561c 	.word	0x0800561c
 800316c:	003d0900 	.word	0x003d0900

08003170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003174:	4b02      	ldr	r3, [pc, #8]	@ (8003180 <HAL_RCC_GetHCLKFreq+0x10>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	20000008 	.word	0x20000008

08003184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003188:	f7ff fff2 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	4903      	ldr	r1, [pc, #12]	@ (80031a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	08005604 	.word	0x08005604

080031ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031b0:	f7ff ffde 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	0adb      	lsrs	r3, r3, #11
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4903      	ldr	r1, [pc, #12]	@ (80031d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	08005604 	.word	0x08005604

080031d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003208 <RCC_Delay+0x34>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	@ (800320c <RCC_Delay+0x38>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0a5b      	lsrs	r3, r3, #9
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031f0:	bf00      	nop
  }
  while (Delay --);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1e5a      	subs	r2, r3, #1
 80031f6:	60fa      	str	r2, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f9      	bne.n	80031f0 <RCC_Delay+0x1c>
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	20000008 	.word	0x20000008
 800320c:	10624dd3 	.word	0x10624dd3

08003210 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d07d      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003230:	4b4f      	ldr	r3, [pc, #316]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10d      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	4b4c      	ldr	r3, [pc, #304]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	4a4b      	ldr	r2, [pc, #300]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003246:	61d3      	str	r3, [r2, #28]
 8003248:	4b49      	ldr	r3, [pc, #292]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b46      	ldr	r3, [pc, #280]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d118      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003264:	4b43      	ldr	r3, [pc, #268]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a42      	ldr	r2, [pc, #264]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800326a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800326e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003270:	f7fe f936 	bl	80014e0 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	e008      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003278:	f7fe f932 	bl	80014e0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b64      	cmp	r3, #100	@ 0x64
 8003284:	d901      	bls.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e06d      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b3a      	ldr	r3, [pc, #232]	@ (8003374 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003296:	4b36      	ldr	r3, [pc, #216]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800329e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d02e      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d027      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032be:	4b2e      	ldr	r3, [pc, #184]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ca:	4a29      	ldr	r2, [pc, #164]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d014      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fe f901 	bl	80014e0 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe f8fd 	bl	80014e0 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e036      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ee      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003304:	4b1a      	ldr	r3, [pc, #104]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4917      	ldr	r1, [pc, #92]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	4313      	orrs	r3, r2
 8003314:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331c:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003326:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003334:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	490b      	ldr	r1, [pc, #44]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003352:	4b07      	ldr	r3, [pc, #28]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4904      	ldr	r1, [pc, #16]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
 8003378:	42420440 	.word	0x42420440

0800337c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	2300      	movs	r3, #0
 8003396:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b10      	cmp	r3, #16
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	f200 808a 	bhi.w	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d045      	beq.n	8003438 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d075      	beq.n	800349e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033b2:	e082      	b.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80033b4:	4b46      	ldr	r3, [pc, #280]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033ba:	4b45      	ldr	r3, [pc, #276]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d07b      	beq.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	0c9b      	lsrs	r3, r3, #18
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	4a41      	ldr	r2, [pc, #260]	@ (80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d015      	beq.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033de:	4b3c      	ldr	r3, [pc, #240]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	0c5b      	lsrs	r3, r3, #17
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	4a3b      	ldr	r2, [pc, #236]	@ (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00d      	beq.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033f8:	4a38      	ldr	r2, [pc, #224]	@ (80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	e004      	b.n	8003414 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4a34      	ldr	r2, [pc, #208]	@ (80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800340e:	fb02 f303 	mul.w	r3, r2, r3
 8003412:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003414:	4b2e      	ldr	r3, [pc, #184]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800341c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003420:	d102      	bne.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	61bb      	str	r3, [r7, #24]
      break;
 8003426:	e04a      	b.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4a2d      	ldr	r2, [pc, #180]	@ (80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	61bb      	str	r3, [r7, #24]
      break;
 8003436:	e042      	b.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003438:	4b25      	ldr	r3, [pc, #148]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003448:	d108      	bne.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003454:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e01f      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003466:	d109      	bne.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003468:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003474:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e00f      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003486:	d11c      	bne.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003488:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d016      	beq.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003494:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003498:	61bb      	str	r3, [r7, #24]
      break;
 800349a:	e012      	b.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800349c:	e011      	b.n	80034c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800349e:	f7ff fe85 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	0b9b      	lsrs	r3, r3, #14
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	3301      	adds	r3, #1
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	61bb      	str	r3, [r7, #24]
      break;
 80034b8:	e004      	b.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034ba:	bf00      	nop
 80034bc:	e002      	b.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034c2:	bf00      	nop
    }
  }
  return (frequency);
 80034c4:	69bb      	ldr	r3, [r7, #24]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	08005620 	.word	0x08005620
 80034d8:	08005630 	.word	0x08005630
 80034dc:	007a1200 	.word	0x007a1200
 80034e0:	003d0900 	.word	0x003d0900
 80034e4:	aaaaaaab 	.word	0xaaaaaaab

080034e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e076      	b.n	80035e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d108      	bne.n	8003514 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800350a:	d009      	beq.n	8003520 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
 8003512:	e005      	b.n	8003520 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fd6c 	bl	8001018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003556:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a4:	ea42 0103 	orr.w	r1, r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	0c1a      	lsrs	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f002 0204 	and.w	r2, r2, #4
 80035c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003600:	f7fd ff6e 	bl	80014e0 <HAL_GetTick>
 8003604:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d001      	beq.n	800361a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
 8003618:	e12a      	b.n	8003870 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_SPI_Transmit+0x36>
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e122      	b.n	8003870 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_SPI_Transmit+0x48>
 8003634:	2302      	movs	r3, #2
 8003636:	e11b      	b.n	8003870 <HAL_SPI_Transmit+0x280>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2203      	movs	r2, #3
 8003644:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	88fa      	ldrh	r2, [r7, #6]
 8003658:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003686:	d10f      	bne.n	80036a8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003696:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b2:	2b40      	cmp	r3, #64	@ 0x40
 80036b4:	d007      	beq.n	80036c6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ce:	d152      	bne.n	8003776 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_SPI_Transmit+0xee>
 80036d8:	8b7b      	ldrh	r3, [r7, #26]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d145      	bne.n	800376a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	881a      	ldrh	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	1c9a      	adds	r2, r3, #2
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003702:	e032      	b.n	800376a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b02      	cmp	r3, #2
 8003710:	d112      	bne.n	8003738 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	881a      	ldrh	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	1c9a      	adds	r2, r3, #2
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003736:	e018      	b.n	800376a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003738:	f7fd fed2 	bl	80014e0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d803      	bhi.n	8003750 <HAL_SPI_Transmit+0x160>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374e:	d102      	bne.n	8003756 <HAL_SPI_Transmit+0x166>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e082      	b.n	8003870 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1c7      	bne.n	8003704 <HAL_SPI_Transmit+0x114>
 8003774:	e053      	b.n	800381e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_SPI_Transmit+0x194>
 800377e:	8b7b      	ldrh	r3, [r7, #26]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d147      	bne.n	8003814 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	7812      	ldrb	r2, [r2, #0]
 8003790:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037aa:	e033      	b.n	8003814 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d113      	bne.n	80037e2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	330c      	adds	r3, #12
 80037c4:	7812      	ldrb	r2, [r2, #0]
 80037c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80037e0:	e018      	b.n	8003814 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e2:	f7fd fe7d 	bl	80014e0 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d803      	bhi.n	80037fa <HAL_SPI_Transmit+0x20a>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d102      	bne.n	8003800 <HAL_SPI_Transmit+0x210>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e02d      	b.n	8003870 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1c6      	bne.n	80037ac <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	6839      	ldr	r1, [r7, #0]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fbc4 	bl	8003fb0 <SPI_EndRxTxTransaction>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800386e:	2300      	movs	r3, #0
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3720      	adds	r7, #32
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d001      	beq.n	8003898 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
 8003896:	e104      	b.n	8003aa2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038a0:	d112      	bne.n	80038c8 <HAL_SPI_Receive+0x50>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10e      	bne.n	80038c8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2204      	movs	r2, #4
 80038ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f8f3 	bl	8003aaa <HAL_SPI_TransmitReceive>
 80038c4:	4603      	mov	r3, r0
 80038c6:	e0ec      	b.n	8003aa2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c8:	f7fd fe0a 	bl	80014e0 <HAL_GetTick>
 80038cc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_SPI_Receive+0x62>
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0e1      	b.n	8003aa2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_SPI_Receive+0x74>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e0da      	b.n	8003aa2 <HAL_SPI_Receive+0x22a>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2204      	movs	r2, #4
 80038f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800393a:	d10f      	bne.n	800395c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800394a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003966:	2b40      	cmp	r3, #64	@ 0x40
 8003968:	d007      	beq.n	800397a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003978:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d170      	bne.n	8003a64 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003982:	e035      	b.n	80039f0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d115      	bne.n	80039be <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f103 020c 	add.w	r2, r3, #12
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039bc:	e018      	b.n	80039f0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039be:	f7fd fd8f 	bl	80014e0 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d803      	bhi.n	80039d6 <HAL_SPI_Receive+0x15e>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d102      	bne.n	80039dc <HAL_SPI_Receive+0x164>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d109      	bne.n	80039f0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e058      	b.n	8003aa2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1c4      	bne.n	8003984 <HAL_SPI_Receive+0x10c>
 80039fa:	e038      	b.n	8003a6e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d113      	bne.n	8003a32 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	b292      	uxth	r2, r2
 8003a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a30:	e018      	b.n	8003a64 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a32:	f7fd fd55 	bl	80014e0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d803      	bhi.n	8003a4a <HAL_SPI_Receive+0x1d2>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d102      	bne.n	8003a50 <HAL_SPI_Receive+0x1d8>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e01e      	b.n	8003aa2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1c6      	bne.n	80039fc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	6839      	ldr	r1, [r7, #0]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fa4a 	bl	8003f0c <SPI_EndRxTransaction>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b08a      	sub	sp, #40	@ 0x28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003abc:	f7fd fd10 	bl	80014e0 <HAL_GetTick>
 8003ac0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ac8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003ad0:	887b      	ldrh	r3, [r7, #2]
 8003ad2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ad4:	7ffb      	ldrb	r3, [r7, #31]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d00c      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x4a>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ae0:	d106      	bne.n	8003af0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <HAL_SPI_TransmitReceive+0x46>
 8003aea:	7ffb      	ldrb	r3, [r7, #31]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d001      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
 8003af2:	e17f      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_SPI_TransmitReceive+0x5c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_TransmitReceive+0x5c>
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e174      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_SPI_TransmitReceive+0x6e>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e16d      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x34a>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d003      	beq.n	8003b34 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2205      	movs	r2, #5
 8003b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	887a      	ldrh	r2, [r7, #2]
 8003b44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	887a      	ldrh	r2, [r7, #2]
 8003b4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	887a      	ldrh	r2, [r7, #2]
 8003b56:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b74:	2b40      	cmp	r3, #64	@ 0x40
 8003b76:	d007      	beq.n	8003b88 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b90:	d17e      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_TransmitReceive+0xf6>
 8003b9a:	8afb      	ldrh	r3, [r7, #22]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d16c      	bne.n	8003c7a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	881a      	ldrh	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb0:	1c9a      	adds	r2, r3, #2
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc4:	e059      	b.n	8003c7a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d11b      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x162>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d016      	beq.n	8003c0c <HAL_SPI_TransmitReceive+0x162>
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d113      	bne.n	8003c0c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d119      	bne.n	8003c4e <HAL_SPI_TransmitReceive+0x1a4>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d014      	beq.n	8003c4e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2e:	b292      	uxth	r2, r2
 8003c30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c36:	1c9a      	adds	r2, r3, #2
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c4e:	f7fd fc47 	bl	80014e0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d80d      	bhi.n	8003c7a <HAL_SPI_TransmitReceive+0x1d0>
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d009      	beq.n	8003c7a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e0bc      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1a0      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x11c>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d19b      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x11c>
 8003c8e:	e082      	b.n	8003d96 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_SPI_TransmitReceive+0x1f4>
 8003c98:	8afb      	ldrh	r3, [r7, #22]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d171      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc4:	e05d      	b.n	8003d82 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d11c      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x264>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d017      	beq.n	8003d0e <HAL_SPI_TransmitReceive+0x264>
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d114      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d119      	bne.n	8003d50 <HAL_SPI_TransmitReceive+0x2a6>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d014      	beq.n	8003d50 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d50:	f7fd fbc6 	bl	80014e0 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d803      	bhi.n	8003d68 <HAL_SPI_TransmitReceive+0x2be>
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d102      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x2c4>
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e038      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d19c      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x21c>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d197      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d96:	6a3a      	ldr	r2, [r7, #32]
 8003d98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f908 	bl	8003fb0 <SPI_EndRxTxTransaction>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d008      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e01d      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003df2:	2300      	movs	r3, #0
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3728      	adds	r7, #40	@ 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e0c:	f7fd fb68 	bl	80014e0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	4413      	add	r3, r2
 8003e1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e1c:	f7fd fb60 	bl	80014e0 <HAL_GetTick>
 8003e20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e22:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	015b      	lsls	r3, r3, #5
 8003e28:	0d1b      	lsrs	r3, r3, #20
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e32:	e054      	b.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d050      	beq.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e3c:	f7fd fb50 	bl	80014e0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d902      	bls.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d13d      	bne.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e6a:	d111      	bne.n	8003e90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e74:	d004      	beq.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e7e:	d107      	bne.n	8003e90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e98:	d10f      	bne.n	8003eba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e017      	b.n	8003efe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d19b      	bne.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000008 	.word	0x20000008

08003f0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f20:	d111      	bne.n	8003f46 <SPI_EndRxTransaction+0x3a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f2a:	d004      	beq.n	8003f36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f34:	d107      	bne.n	8003f46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f44:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f4e:	d117      	bne.n	8003f80 <SPI_EndRxTransaction+0x74>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f58:	d112      	bne.n	8003f80 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2200      	movs	r2, #0
 8003f62:	2101      	movs	r1, #1
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff ff49 	bl	8003dfc <SPI_WaitFlagStateUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01a      	beq.n	8003fa6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e013      	b.n	8003fa8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	2180      	movs	r1, #128	@ 0x80
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7ff ff36 	bl	8003dfc <SPI_WaitFlagStateUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e000      	b.n	8003fa8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f7ff ff18 	bl	8003dfc <SPI_WaitFlagStateUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	f043 0220 	orr.w	r2, r3, #32
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e013      	b.n	800400a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	@ 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f7ff ff05 	bl	8003dfc <SPI_WaitFlagStateUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffc:	f043 0220 	orr.w	r2, r3, #32
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e000      	b.n	800400a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e041      	b.n	80040a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d106      	bne.n	800403e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fd f93b 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f000 fa5b 	bl	800450c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d001      	beq.n	80040c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e03a      	b.n	800413e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a18      	ldr	r2, [pc, #96]	@ (8004148 <HAL_TIM_Base_Start_IT+0x98>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00e      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x58>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f2:	d009      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x58>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a14      	ldr	r2, [pc, #80]	@ (800414c <HAL_TIM_Base_Start_IT+0x9c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d004      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0x58>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a13      	ldr	r2, [pc, #76]	@ (8004150 <HAL_TIM_Base_Start_IT+0xa0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d111      	bne.n	800412c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b06      	cmp	r3, #6
 8004118:	d010      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412a:	e007      	b.n	800413c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800

08004154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d020      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01b      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0202 	mvn.w	r2, #2
 8004188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f998 	bl	80044d4 <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f98b 	bl	80044c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f99a 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d020      	beq.n	8004204 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01b      	beq.n	8004204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0204 	mvn.w	r2, #4
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f972 	bl	80044d4 <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f965 	bl	80044c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f974 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d020      	beq.n	8004250 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01b      	beq.n	8004250 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0208 	mvn.w	r2, #8
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2204      	movs	r2, #4
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f94c 	bl	80044d4 <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f93f 	bl	80044c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f94e 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b00      	cmp	r3, #0
 8004258:	d020      	beq.n	800429c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01b      	beq.n	800429c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0210 	mvn.w	r2, #16
 800426c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2208      	movs	r2, #8
 8004272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f926 	bl	80044d4 <HAL_TIM_IC_CaptureCallback>
 8004288:	e005      	b.n	8004296 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f919 	bl	80044c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f928 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0201 	mvn.w	r2, #1
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fc fe30 	bl	8000f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa7f 	bl	80047e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8f8 	bl	80044f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00c      	beq.n	800432c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0220 	mvn.w	r2, #32
 8004324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fa52 	bl	80047d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIM_ConfigClockSource+0x1c>
 800434c:	2302      	movs	r3, #2
 800434e:	e0b4      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x186>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800436e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004388:	d03e      	beq.n	8004408 <HAL_TIM_ConfigClockSource+0xd4>
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438e:	f200 8087 	bhi.w	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004396:	f000 8086 	beq.w	80044a6 <HAL_TIM_ConfigClockSource+0x172>
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439e:	d87f      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b70      	cmp	r3, #112	@ 0x70
 80043a2:	d01a      	beq.n	80043da <HAL_TIM_ConfigClockSource+0xa6>
 80043a4:	2b70      	cmp	r3, #112	@ 0x70
 80043a6:	d87b      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b60      	cmp	r3, #96	@ 0x60
 80043aa:	d050      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x11a>
 80043ac:	2b60      	cmp	r3, #96	@ 0x60
 80043ae:	d877      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b0:	2b50      	cmp	r3, #80	@ 0x50
 80043b2:	d03c      	beq.n	800442e <HAL_TIM_ConfigClockSource+0xfa>
 80043b4:	2b50      	cmp	r3, #80	@ 0x50
 80043b6:	d873      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043b8:	2b40      	cmp	r3, #64	@ 0x40
 80043ba:	d058      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x13a>
 80043bc:	2b40      	cmp	r3, #64	@ 0x40
 80043be:	d86f      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c0:	2b30      	cmp	r3, #48	@ 0x30
 80043c2:	d064      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15a>
 80043c4:	2b30      	cmp	r3, #48	@ 0x30
 80043c6:	d86b      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d060      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15a>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d867      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d05c      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15a>
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d05a      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x15a>
 80043d8:	e062      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ea:	f000 f974 	bl	80046d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80043fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	609a      	str	r2, [r3, #8]
      break;
 8004406:	e04f      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	f000 f95d 	bl	80046d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800442a:	609a      	str	r2, [r3, #8]
      break;
 800442c:	e03c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	461a      	mov	r2, r3
 800443c:	f000 f8d4 	bl	80045e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2150      	movs	r1, #80	@ 0x50
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f92b 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 800444c:	e02c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800445a:	461a      	mov	r2, r3
 800445c:	f000 f8f2 	bl	8004644 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2160      	movs	r1, #96	@ 0x60
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f91b 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 800446c:	e01c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	461a      	mov	r2, r3
 800447c:	f000 f8b4 	bl	80045e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2140      	movs	r1, #64	@ 0x40
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f90b 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 800448c:	e00c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f000 f902 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 800449e:	e003      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      break;
 80044a4:	e000      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr
	...

0800450c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a2f      	ldr	r2, [pc, #188]	@ (80045dc <TIM_Base_SetConfig+0xd0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00b      	beq.n	800453c <TIM_Base_SetConfig+0x30>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452a:	d007      	beq.n	800453c <TIM_Base_SetConfig+0x30>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a2c      	ldr	r2, [pc, #176]	@ (80045e0 <TIM_Base_SetConfig+0xd4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0x30>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a2b      	ldr	r2, [pc, #172]	@ (80045e4 <TIM_Base_SetConfig+0xd8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d108      	bne.n	800454e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a22      	ldr	r2, [pc, #136]	@ (80045dc <TIM_Base_SetConfig+0xd0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00b      	beq.n	800456e <TIM_Base_SetConfig+0x62>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455c:	d007      	beq.n	800456e <TIM_Base_SetConfig+0x62>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a1f      	ldr	r2, [pc, #124]	@ (80045e0 <TIM_Base_SetConfig+0xd4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_Base_SetConfig+0x62>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1e      	ldr	r2, [pc, #120]	@ (80045e4 <TIM_Base_SetConfig+0xd8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d108      	bne.n	8004580 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a0d      	ldr	r2, [pc, #52]	@ (80045dc <TIM_Base_SetConfig+0xd0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d103      	bne.n	80045b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	611a      	str	r2, [r3, #16]
  }
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800

080045e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0201 	bic.w	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 030a 	bic.w	r3, r3, #10
 8004624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0210 	bic.w	r2, r3, #16
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800466e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	031b      	lsls	r3, r3, #12
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004680:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	621a      	str	r2, [r3, #32]
}
 8004698:	bf00      	nop
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr

080046a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	f043 0307 	orr.w	r3, r3, #7
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b087      	sub	sp, #28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	021a      	lsls	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	609a      	str	r2, [r3, #8]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr

08004714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004728:	2302      	movs	r3, #2
 800472a:	e046      	b.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a16      	ldr	r2, [pc, #88]	@ (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004778:	d009      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a12      	ldr	r2, [pc, #72]	@ (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a10      	ldr	r2, [pc, #64]	@ (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d10c      	bne.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4313      	orrs	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	40012c00 	.word	0x40012c00
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800

080047d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e042      	b.n	800488c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc fd98 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2224      	movs	r2, #36	@ 0x24
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f971 	bl	8004b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800484c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800485c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800486c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	@ 0x28
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d175      	bne.n	80049a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_UART_Transmit+0x2c>
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e06e      	b.n	80049a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2221      	movs	r2, #33	@ 0x21
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048d2:	f7fc fe05 	bl	80014e0 <HAL_GetTick>
 80048d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ec:	d108      	bne.n	8004900 <HAL_UART_Transmit+0x6c>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d104      	bne.n	8004900 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	e003      	b.n	8004908 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004908:	e02e      	b.n	8004968 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	2180      	movs	r1, #128	@ 0x80
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f848 	bl	80049aa <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e03a      	b.n	80049a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10b      	bne.n	800494a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	3302      	adds	r3, #2
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	e007      	b.n	800495a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	3301      	adds	r3, #1
 8004958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1cb      	bne.n	800490a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	2140      	movs	r1, #64	@ 0x40
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 f814 	bl	80049aa <UART_WaitOnFlagUntilTimeout>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e006      	b.n	80049a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	4613      	mov	r3, r2
 80049b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ba:	e03b      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d037      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c4:	f7fc fd8c 	bl	80014e0 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d302      	bcc.n	80049da <UART_WaitOnFlagUntilTimeout+0x30>
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e03a      	b.n	8004a54 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d023      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b80      	cmp	r3, #128	@ 0x80
 80049f0:	d020      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d01d      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d116      	bne.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f81d 	bl	8004a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2208      	movs	r2, #8
 8004a26:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e00f      	b.n	8004a54 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d0b4      	beq.n	80049bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b095      	sub	sp, #84	@ 0x54
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a84:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a8c:	e841 2300 	strex	r3, r2, [r1]
 8004a90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1e5      	bne.n	8004a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d119      	bne.n	8004b08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f023 0310 	bic.w	r3, r3, #16
 8004aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004af4:	61ba      	str	r2, [r7, #24]
 8004af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6979      	ldr	r1, [r7, #20]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	613b      	str	r3, [r7, #16]
   return(result);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b16:	bf00      	nop
 8004b18:	3754      	adds	r7, #84	@ 0x54
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004b5a:	f023 030c 	bic.w	r3, r3, #12
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	430b      	orrs	r3, r1
 8004b66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2c      	ldr	r2, [pc, #176]	@ (8004c34 <UART_SetConfig+0x114>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d103      	bne.n	8004b90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b88:	f7fe fb10 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	e002      	b.n	8004b96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b90:	f7fe faf8 	bl	8003184 <HAL_RCC_GetPCLK1Freq>
 8004b94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009a      	lsls	r2, r3, #2
 8004ba0:	441a      	add	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	4a22      	ldr	r2, [pc, #136]	@ (8004c38 <UART_SetConfig+0x118>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	095b      	lsrs	r3, r3, #5
 8004bb4:	0119      	lsls	r1, r3, #4
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009a      	lsls	r2, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c38 <UART_SetConfig+0x118>)
 8004bce:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	2064      	movs	r0, #100	@ 0x64
 8004bd6:	fb00 f303 	mul.w	r3, r0, r3
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	3332      	adds	r3, #50	@ 0x32
 8004be0:	4a15      	ldr	r2, [pc, #84]	@ (8004c38 <UART_SetConfig+0x118>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bec:	4419      	add	r1, r3
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009a      	lsls	r2, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <UART_SetConfig+0x118>)
 8004c06:	fba3 0302 	umull	r0, r3, r3, r2
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2064      	movs	r0, #100	@ 0x64
 8004c0e:	fb00 f303 	mul.w	r3, r0, r3
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	3332      	adds	r3, #50	@ 0x32
 8004c18:	4a07      	ldr	r2, [pc, #28]	@ (8004c38 <UART_SetConfig+0x118>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	440a      	add	r2, r1
 8004c2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40013800 	.word	0x40013800
 8004c38:	51eb851f 	.word	0x51eb851f

08004c3c <sniprintf>:
 8004c3c:	b40c      	push	{r2, r3}
 8004c3e:	b530      	push	{r4, r5, lr}
 8004c40:	4b18      	ldr	r3, [pc, #96]	@ (8004ca4 <sniprintf+0x68>)
 8004c42:	1e0c      	subs	r4, r1, #0
 8004c44:	681d      	ldr	r5, [r3, #0]
 8004c46:	b09d      	sub	sp, #116	@ 0x74
 8004c48:	da08      	bge.n	8004c5c <sniprintf+0x20>
 8004c4a:	238b      	movs	r3, #139	@ 0x8b
 8004c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c50:	602b      	str	r3, [r5, #0]
 8004c52:	b01d      	add	sp, #116	@ 0x74
 8004c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c58:	b002      	add	sp, #8
 8004c5a:	4770      	bx	lr
 8004c5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004c60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004c6a:	bf0c      	ite	eq
 8004c6c:	4623      	moveq	r3, r4
 8004c6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	9307      	str	r3, [sp, #28]
 8004c76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c7a:	9002      	str	r0, [sp, #8]
 8004c7c:	9006      	str	r0, [sp, #24]
 8004c7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c82:	4628      	mov	r0, r5
 8004c84:	ab21      	add	r3, sp, #132	@ 0x84
 8004c86:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004c88:	a902      	add	r1, sp, #8
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	f000 f992 	bl	8004fb4 <_svfiprintf_r>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	bfbc      	itt	lt
 8004c94:	238b      	movlt	r3, #139	@ 0x8b
 8004c96:	602b      	strlt	r3, [r5, #0]
 8004c98:	2c00      	cmp	r4, #0
 8004c9a:	d0da      	beq.n	8004c52 <sniprintf+0x16>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	9b02      	ldr	r3, [sp, #8]
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e7d6      	b.n	8004c52 <sniprintf+0x16>
 8004ca4:	20000014 	.word	0x20000014

08004ca8 <memset>:
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4402      	add	r2, r0
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d100      	bne.n	8004cb2 <memset+0xa>
 8004cb0:	4770      	bx	lr
 8004cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb6:	e7f9      	b.n	8004cac <memset+0x4>

08004cb8 <__errno>:
 8004cb8:	4b01      	ldr	r3, [pc, #4]	@ (8004cc0 <__errno+0x8>)
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000014 	.word	0x20000014

08004cc4 <__libc_init_array>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	4d0c      	ldr	r5, [pc, #48]	@ (8004cfc <__libc_init_array+0x38>)
 8004cca:	4c0d      	ldr	r4, [pc, #52]	@ (8004d00 <__libc_init_array+0x3c>)
 8004ccc:	1b64      	subs	r4, r4, r5
 8004cce:	10a4      	asrs	r4, r4, #2
 8004cd0:	42a6      	cmp	r6, r4
 8004cd2:	d109      	bne.n	8004ce8 <__libc_init_array+0x24>
 8004cd4:	f000 fc76 	bl	80055c4 <_init>
 8004cd8:	2600      	movs	r6, #0
 8004cda:	4d0a      	ldr	r5, [pc, #40]	@ (8004d04 <__libc_init_array+0x40>)
 8004cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8004d08 <__libc_init_array+0x44>)
 8004cde:	1b64      	subs	r4, r4, r5
 8004ce0:	10a4      	asrs	r4, r4, #2
 8004ce2:	42a6      	cmp	r6, r4
 8004ce4:	d105      	bne.n	8004cf2 <__libc_init_array+0x2e>
 8004ce6:	bd70      	pop	{r4, r5, r6, pc}
 8004ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cec:	4798      	blx	r3
 8004cee:	3601      	adds	r6, #1
 8004cf0:	e7ee      	b.n	8004cd0 <__libc_init_array+0xc>
 8004cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf6:	4798      	blx	r3
 8004cf8:	3601      	adds	r6, #1
 8004cfa:	e7f2      	b.n	8004ce2 <__libc_init_array+0x1e>
 8004cfc:	08005668 	.word	0x08005668
 8004d00:	08005668 	.word	0x08005668
 8004d04:	08005668 	.word	0x08005668
 8004d08:	0800566c 	.word	0x0800566c

08004d0c <__retarget_lock_acquire_recursive>:
 8004d0c:	4770      	bx	lr

08004d0e <__retarget_lock_release_recursive>:
 8004d0e:	4770      	bx	lr

08004d10 <_free_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	4605      	mov	r5, r0
 8004d14:	2900      	cmp	r1, #0
 8004d16:	d040      	beq.n	8004d9a <_free_r+0x8a>
 8004d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d1c:	1f0c      	subs	r4, r1, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bfb8      	it	lt
 8004d22:	18e4      	addlt	r4, r4, r3
 8004d24:	f000 f8de 	bl	8004ee4 <__malloc_lock>
 8004d28:	4a1c      	ldr	r2, [pc, #112]	@ (8004d9c <_free_r+0x8c>)
 8004d2a:	6813      	ldr	r3, [r2, #0]
 8004d2c:	b933      	cbnz	r3, 8004d3c <_free_r+0x2c>
 8004d2e:	6063      	str	r3, [r4, #4]
 8004d30:	6014      	str	r4, [r2, #0]
 8004d32:	4628      	mov	r0, r5
 8004d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d38:	f000 b8da 	b.w	8004ef0 <__malloc_unlock>
 8004d3c:	42a3      	cmp	r3, r4
 8004d3e:	d908      	bls.n	8004d52 <_free_r+0x42>
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	1821      	adds	r1, r4, r0
 8004d44:	428b      	cmp	r3, r1
 8004d46:	bf01      	itttt	eq
 8004d48:	6819      	ldreq	r1, [r3, #0]
 8004d4a:	685b      	ldreq	r3, [r3, #4]
 8004d4c:	1809      	addeq	r1, r1, r0
 8004d4e:	6021      	streq	r1, [r4, #0]
 8004d50:	e7ed      	b.n	8004d2e <_free_r+0x1e>
 8004d52:	461a      	mov	r2, r3
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	b10b      	cbz	r3, 8004d5c <_free_r+0x4c>
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	d9fa      	bls.n	8004d52 <_free_r+0x42>
 8004d5c:	6811      	ldr	r1, [r2, #0]
 8004d5e:	1850      	adds	r0, r2, r1
 8004d60:	42a0      	cmp	r0, r4
 8004d62:	d10b      	bne.n	8004d7c <_free_r+0x6c>
 8004d64:	6820      	ldr	r0, [r4, #0]
 8004d66:	4401      	add	r1, r0
 8004d68:	1850      	adds	r0, r2, r1
 8004d6a:	4283      	cmp	r3, r0
 8004d6c:	6011      	str	r1, [r2, #0]
 8004d6e:	d1e0      	bne.n	8004d32 <_free_r+0x22>
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4408      	add	r0, r1
 8004d76:	6010      	str	r0, [r2, #0]
 8004d78:	6053      	str	r3, [r2, #4]
 8004d7a:	e7da      	b.n	8004d32 <_free_r+0x22>
 8004d7c:	d902      	bls.n	8004d84 <_free_r+0x74>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	602b      	str	r3, [r5, #0]
 8004d82:	e7d6      	b.n	8004d32 <_free_r+0x22>
 8004d84:	6820      	ldr	r0, [r4, #0]
 8004d86:	1821      	adds	r1, r4, r0
 8004d88:	428b      	cmp	r3, r1
 8004d8a:	bf01      	itttt	eq
 8004d8c:	6819      	ldreq	r1, [r3, #0]
 8004d8e:	685b      	ldreq	r3, [r3, #4]
 8004d90:	1809      	addeq	r1, r1, r0
 8004d92:	6021      	streq	r1, [r4, #0]
 8004d94:	6063      	str	r3, [r4, #4]
 8004d96:	6054      	str	r4, [r2, #4]
 8004d98:	e7cb      	b.n	8004d32 <_free_r+0x22>
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	20000330 	.word	0x20000330

08004da0 <sbrk_aligned>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	4e0f      	ldr	r6, [pc, #60]	@ (8004de0 <sbrk_aligned+0x40>)
 8004da4:	460c      	mov	r4, r1
 8004da6:	6831      	ldr	r1, [r6, #0]
 8004da8:	4605      	mov	r5, r0
 8004daa:	b911      	cbnz	r1, 8004db2 <sbrk_aligned+0x12>
 8004dac:	f000 fba8 	bl	8005500 <_sbrk_r>
 8004db0:	6030      	str	r0, [r6, #0]
 8004db2:	4621      	mov	r1, r4
 8004db4:	4628      	mov	r0, r5
 8004db6:	f000 fba3 	bl	8005500 <_sbrk_r>
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	d103      	bne.n	8004dc6 <sbrk_aligned+0x26>
 8004dbe:	f04f 34ff 	mov.w	r4, #4294967295
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	bd70      	pop	{r4, r5, r6, pc}
 8004dc6:	1cc4      	adds	r4, r0, #3
 8004dc8:	f024 0403 	bic.w	r4, r4, #3
 8004dcc:	42a0      	cmp	r0, r4
 8004dce:	d0f8      	beq.n	8004dc2 <sbrk_aligned+0x22>
 8004dd0:	1a21      	subs	r1, r4, r0
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f000 fb94 	bl	8005500 <_sbrk_r>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d1f2      	bne.n	8004dc2 <sbrk_aligned+0x22>
 8004ddc:	e7ef      	b.n	8004dbe <sbrk_aligned+0x1e>
 8004dde:	bf00      	nop
 8004de0:	2000032c 	.word	0x2000032c

08004de4 <_malloc_r>:
 8004de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de8:	1ccd      	adds	r5, r1, #3
 8004dea:	f025 0503 	bic.w	r5, r5, #3
 8004dee:	3508      	adds	r5, #8
 8004df0:	2d0c      	cmp	r5, #12
 8004df2:	bf38      	it	cc
 8004df4:	250c      	movcc	r5, #12
 8004df6:	2d00      	cmp	r5, #0
 8004df8:	4606      	mov	r6, r0
 8004dfa:	db01      	blt.n	8004e00 <_malloc_r+0x1c>
 8004dfc:	42a9      	cmp	r1, r5
 8004dfe:	d904      	bls.n	8004e0a <_malloc_r+0x26>
 8004e00:	230c      	movs	r3, #12
 8004e02:	6033      	str	r3, [r6, #0]
 8004e04:	2000      	movs	r0, #0
 8004e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ee0 <_malloc_r+0xfc>
 8004e0e:	f000 f869 	bl	8004ee4 <__malloc_lock>
 8004e12:	f8d8 3000 	ldr.w	r3, [r8]
 8004e16:	461c      	mov	r4, r3
 8004e18:	bb44      	cbnz	r4, 8004e6c <_malloc_r+0x88>
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	f7ff ffbf 	bl	8004da0 <sbrk_aligned>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	4604      	mov	r4, r0
 8004e26:	d158      	bne.n	8004eda <_malloc_r+0xf6>
 8004e28:	f8d8 4000 	ldr.w	r4, [r8]
 8004e2c:	4627      	mov	r7, r4
 8004e2e:	2f00      	cmp	r7, #0
 8004e30:	d143      	bne.n	8004eba <_malloc_r+0xd6>
 8004e32:	2c00      	cmp	r4, #0
 8004e34:	d04b      	beq.n	8004ece <_malloc_r+0xea>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	4639      	mov	r1, r7
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	eb04 0903 	add.w	r9, r4, r3
 8004e40:	f000 fb5e 	bl	8005500 <_sbrk_r>
 8004e44:	4581      	cmp	r9, r0
 8004e46:	d142      	bne.n	8004ece <_malloc_r+0xea>
 8004e48:	6821      	ldr	r1, [r4, #0]
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	1a6d      	subs	r5, r5, r1
 8004e4e:	4629      	mov	r1, r5
 8004e50:	f7ff ffa6 	bl	8004da0 <sbrk_aligned>
 8004e54:	3001      	adds	r0, #1
 8004e56:	d03a      	beq.n	8004ece <_malloc_r+0xea>
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	442b      	add	r3, r5
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	bb62      	cbnz	r2, 8004ec0 <_malloc_r+0xdc>
 8004e66:	f8c8 7000 	str.w	r7, [r8]
 8004e6a:	e00f      	b.n	8004e8c <_malloc_r+0xa8>
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	1b52      	subs	r2, r2, r5
 8004e70:	d420      	bmi.n	8004eb4 <_malloc_r+0xd0>
 8004e72:	2a0b      	cmp	r2, #11
 8004e74:	d917      	bls.n	8004ea6 <_malloc_r+0xc2>
 8004e76:	1961      	adds	r1, r4, r5
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	6025      	str	r5, [r4, #0]
 8004e7c:	bf18      	it	ne
 8004e7e:	6059      	strne	r1, [r3, #4]
 8004e80:	6863      	ldr	r3, [r4, #4]
 8004e82:	bf08      	it	eq
 8004e84:	f8c8 1000 	streq.w	r1, [r8]
 8004e88:	5162      	str	r2, [r4, r5]
 8004e8a:	604b      	str	r3, [r1, #4]
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f000 f82f 	bl	8004ef0 <__malloc_unlock>
 8004e92:	f104 000b 	add.w	r0, r4, #11
 8004e96:	1d23      	adds	r3, r4, #4
 8004e98:	f020 0007 	bic.w	r0, r0, #7
 8004e9c:	1ac2      	subs	r2, r0, r3
 8004e9e:	bf1c      	itt	ne
 8004ea0:	1a1b      	subne	r3, r3, r0
 8004ea2:	50a3      	strne	r3, [r4, r2]
 8004ea4:	e7af      	b.n	8004e06 <_malloc_r+0x22>
 8004ea6:	6862      	ldr	r2, [r4, #4]
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	bf0c      	ite	eq
 8004eac:	f8c8 2000 	streq.w	r2, [r8]
 8004eb0:	605a      	strne	r2, [r3, #4]
 8004eb2:	e7eb      	b.n	8004e8c <_malloc_r+0xa8>
 8004eb4:	4623      	mov	r3, r4
 8004eb6:	6864      	ldr	r4, [r4, #4]
 8004eb8:	e7ae      	b.n	8004e18 <_malloc_r+0x34>
 8004eba:	463c      	mov	r4, r7
 8004ebc:	687f      	ldr	r7, [r7, #4]
 8004ebe:	e7b6      	b.n	8004e2e <_malloc_r+0x4a>
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	42a3      	cmp	r3, r4
 8004ec6:	d1fb      	bne.n	8004ec0 <_malloc_r+0xdc>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	6053      	str	r3, [r2, #4]
 8004ecc:	e7de      	b.n	8004e8c <_malloc_r+0xa8>
 8004ece:	230c      	movs	r3, #12
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	6033      	str	r3, [r6, #0]
 8004ed4:	f000 f80c 	bl	8004ef0 <__malloc_unlock>
 8004ed8:	e794      	b.n	8004e04 <_malloc_r+0x20>
 8004eda:	6005      	str	r5, [r0, #0]
 8004edc:	e7d6      	b.n	8004e8c <_malloc_r+0xa8>
 8004ede:	bf00      	nop
 8004ee0:	20000330 	.word	0x20000330

08004ee4 <__malloc_lock>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	@ (8004eec <__malloc_lock+0x8>)
 8004ee6:	f7ff bf11 	b.w	8004d0c <__retarget_lock_acquire_recursive>
 8004eea:	bf00      	nop
 8004eec:	20000328 	.word	0x20000328

08004ef0 <__malloc_unlock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	@ (8004ef8 <__malloc_unlock+0x8>)
 8004ef2:	f7ff bf0c 	b.w	8004d0e <__retarget_lock_release_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	20000328 	.word	0x20000328

08004efc <__ssputs_r>:
 8004efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f00:	461f      	mov	r7, r3
 8004f02:	688e      	ldr	r6, [r1, #8]
 8004f04:	4682      	mov	sl, r0
 8004f06:	42be      	cmp	r6, r7
 8004f08:	460c      	mov	r4, r1
 8004f0a:	4690      	mov	r8, r2
 8004f0c:	680b      	ldr	r3, [r1, #0]
 8004f0e:	d82d      	bhi.n	8004f6c <__ssputs_r+0x70>
 8004f10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f18:	d026      	beq.n	8004f68 <__ssputs_r+0x6c>
 8004f1a:	6965      	ldr	r5, [r4, #20]
 8004f1c:	6909      	ldr	r1, [r1, #16]
 8004f1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f22:	eba3 0901 	sub.w	r9, r3, r1
 8004f26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f2a:	1c7b      	adds	r3, r7, #1
 8004f2c:	444b      	add	r3, r9
 8004f2e:	106d      	asrs	r5, r5, #1
 8004f30:	429d      	cmp	r5, r3
 8004f32:	bf38      	it	cc
 8004f34:	461d      	movcc	r5, r3
 8004f36:	0553      	lsls	r3, r2, #21
 8004f38:	d527      	bpl.n	8004f8a <__ssputs_r+0x8e>
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f7ff ff52 	bl	8004de4 <_malloc_r>
 8004f40:	4606      	mov	r6, r0
 8004f42:	b360      	cbz	r0, 8004f9e <__ssputs_r+0xa2>
 8004f44:	464a      	mov	r2, r9
 8004f46:	6921      	ldr	r1, [r4, #16]
 8004f48:	f000 faf8 	bl	800553c <memcpy>
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	6126      	str	r6, [r4, #16]
 8004f5a:	444e      	add	r6, r9
 8004f5c:	6026      	str	r6, [r4, #0]
 8004f5e:	463e      	mov	r6, r7
 8004f60:	6165      	str	r5, [r4, #20]
 8004f62:	eba5 0509 	sub.w	r5, r5, r9
 8004f66:	60a5      	str	r5, [r4, #8]
 8004f68:	42be      	cmp	r6, r7
 8004f6a:	d900      	bls.n	8004f6e <__ssputs_r+0x72>
 8004f6c:	463e      	mov	r6, r7
 8004f6e:	4632      	mov	r2, r6
 8004f70:	4641      	mov	r1, r8
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	f000 faaa 	bl	80054cc <memmove>
 8004f78:	2000      	movs	r0, #0
 8004f7a:	68a3      	ldr	r3, [r4, #8]
 8004f7c:	1b9b      	subs	r3, r3, r6
 8004f7e:	60a3      	str	r3, [r4, #8]
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	4433      	add	r3, r6
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8a:	462a      	mov	r2, r5
 8004f8c:	f000 fae4 	bl	8005558 <_realloc_r>
 8004f90:	4606      	mov	r6, r0
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d1e0      	bne.n	8004f58 <__ssputs_r+0x5c>
 8004f96:	4650      	mov	r0, sl
 8004f98:	6921      	ldr	r1, [r4, #16]
 8004f9a:	f7ff feb9 	bl	8004d10 <_free_r>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	f8ca 3000 	str.w	r3, [sl]
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8004faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	e7e9      	b.n	8004f86 <__ssputs_r+0x8a>
	...

08004fb4 <_svfiprintf_r>:
 8004fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb8:	4698      	mov	r8, r3
 8004fba:	898b      	ldrh	r3, [r1, #12]
 8004fbc:	4607      	mov	r7, r0
 8004fbe:	061b      	lsls	r3, r3, #24
 8004fc0:	460d      	mov	r5, r1
 8004fc2:	4614      	mov	r4, r2
 8004fc4:	b09d      	sub	sp, #116	@ 0x74
 8004fc6:	d510      	bpl.n	8004fea <_svfiprintf_r+0x36>
 8004fc8:	690b      	ldr	r3, [r1, #16]
 8004fca:	b973      	cbnz	r3, 8004fea <_svfiprintf_r+0x36>
 8004fcc:	2140      	movs	r1, #64	@ 0x40
 8004fce:	f7ff ff09 	bl	8004de4 <_malloc_r>
 8004fd2:	6028      	str	r0, [r5, #0]
 8004fd4:	6128      	str	r0, [r5, #16]
 8004fd6:	b930      	cbnz	r0, 8004fe6 <_svfiprintf_r+0x32>
 8004fd8:	230c      	movs	r3, #12
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe0:	b01d      	add	sp, #116	@ 0x74
 8004fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe6:	2340      	movs	r3, #64	@ 0x40
 8004fe8:	616b      	str	r3, [r5, #20]
 8004fea:	2300      	movs	r3, #0
 8004fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fee:	2320      	movs	r3, #32
 8004ff0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ff4:	2330      	movs	r3, #48	@ 0x30
 8004ff6:	f04f 0901 	mov.w	r9, #1
 8004ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ffe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005198 <_svfiprintf_r+0x1e4>
 8005002:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005006:	4623      	mov	r3, r4
 8005008:	469a      	mov	sl, r3
 800500a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800500e:	b10a      	cbz	r2, 8005014 <_svfiprintf_r+0x60>
 8005010:	2a25      	cmp	r2, #37	@ 0x25
 8005012:	d1f9      	bne.n	8005008 <_svfiprintf_r+0x54>
 8005014:	ebba 0b04 	subs.w	fp, sl, r4
 8005018:	d00b      	beq.n	8005032 <_svfiprintf_r+0x7e>
 800501a:	465b      	mov	r3, fp
 800501c:	4622      	mov	r2, r4
 800501e:	4629      	mov	r1, r5
 8005020:	4638      	mov	r0, r7
 8005022:	f7ff ff6b 	bl	8004efc <__ssputs_r>
 8005026:	3001      	adds	r0, #1
 8005028:	f000 80a7 	beq.w	800517a <_svfiprintf_r+0x1c6>
 800502c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800502e:	445a      	add	r2, fp
 8005030:	9209      	str	r2, [sp, #36]	@ 0x24
 8005032:	f89a 3000 	ldrb.w	r3, [sl]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 809f 	beq.w	800517a <_svfiprintf_r+0x1c6>
 800503c:	2300      	movs	r3, #0
 800503e:	f04f 32ff 	mov.w	r2, #4294967295
 8005042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005046:	f10a 0a01 	add.w	sl, sl, #1
 800504a:	9304      	str	r3, [sp, #16]
 800504c:	9307      	str	r3, [sp, #28]
 800504e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005052:	931a      	str	r3, [sp, #104]	@ 0x68
 8005054:	4654      	mov	r4, sl
 8005056:	2205      	movs	r2, #5
 8005058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505c:	484e      	ldr	r0, [pc, #312]	@ (8005198 <_svfiprintf_r+0x1e4>)
 800505e:	f000 fa5f 	bl	8005520 <memchr>
 8005062:	9a04      	ldr	r2, [sp, #16]
 8005064:	b9d8      	cbnz	r0, 800509e <_svfiprintf_r+0xea>
 8005066:	06d0      	lsls	r0, r2, #27
 8005068:	bf44      	itt	mi
 800506a:	2320      	movmi	r3, #32
 800506c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005070:	0711      	lsls	r1, r2, #28
 8005072:	bf44      	itt	mi
 8005074:	232b      	movmi	r3, #43	@ 0x2b
 8005076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800507a:	f89a 3000 	ldrb.w	r3, [sl]
 800507e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005080:	d015      	beq.n	80050ae <_svfiprintf_r+0xfa>
 8005082:	4654      	mov	r4, sl
 8005084:	2000      	movs	r0, #0
 8005086:	f04f 0c0a 	mov.w	ip, #10
 800508a:	9a07      	ldr	r2, [sp, #28]
 800508c:	4621      	mov	r1, r4
 800508e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005092:	3b30      	subs	r3, #48	@ 0x30
 8005094:	2b09      	cmp	r3, #9
 8005096:	d94b      	bls.n	8005130 <_svfiprintf_r+0x17c>
 8005098:	b1b0      	cbz	r0, 80050c8 <_svfiprintf_r+0x114>
 800509a:	9207      	str	r2, [sp, #28]
 800509c:	e014      	b.n	80050c8 <_svfiprintf_r+0x114>
 800509e:	eba0 0308 	sub.w	r3, r0, r8
 80050a2:	fa09 f303 	lsl.w	r3, r9, r3
 80050a6:	4313      	orrs	r3, r2
 80050a8:	46a2      	mov	sl, r4
 80050aa:	9304      	str	r3, [sp, #16]
 80050ac:	e7d2      	b.n	8005054 <_svfiprintf_r+0xa0>
 80050ae:	9b03      	ldr	r3, [sp, #12]
 80050b0:	1d19      	adds	r1, r3, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	9103      	str	r1, [sp, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bfbb      	ittet	lt
 80050ba:	425b      	neglt	r3, r3
 80050bc:	f042 0202 	orrlt.w	r2, r2, #2
 80050c0:	9307      	strge	r3, [sp, #28]
 80050c2:	9307      	strlt	r3, [sp, #28]
 80050c4:	bfb8      	it	lt
 80050c6:	9204      	strlt	r2, [sp, #16]
 80050c8:	7823      	ldrb	r3, [r4, #0]
 80050ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80050cc:	d10a      	bne.n	80050e4 <_svfiprintf_r+0x130>
 80050ce:	7863      	ldrb	r3, [r4, #1]
 80050d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80050d2:	d132      	bne.n	800513a <_svfiprintf_r+0x186>
 80050d4:	9b03      	ldr	r3, [sp, #12]
 80050d6:	3402      	adds	r4, #2
 80050d8:	1d1a      	adds	r2, r3, #4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	9203      	str	r2, [sp, #12]
 80050de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050e2:	9305      	str	r3, [sp, #20]
 80050e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800519c <_svfiprintf_r+0x1e8>
 80050e8:	2203      	movs	r2, #3
 80050ea:	4650      	mov	r0, sl
 80050ec:	7821      	ldrb	r1, [r4, #0]
 80050ee:	f000 fa17 	bl	8005520 <memchr>
 80050f2:	b138      	cbz	r0, 8005104 <_svfiprintf_r+0x150>
 80050f4:	2240      	movs	r2, #64	@ 0x40
 80050f6:	9b04      	ldr	r3, [sp, #16]
 80050f8:	eba0 000a 	sub.w	r0, r0, sl
 80050fc:	4082      	lsls	r2, r0
 80050fe:	4313      	orrs	r3, r2
 8005100:	3401      	adds	r4, #1
 8005102:	9304      	str	r3, [sp, #16]
 8005104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005108:	2206      	movs	r2, #6
 800510a:	4825      	ldr	r0, [pc, #148]	@ (80051a0 <_svfiprintf_r+0x1ec>)
 800510c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005110:	f000 fa06 	bl	8005520 <memchr>
 8005114:	2800      	cmp	r0, #0
 8005116:	d036      	beq.n	8005186 <_svfiprintf_r+0x1d2>
 8005118:	4b22      	ldr	r3, [pc, #136]	@ (80051a4 <_svfiprintf_r+0x1f0>)
 800511a:	bb1b      	cbnz	r3, 8005164 <_svfiprintf_r+0x1b0>
 800511c:	9b03      	ldr	r3, [sp, #12]
 800511e:	3307      	adds	r3, #7
 8005120:	f023 0307 	bic.w	r3, r3, #7
 8005124:	3308      	adds	r3, #8
 8005126:	9303      	str	r3, [sp, #12]
 8005128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800512a:	4433      	add	r3, r6
 800512c:	9309      	str	r3, [sp, #36]	@ 0x24
 800512e:	e76a      	b.n	8005006 <_svfiprintf_r+0x52>
 8005130:	460c      	mov	r4, r1
 8005132:	2001      	movs	r0, #1
 8005134:	fb0c 3202 	mla	r2, ip, r2, r3
 8005138:	e7a8      	b.n	800508c <_svfiprintf_r+0xd8>
 800513a:	2300      	movs	r3, #0
 800513c:	f04f 0c0a 	mov.w	ip, #10
 8005140:	4619      	mov	r1, r3
 8005142:	3401      	adds	r4, #1
 8005144:	9305      	str	r3, [sp, #20]
 8005146:	4620      	mov	r0, r4
 8005148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800514c:	3a30      	subs	r2, #48	@ 0x30
 800514e:	2a09      	cmp	r2, #9
 8005150:	d903      	bls.n	800515a <_svfiprintf_r+0x1a6>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0c6      	beq.n	80050e4 <_svfiprintf_r+0x130>
 8005156:	9105      	str	r1, [sp, #20]
 8005158:	e7c4      	b.n	80050e4 <_svfiprintf_r+0x130>
 800515a:	4604      	mov	r4, r0
 800515c:	2301      	movs	r3, #1
 800515e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005162:	e7f0      	b.n	8005146 <_svfiprintf_r+0x192>
 8005164:	ab03      	add	r3, sp, #12
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	462a      	mov	r2, r5
 800516a:	4638      	mov	r0, r7
 800516c:	4b0e      	ldr	r3, [pc, #56]	@ (80051a8 <_svfiprintf_r+0x1f4>)
 800516e:	a904      	add	r1, sp, #16
 8005170:	f3af 8000 	nop.w
 8005174:	1c42      	adds	r2, r0, #1
 8005176:	4606      	mov	r6, r0
 8005178:	d1d6      	bne.n	8005128 <_svfiprintf_r+0x174>
 800517a:	89ab      	ldrh	r3, [r5, #12]
 800517c:	065b      	lsls	r3, r3, #25
 800517e:	f53f af2d 	bmi.w	8004fdc <_svfiprintf_r+0x28>
 8005182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005184:	e72c      	b.n	8004fe0 <_svfiprintf_r+0x2c>
 8005186:	ab03      	add	r3, sp, #12
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	462a      	mov	r2, r5
 800518c:	4638      	mov	r0, r7
 800518e:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <_svfiprintf_r+0x1f4>)
 8005190:	a904      	add	r1, sp, #16
 8005192:	f000 f87d 	bl	8005290 <_printf_i>
 8005196:	e7ed      	b.n	8005174 <_svfiprintf_r+0x1c0>
 8005198:	08005632 	.word	0x08005632
 800519c:	08005638 	.word	0x08005638
 80051a0:	0800563c 	.word	0x0800563c
 80051a4:	00000000 	.word	0x00000000
 80051a8:	08004efd 	.word	0x08004efd

080051ac <_printf_common>:
 80051ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b0:	4616      	mov	r6, r2
 80051b2:	4698      	mov	r8, r3
 80051b4:	688a      	ldr	r2, [r1, #8]
 80051b6:	690b      	ldr	r3, [r1, #16]
 80051b8:	4607      	mov	r7, r0
 80051ba:	4293      	cmp	r3, r2
 80051bc:	bfb8      	it	lt
 80051be:	4613      	movlt	r3, r2
 80051c0:	6033      	str	r3, [r6, #0]
 80051c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051c6:	460c      	mov	r4, r1
 80051c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051cc:	b10a      	cbz	r2, 80051d2 <_printf_common+0x26>
 80051ce:	3301      	adds	r3, #1
 80051d0:	6033      	str	r3, [r6, #0]
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	0699      	lsls	r1, r3, #26
 80051d6:	bf42      	ittt	mi
 80051d8:	6833      	ldrmi	r3, [r6, #0]
 80051da:	3302      	addmi	r3, #2
 80051dc:	6033      	strmi	r3, [r6, #0]
 80051de:	6825      	ldr	r5, [r4, #0]
 80051e0:	f015 0506 	ands.w	r5, r5, #6
 80051e4:	d106      	bne.n	80051f4 <_printf_common+0x48>
 80051e6:	f104 0a19 	add.w	sl, r4, #25
 80051ea:	68e3      	ldr	r3, [r4, #12]
 80051ec:	6832      	ldr	r2, [r6, #0]
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	42ab      	cmp	r3, r5
 80051f2:	dc2b      	bgt.n	800524c <_printf_common+0xa0>
 80051f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051f8:	6822      	ldr	r2, [r4, #0]
 80051fa:	3b00      	subs	r3, #0
 80051fc:	bf18      	it	ne
 80051fe:	2301      	movne	r3, #1
 8005200:	0692      	lsls	r2, r2, #26
 8005202:	d430      	bmi.n	8005266 <_printf_common+0xba>
 8005204:	4641      	mov	r1, r8
 8005206:	4638      	mov	r0, r7
 8005208:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800520c:	47c8      	blx	r9
 800520e:	3001      	adds	r0, #1
 8005210:	d023      	beq.n	800525a <_printf_common+0xae>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	6922      	ldr	r2, [r4, #16]
 8005216:	f003 0306 	and.w	r3, r3, #6
 800521a:	2b04      	cmp	r3, #4
 800521c:	bf14      	ite	ne
 800521e:	2500      	movne	r5, #0
 8005220:	6833      	ldreq	r3, [r6, #0]
 8005222:	f04f 0600 	mov.w	r6, #0
 8005226:	bf08      	it	eq
 8005228:	68e5      	ldreq	r5, [r4, #12]
 800522a:	f104 041a 	add.w	r4, r4, #26
 800522e:	bf08      	it	eq
 8005230:	1aed      	subeq	r5, r5, r3
 8005232:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005236:	bf08      	it	eq
 8005238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800523c:	4293      	cmp	r3, r2
 800523e:	bfc4      	itt	gt
 8005240:	1a9b      	subgt	r3, r3, r2
 8005242:	18ed      	addgt	r5, r5, r3
 8005244:	42b5      	cmp	r5, r6
 8005246:	d11a      	bne.n	800527e <_printf_common+0xd2>
 8005248:	2000      	movs	r0, #0
 800524a:	e008      	b.n	800525e <_printf_common+0xb2>
 800524c:	2301      	movs	r3, #1
 800524e:	4652      	mov	r2, sl
 8005250:	4641      	mov	r1, r8
 8005252:	4638      	mov	r0, r7
 8005254:	47c8      	blx	r9
 8005256:	3001      	adds	r0, #1
 8005258:	d103      	bne.n	8005262 <_printf_common+0xb6>
 800525a:	f04f 30ff 	mov.w	r0, #4294967295
 800525e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005262:	3501      	adds	r5, #1
 8005264:	e7c1      	b.n	80051ea <_printf_common+0x3e>
 8005266:	2030      	movs	r0, #48	@ 0x30
 8005268:	18e1      	adds	r1, r4, r3
 800526a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005274:	4422      	add	r2, r4
 8005276:	3302      	adds	r3, #2
 8005278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800527c:	e7c2      	b.n	8005204 <_printf_common+0x58>
 800527e:	2301      	movs	r3, #1
 8005280:	4622      	mov	r2, r4
 8005282:	4641      	mov	r1, r8
 8005284:	4638      	mov	r0, r7
 8005286:	47c8      	blx	r9
 8005288:	3001      	adds	r0, #1
 800528a:	d0e6      	beq.n	800525a <_printf_common+0xae>
 800528c:	3601      	adds	r6, #1
 800528e:	e7d9      	b.n	8005244 <_printf_common+0x98>

08005290 <_printf_i>:
 8005290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	7e0f      	ldrb	r7, [r1, #24]
 8005296:	4691      	mov	r9, r2
 8005298:	2f78      	cmp	r7, #120	@ 0x78
 800529a:	4680      	mov	r8, r0
 800529c:	460c      	mov	r4, r1
 800529e:	469a      	mov	sl, r3
 80052a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052a6:	d807      	bhi.n	80052b8 <_printf_i+0x28>
 80052a8:	2f62      	cmp	r7, #98	@ 0x62
 80052aa:	d80a      	bhi.n	80052c2 <_printf_i+0x32>
 80052ac:	2f00      	cmp	r7, #0
 80052ae:	f000 80d1 	beq.w	8005454 <_printf_i+0x1c4>
 80052b2:	2f58      	cmp	r7, #88	@ 0x58
 80052b4:	f000 80b8 	beq.w	8005428 <_printf_i+0x198>
 80052b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052c0:	e03a      	b.n	8005338 <_printf_i+0xa8>
 80052c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052c6:	2b15      	cmp	r3, #21
 80052c8:	d8f6      	bhi.n	80052b8 <_printf_i+0x28>
 80052ca:	a101      	add	r1, pc, #4	@ (adr r1, 80052d0 <_printf_i+0x40>)
 80052cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052d0:	08005329 	.word	0x08005329
 80052d4:	0800533d 	.word	0x0800533d
 80052d8:	080052b9 	.word	0x080052b9
 80052dc:	080052b9 	.word	0x080052b9
 80052e0:	080052b9 	.word	0x080052b9
 80052e4:	080052b9 	.word	0x080052b9
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	080052b9 	.word	0x080052b9
 80052f0:	080052b9 	.word	0x080052b9
 80052f4:	080052b9 	.word	0x080052b9
 80052f8:	080052b9 	.word	0x080052b9
 80052fc:	0800543b 	.word	0x0800543b
 8005300:	08005367 	.word	0x08005367
 8005304:	080053f5 	.word	0x080053f5
 8005308:	080052b9 	.word	0x080052b9
 800530c:	080052b9 	.word	0x080052b9
 8005310:	0800545d 	.word	0x0800545d
 8005314:	080052b9 	.word	0x080052b9
 8005318:	08005367 	.word	0x08005367
 800531c:	080052b9 	.word	0x080052b9
 8005320:	080052b9 	.word	0x080052b9
 8005324:	080053fd 	.word	0x080053fd
 8005328:	6833      	ldr	r3, [r6, #0]
 800532a:	1d1a      	adds	r2, r3, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6032      	str	r2, [r6, #0]
 8005330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005338:	2301      	movs	r3, #1
 800533a:	e09c      	b.n	8005476 <_printf_i+0x1e6>
 800533c:	6833      	ldr	r3, [r6, #0]
 800533e:	6820      	ldr	r0, [r4, #0]
 8005340:	1d19      	adds	r1, r3, #4
 8005342:	6031      	str	r1, [r6, #0]
 8005344:	0606      	lsls	r6, r0, #24
 8005346:	d501      	bpl.n	800534c <_printf_i+0xbc>
 8005348:	681d      	ldr	r5, [r3, #0]
 800534a:	e003      	b.n	8005354 <_printf_i+0xc4>
 800534c:	0645      	lsls	r5, r0, #25
 800534e:	d5fb      	bpl.n	8005348 <_printf_i+0xb8>
 8005350:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005354:	2d00      	cmp	r5, #0
 8005356:	da03      	bge.n	8005360 <_printf_i+0xd0>
 8005358:	232d      	movs	r3, #45	@ 0x2d
 800535a:	426d      	negs	r5, r5
 800535c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005360:	230a      	movs	r3, #10
 8005362:	4858      	ldr	r0, [pc, #352]	@ (80054c4 <_printf_i+0x234>)
 8005364:	e011      	b.n	800538a <_printf_i+0xfa>
 8005366:	6821      	ldr	r1, [r4, #0]
 8005368:	6833      	ldr	r3, [r6, #0]
 800536a:	0608      	lsls	r0, r1, #24
 800536c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005370:	d402      	bmi.n	8005378 <_printf_i+0xe8>
 8005372:	0649      	lsls	r1, r1, #25
 8005374:	bf48      	it	mi
 8005376:	b2ad      	uxthmi	r5, r5
 8005378:	2f6f      	cmp	r7, #111	@ 0x6f
 800537a:	6033      	str	r3, [r6, #0]
 800537c:	bf14      	ite	ne
 800537e:	230a      	movne	r3, #10
 8005380:	2308      	moveq	r3, #8
 8005382:	4850      	ldr	r0, [pc, #320]	@ (80054c4 <_printf_i+0x234>)
 8005384:	2100      	movs	r1, #0
 8005386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800538a:	6866      	ldr	r6, [r4, #4]
 800538c:	2e00      	cmp	r6, #0
 800538e:	60a6      	str	r6, [r4, #8]
 8005390:	db05      	blt.n	800539e <_printf_i+0x10e>
 8005392:	6821      	ldr	r1, [r4, #0]
 8005394:	432e      	orrs	r6, r5
 8005396:	f021 0104 	bic.w	r1, r1, #4
 800539a:	6021      	str	r1, [r4, #0]
 800539c:	d04b      	beq.n	8005436 <_printf_i+0x1a6>
 800539e:	4616      	mov	r6, r2
 80053a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80053a4:	fb03 5711 	mls	r7, r3, r1, r5
 80053a8:	5dc7      	ldrb	r7, [r0, r7]
 80053aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053ae:	462f      	mov	r7, r5
 80053b0:	42bb      	cmp	r3, r7
 80053b2:	460d      	mov	r5, r1
 80053b4:	d9f4      	bls.n	80053a0 <_printf_i+0x110>
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d10b      	bne.n	80053d2 <_printf_i+0x142>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	07df      	lsls	r7, r3, #31
 80053be:	d508      	bpl.n	80053d2 <_printf_i+0x142>
 80053c0:	6923      	ldr	r3, [r4, #16]
 80053c2:	6861      	ldr	r1, [r4, #4]
 80053c4:	4299      	cmp	r1, r3
 80053c6:	bfde      	ittt	le
 80053c8:	2330      	movle	r3, #48	@ 0x30
 80053ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053d2:	1b92      	subs	r2, r2, r6
 80053d4:	6122      	str	r2, [r4, #16]
 80053d6:	464b      	mov	r3, r9
 80053d8:	4621      	mov	r1, r4
 80053da:	4640      	mov	r0, r8
 80053dc:	f8cd a000 	str.w	sl, [sp]
 80053e0:	aa03      	add	r2, sp, #12
 80053e2:	f7ff fee3 	bl	80051ac <_printf_common>
 80053e6:	3001      	adds	r0, #1
 80053e8:	d14a      	bne.n	8005480 <_printf_i+0x1f0>
 80053ea:	f04f 30ff 	mov.w	r0, #4294967295
 80053ee:	b004      	add	sp, #16
 80053f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	f043 0320 	orr.w	r3, r3, #32
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	2778      	movs	r7, #120	@ 0x78
 80053fe:	4832      	ldr	r0, [pc, #200]	@ (80054c8 <_printf_i+0x238>)
 8005400:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	6831      	ldr	r1, [r6, #0]
 8005408:	061f      	lsls	r7, r3, #24
 800540a:	f851 5b04 	ldr.w	r5, [r1], #4
 800540e:	d402      	bmi.n	8005416 <_printf_i+0x186>
 8005410:	065f      	lsls	r7, r3, #25
 8005412:	bf48      	it	mi
 8005414:	b2ad      	uxthmi	r5, r5
 8005416:	6031      	str	r1, [r6, #0]
 8005418:	07d9      	lsls	r1, r3, #31
 800541a:	bf44      	itt	mi
 800541c:	f043 0320 	orrmi.w	r3, r3, #32
 8005420:	6023      	strmi	r3, [r4, #0]
 8005422:	b11d      	cbz	r5, 800542c <_printf_i+0x19c>
 8005424:	2310      	movs	r3, #16
 8005426:	e7ad      	b.n	8005384 <_printf_i+0xf4>
 8005428:	4826      	ldr	r0, [pc, #152]	@ (80054c4 <_printf_i+0x234>)
 800542a:	e7e9      	b.n	8005400 <_printf_i+0x170>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	f023 0320 	bic.w	r3, r3, #32
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	e7f6      	b.n	8005424 <_printf_i+0x194>
 8005436:	4616      	mov	r6, r2
 8005438:	e7bd      	b.n	80053b6 <_printf_i+0x126>
 800543a:	6833      	ldr	r3, [r6, #0]
 800543c:	6825      	ldr	r5, [r4, #0]
 800543e:	1d18      	adds	r0, r3, #4
 8005440:	6961      	ldr	r1, [r4, #20]
 8005442:	6030      	str	r0, [r6, #0]
 8005444:	062e      	lsls	r6, r5, #24
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	d501      	bpl.n	800544e <_printf_i+0x1be>
 800544a:	6019      	str	r1, [r3, #0]
 800544c:	e002      	b.n	8005454 <_printf_i+0x1c4>
 800544e:	0668      	lsls	r0, r5, #25
 8005450:	d5fb      	bpl.n	800544a <_printf_i+0x1ba>
 8005452:	8019      	strh	r1, [r3, #0]
 8005454:	2300      	movs	r3, #0
 8005456:	4616      	mov	r6, r2
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	e7bc      	b.n	80053d6 <_printf_i+0x146>
 800545c:	6833      	ldr	r3, [r6, #0]
 800545e:	2100      	movs	r1, #0
 8005460:	1d1a      	adds	r2, r3, #4
 8005462:	6032      	str	r2, [r6, #0]
 8005464:	681e      	ldr	r6, [r3, #0]
 8005466:	6862      	ldr	r2, [r4, #4]
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f859 	bl	8005520 <memchr>
 800546e:	b108      	cbz	r0, 8005474 <_printf_i+0x1e4>
 8005470:	1b80      	subs	r0, r0, r6
 8005472:	6060      	str	r0, [r4, #4]
 8005474:	6863      	ldr	r3, [r4, #4]
 8005476:	6123      	str	r3, [r4, #16]
 8005478:	2300      	movs	r3, #0
 800547a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800547e:	e7aa      	b.n	80053d6 <_printf_i+0x146>
 8005480:	4632      	mov	r2, r6
 8005482:	4649      	mov	r1, r9
 8005484:	4640      	mov	r0, r8
 8005486:	6923      	ldr	r3, [r4, #16]
 8005488:	47d0      	blx	sl
 800548a:	3001      	adds	r0, #1
 800548c:	d0ad      	beq.n	80053ea <_printf_i+0x15a>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	079b      	lsls	r3, r3, #30
 8005492:	d413      	bmi.n	80054bc <_printf_i+0x22c>
 8005494:	68e0      	ldr	r0, [r4, #12]
 8005496:	9b03      	ldr	r3, [sp, #12]
 8005498:	4298      	cmp	r0, r3
 800549a:	bfb8      	it	lt
 800549c:	4618      	movlt	r0, r3
 800549e:	e7a6      	b.n	80053ee <_printf_i+0x15e>
 80054a0:	2301      	movs	r3, #1
 80054a2:	4632      	mov	r2, r6
 80054a4:	4649      	mov	r1, r9
 80054a6:	4640      	mov	r0, r8
 80054a8:	47d0      	blx	sl
 80054aa:	3001      	adds	r0, #1
 80054ac:	d09d      	beq.n	80053ea <_printf_i+0x15a>
 80054ae:	3501      	adds	r5, #1
 80054b0:	68e3      	ldr	r3, [r4, #12]
 80054b2:	9903      	ldr	r1, [sp, #12]
 80054b4:	1a5b      	subs	r3, r3, r1
 80054b6:	42ab      	cmp	r3, r5
 80054b8:	dcf2      	bgt.n	80054a0 <_printf_i+0x210>
 80054ba:	e7eb      	b.n	8005494 <_printf_i+0x204>
 80054bc:	2500      	movs	r5, #0
 80054be:	f104 0619 	add.w	r6, r4, #25
 80054c2:	e7f5      	b.n	80054b0 <_printf_i+0x220>
 80054c4:	08005643 	.word	0x08005643
 80054c8:	08005654 	.word	0x08005654

080054cc <memmove>:
 80054cc:	4288      	cmp	r0, r1
 80054ce:	b510      	push	{r4, lr}
 80054d0:	eb01 0402 	add.w	r4, r1, r2
 80054d4:	d902      	bls.n	80054dc <memmove+0x10>
 80054d6:	4284      	cmp	r4, r0
 80054d8:	4623      	mov	r3, r4
 80054da:	d807      	bhi.n	80054ec <memmove+0x20>
 80054dc:	1e43      	subs	r3, r0, #1
 80054de:	42a1      	cmp	r1, r4
 80054e0:	d008      	beq.n	80054f4 <memmove+0x28>
 80054e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054ea:	e7f8      	b.n	80054de <memmove+0x12>
 80054ec:	4601      	mov	r1, r0
 80054ee:	4402      	add	r2, r0
 80054f0:	428a      	cmp	r2, r1
 80054f2:	d100      	bne.n	80054f6 <memmove+0x2a>
 80054f4:	bd10      	pop	{r4, pc}
 80054f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054fe:	e7f7      	b.n	80054f0 <memmove+0x24>

08005500 <_sbrk_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	2300      	movs	r3, #0
 8005504:	4d05      	ldr	r5, [pc, #20]	@ (800551c <_sbrk_r+0x1c>)
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	f7fb fe4a 	bl	80011a4 <_sbrk>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_sbrk_r+0x1a>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_sbrk_r+0x1a>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	20000324 	.word	0x20000324

08005520 <memchr>:
 8005520:	4603      	mov	r3, r0
 8005522:	b510      	push	{r4, lr}
 8005524:	b2c9      	uxtb	r1, r1
 8005526:	4402      	add	r2, r0
 8005528:	4293      	cmp	r3, r2
 800552a:	4618      	mov	r0, r3
 800552c:	d101      	bne.n	8005532 <memchr+0x12>
 800552e:	2000      	movs	r0, #0
 8005530:	e003      	b.n	800553a <memchr+0x1a>
 8005532:	7804      	ldrb	r4, [r0, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	428c      	cmp	r4, r1
 8005538:	d1f6      	bne.n	8005528 <memchr+0x8>
 800553a:	bd10      	pop	{r4, pc}

0800553c <memcpy>:
 800553c:	440a      	add	r2, r1
 800553e:	4291      	cmp	r1, r2
 8005540:	f100 33ff 	add.w	r3, r0, #4294967295
 8005544:	d100      	bne.n	8005548 <memcpy+0xc>
 8005546:	4770      	bx	lr
 8005548:	b510      	push	{r4, lr}
 800554a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554e:	4291      	cmp	r1, r2
 8005550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005554:	d1f9      	bne.n	800554a <memcpy+0xe>
 8005556:	bd10      	pop	{r4, pc}

08005558 <_realloc_r>:
 8005558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555c:	4607      	mov	r7, r0
 800555e:	4614      	mov	r4, r2
 8005560:	460d      	mov	r5, r1
 8005562:	b921      	cbnz	r1, 800556e <_realloc_r+0x16>
 8005564:	4611      	mov	r1, r2
 8005566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800556a:	f7ff bc3b 	b.w	8004de4 <_malloc_r>
 800556e:	b92a      	cbnz	r2, 800557c <_realloc_r+0x24>
 8005570:	f7ff fbce 	bl	8004d10 <_free_r>
 8005574:	4625      	mov	r5, r4
 8005576:	4628      	mov	r0, r5
 8005578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800557c:	f000 f81a 	bl	80055b4 <_malloc_usable_size_r>
 8005580:	4284      	cmp	r4, r0
 8005582:	4606      	mov	r6, r0
 8005584:	d802      	bhi.n	800558c <_realloc_r+0x34>
 8005586:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800558a:	d8f4      	bhi.n	8005576 <_realloc_r+0x1e>
 800558c:	4621      	mov	r1, r4
 800558e:	4638      	mov	r0, r7
 8005590:	f7ff fc28 	bl	8004de4 <_malloc_r>
 8005594:	4680      	mov	r8, r0
 8005596:	b908      	cbnz	r0, 800559c <_realloc_r+0x44>
 8005598:	4645      	mov	r5, r8
 800559a:	e7ec      	b.n	8005576 <_realloc_r+0x1e>
 800559c:	42b4      	cmp	r4, r6
 800559e:	4622      	mov	r2, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	bf28      	it	cs
 80055a4:	4632      	movcs	r2, r6
 80055a6:	f7ff ffc9 	bl	800553c <memcpy>
 80055aa:	4629      	mov	r1, r5
 80055ac:	4638      	mov	r0, r7
 80055ae:	f7ff fbaf 	bl	8004d10 <_free_r>
 80055b2:	e7f1      	b.n	8005598 <_realloc_r+0x40>

080055b4 <_malloc_usable_size_r>:
 80055b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055b8:	1f18      	subs	r0, r3, #4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfbc      	itt	lt
 80055be:	580b      	ldrlt	r3, [r1, r0]
 80055c0:	18c0      	addlt	r0, r0, r3
 80055c2:	4770      	bx	lr

080055c4 <_init>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr

080055d0 <_fini>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr
