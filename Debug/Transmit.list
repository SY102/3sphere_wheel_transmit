
Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006af0  08006af0  00007af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bdc  08006bdc  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006bdc  08006bdc  00008070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006bdc  08006bdc  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bdc  08006bdc  00007bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006be0  08006be0  00007be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006be4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000070  08006c54  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08006c54  000083a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012aa3  00000000  00000000  00008099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003495  00000000  00000000  0001ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0001dfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ebf  00000000  00000000  0001f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac3b  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169be  00000000  00000000  0003adfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d0d  00000000  00000000  000517b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e54c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000558c  00000000  00000000  000e5508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000eaa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08006ad8 	.word	0x08006ad8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08006ad8 	.word	0x08006ad8

0800014c <csn_high>:
uint8_t nrf24_get_status(void)
{
    return nrf24_r_reg(STATUS, 1);  // ★ 'STATUS' 사용 (NRF_STATUS 아님)
}

void csn_high(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000156:	4802      	ldr	r0, [pc, #8]	@ (8000160 <csn_high+0x14>)
 8000158:	f003 f80a 	bl	8003170 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 시작 표시
	   // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40011000 	.word	0x40011000

08000164 <csn_low>:



void csn_low(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800016e:	4802      	ldr	r0, [pc, #8]	@ (8000178 <csn_low+0x14>)
 8000170:	f002 fffe 	bl	8003170 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 종료 표시
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40011000 	.word	0x40011000

0800017c <ce_high>:

void ce_high(void){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000186:	4802      	ldr	r0, [pc, #8]	@ (8000190 <ce_high+0x14>)
 8000188:	f002 fff2 	bl	8003170 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <ce_low>:

void ce_low(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019e:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <ce_low+0x14>)
 80001a0:	f002 ffe6 	bl	8003170 <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	6039      	str	r1, [r7, #0]
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001c6:	f7ff ffcd 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001ca:	f107 010f 	add.w	r1, r7, #15
 80001ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d2:	2201      	movs	r2, #1
 80001d4:	4808      	ldr	r0, [pc, #32]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001d6:	f003 fde3 	bl	8003da0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	b29a      	uxth	r2, r3
 80001de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e2:	6839      	ldr	r1, [r7, #0]
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001e6:	f003 fddb 	bl	8003da0 <HAL_SPI_Transmit>

	csn_high();
 80001ea:	f7ff ffaf 	bl	800014c <csn_high>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000010c 	.word	0x2000010c

080001fc <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	4613      	mov	r3, r2
 800020a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000214:	f7ff ffa6 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000218:	f107 010f 	add.w	r1, r7, #15
 800021c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000220:	2201      	movs	r2, #1
 8000222:	4809      	ldr	r0, [pc, #36]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000224:	f003 fdbc 	bl	8003da0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000228:	79bb      	ldrb	r3, [r7, #6]
 800022a:	b29a      	uxth	r2, r3
 800022c:	f107 010e 	add.w	r1, r7, #14
 8000230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000234:	4804      	ldr	r0, [pc, #16]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000236:	f003 fef7 	bl	8004028 <HAL_SPI_Receive>

	csn_high();
 800023a:	f7ff ff87 	bl	800014c <csn_high>

	return data;
 800023e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	2000010c 	.word	0x2000010c

0800024c <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000256:	1df9      	adds	r1, r7, #7
 8000258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800025c:	2201      	movs	r2, #1
 800025e:	4803      	ldr	r0, [pc, #12]	@ (800026c <nrf24_w_spec_cmd+0x20>)
 8000260:	f003 fd9e 	bl	8003da0 <HAL_SPI_Transmit>
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	2000010c 	.word	0x2000010c

08000270 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800027a:	2101      	movs	r1, #1
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ffbd 	bl	80001fc <nrf24_r_reg>
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f043 0302 	orr.w	r3, r3, #2
 800028c:	b2db      	uxtb	r3, r3
 800028e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	2201      	movs	r2, #1
 8000294:	4619      	mov	r1, r3
 8000296:	2000      	movs	r0, #0
 8000298:	f7ff ff88 	bl	80001ac <nrf24_w_reg>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <nrf24_pwr_dwn>:

void nrf24_pwr_dwn(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80002ae:	2101      	movs	r1, #1
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ffa3 	bl	80001fc <nrf24_r_reg>
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PWR_UP);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f023 0302 	bic.w	r3, r3, #2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	2201      	movs	r2, #1
 80002c8:	4619      	mov	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f7ff ff6e 	bl	80001ac <nrf24_w_reg>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <nrf24_tx_pwr>:

void nrf24_tx_pwr(uint8_t pwr){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80002e6:	2101      	movs	r1, #1
 80002e8:	2006      	movs	r0, #6
 80002ea:	f7ff ff87 	bl	80001fc <nrf24_r_reg>
 80002ee:	4603      	mov	r3, r0
 80002f0:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	b25a      	sxtb	r2, r3
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	b25b      	sxtb	r3, r3
 8000308:	4313      	orrs	r3, r2
 800030a:	b25b      	sxtb	r3, r3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000310:	f107 030f 	add.w	r3, r7, #15
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	2006      	movs	r0, #6
 800031a:	f7ff ff47 	bl	80001ac <nrf24_w_reg>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	4603      	mov	r3, r0
 800032e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000334:	2101      	movs	r1, #1
 8000336:	2006      	movs	r0, #6
 8000338:	f7ff ff60 	bl	80001fc <nrf24_r_reg>
 800033c:	4603      	mov	r3, r0
 800033e:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000346:	b2db      	uxtb	r3, r3
 8000348:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d105      	bne.n	800035c <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	b2db      	uxtb	r3, r3
 8000358:	73fb      	strb	r3, [r7, #15]
 800035a:	e007      	b.n	800036c <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d104      	bne.n	800036c <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f043 0320 	orr.w	r3, r3, #32
 8000368:	b2db      	uxtb	r3, r3
 800036a:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 800036c:	f107 030f 	add.w	r3, r7, #15
 8000370:	2201      	movs	r2, #1
 8000372:	4619      	mov	r1, r3
 8000374:	2006      	movs	r0, #6
 8000376:	f7ff ff19 	bl	80001ac <nrf24_w_reg>
}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000382:	b580      	push	{r7, lr}
 8000384:	b082      	sub	sp, #8
 8000386:	af00      	add	r7, sp, #0
 8000388:	4603      	mov	r3, r0
 800038a:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	2005      	movs	r0, #5
 8000394:	f7ff ff0a 	bl	80001ac <nrf24_w_reg>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 80003a8:	2205      	movs	r2, #5
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	2010      	movs	r0, #16
 80003ae:	f7ff fefd 	bl	80001ac <nrf24_w_reg>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	460a      	mov	r2, r1
 80003c6:	71fb      	strb	r3, [r7, #7]
 80003c8:	4613      	mov	r3, r2
 80003ca:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	2b20      	cmp	r3, #32
 80003d0:	d901      	bls.n	80003d6 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 80003d2:	2320      	movs	r3, #32
 80003d4:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b05      	cmp	r3, #5
 80003da:	d839      	bhi.n	8000450 <nrf24_pipe_pld_size+0x94>
 80003dc:	a201      	add	r2, pc, #4	@ (adr r2, 80003e4 <nrf24_pipe_pld_size+0x28>)
 80003de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e2:	bf00      	nop
 80003e4:	080003fd 	.word	0x080003fd
 80003e8:	0800040b 	.word	0x0800040b
 80003ec:	08000419 	.word	0x08000419
 80003f0:	08000427 	.word	0x08000427
 80003f4:	08000435 	.word	0x08000435
 80003f8:	08000443 	.word	0x08000443
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 80003fc:	1dbb      	adds	r3, r7, #6
 80003fe:	2201      	movs	r2, #1
 8000400:	4619      	mov	r1, r3
 8000402:	2011      	movs	r0, #17
 8000404:	f7ff fed2 	bl	80001ac <nrf24_w_reg>

		break;
 8000408:	e022      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800040a:	1dbb      	adds	r3, r7, #6
 800040c:	2201      	movs	r2, #1
 800040e:	4619      	mov	r1, r3
 8000410:	2012      	movs	r0, #18
 8000412:	f7ff fecb 	bl	80001ac <nrf24_w_reg>

		break;
 8000416:	e01b      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 8000418:	1dbb      	adds	r3, r7, #6
 800041a:	2201      	movs	r2, #1
 800041c:	4619      	mov	r1, r3
 800041e:	2013      	movs	r0, #19
 8000420:	f7ff fec4 	bl	80001ac <nrf24_w_reg>

		break;
 8000424:	e014      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	2014      	movs	r0, #20
 800042e:	f7ff febd 	bl	80001ac <nrf24_w_reg>

		break;
 8000432:	e00d      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000434:	1dbb      	adds	r3, r7, #6
 8000436:	2201      	movs	r2, #1
 8000438:	4619      	mov	r1, r3
 800043a:	2015      	movs	r0, #21
 800043c:	f7ff feb6 	bl	80001ac <nrf24_w_reg>

		break;
 8000440:	e006      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	2201      	movs	r2, #1
 8000446:	4619      	mov	r1, r3
 8000448:	2016      	movs	r0, #22
 800044a:	f7ff feaf 	bl	80001ac <nrf24_w_reg>

		break;
 800044e:	bf00      	nop
	}
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <nrf24_cls_rx_pipe>:
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_cls_rx_pipe(uint8_t pipe){
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(EN_RXADDR, 1);
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fec9 	bl	80001fc <nrf24_r_reg>
 800046a:	4603      	mov	r3, r0
 800046c:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << pipe);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2201      	movs	r2, #1
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	b25b      	sxtb	r3, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	b25a      	sxtb	r2, r3
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	b25b      	sxtb	r3, r3
 8000480:	4013      	ands	r3, r2
 8000482:	b25b      	sxtb	r3, r3
 8000484:	b2db      	uxtb	r3, r3
 8000486:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000488:	f107 030f 	add.w	r3, r7, #15
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	2002      	movs	r0, #2
 8000492:	f7ff fe8b 	bl	80001ac <nrf24_w_reg>
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <nrf24_set_crc>:

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 800049e:	b580      	push	{r7, lr}
 80004a0:	b084      	sub	sp, #16
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	460a      	mov	r2, r1
 80004a8:	71fb      	strb	r3, [r7, #7]
 80004aa:	4613      	mov	r3, r2
 80004ac:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80004ae:	2101      	movs	r1, #1
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fea3 	bl	80001fc <nrf24_r_reg>
 80004b6:	4603      	mov	r3, r0
 80004b8:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	f023 030c 	bic.w	r3, r3, #12
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	4313      	orrs	r3, r2
 80004de:	b25b      	sxtb	r3, r3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80004e4:	f107 030f 	add.w	r3, r7, #15
 80004e8:	2201      	movs	r2, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fe5d 	bl	80001ac <nrf24_w_reg>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4603      	mov	r3, r0
 8000502:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	3b02      	subs	r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	2003      	movs	r0, #3
 8000514:	f7ff fe4a 	bl	80001ac <nrf24_w_reg>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	csn_low();
 8000524:	f7ff fe1e 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000528:	20e1      	movs	r0, #225	@ 0xe1
 800052a:	f7ff fe8f 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 800052e:	f7ff fe0d 	bl	800014c <csn_high>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}

08000536 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
	csn_low();
 800053a:	f7ff fe13 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 800053e:	20e2      	movs	r0, #226	@ 0xe2
 8000540:	f7ff fe84 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 8000544:	f7ff fe02 	bl	800014c <csn_high>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8000556:	23ff      	movs	r3, #255	@ 0xff
 8000558:	71bb      	strb	r3, [r7, #6]

	csn_low();
 800055a:	f7ff fe03 	bl	8000164 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 800055e:	1dfa      	adds	r2, r7, #7
 8000560:	1db9      	adds	r1, r7, #6
 8000562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2301      	movs	r3, #1
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <nrf24_r_status+0x34>)
 800056c:	f003 fe75 	bl	800425a <HAL_SPI_TransmitReceive>
	csn_high();
 8000570:	f7ff fdec 	bl	800014c <csn_high>

	return data;
 8000574:	79fb      	ldrb	r3, [r7, #7]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000010c 	.word	0x2000010c

08000584 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800058e:	f7ff ffdd 	bl	800054c <nrf24_r_status>
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800059c:	b2db      	uxtb	r3, r3
 800059e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	2007      	movs	r0, #7
 80005a8:	f7ff fe00 	bl	80001ac <nrf24_w_reg>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005be:	f7ff ffc5 	bl	800054c <nrf24_r_status>
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	2007      	movs	r0, #7
 80005d8:	f7ff fde8 	bl	80001ac <nrf24_w_reg>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005ee:	f7ff ffad 	bl	800054c <nrf24_r_status>
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f043 0310 	orr.w	r3, r3, #16
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	2007      	movs	r0, #7
 8000608:	f7ff fdd0 	bl	80001ac <nrf24_w_reg>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800061e:	2101      	movs	r1, #1
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fdeb 	bl	80001fc <nrf24_r_reg>
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fdb6 	bl	80001ac <nrf24_w_reg>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000652:	2101      	movs	r1, #1
 8000654:	201d      	movs	r0, #29
 8000656:	f7ff fdd1 	bl	80001fc <nrf24_r_reg>
 800065a:	4603      	mov	r3, r0
 800065c:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d105      	bne.n	8000670 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e004      	b.n	800067a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	f023 0304 	bic.w	r3, r3, #4
 8000676:	b2db      	uxtb	r3, r3
 8000678:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800067a:	f107 030f 	add.w	r3, r7, #15
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	201d      	movs	r0, #29
 8000684:	f7ff fd92 	bl	80001ac <nrf24_w_reg>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 80006a0:	2101      	movs	r1, #1
 80006a2:	201c      	movs	r0, #28
 80006a4:	f7ff fdaa 	bl	80001fc <nrf24_r_reg>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d901      	bls.n	80006b6 <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 80006b2:	2305      	movs	r3, #5
 80006b4:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00b      	beq.n	80006d4 <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2201      	movs	r2, #1
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	e00c      	b.n	80006ee <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2201      	movs	r2, #1
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	4013      	ands	r3, r2
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 80006ee:	f107 030f 	add.w	r3, r7, #15
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	201c      	movs	r0, #28
 80006f8:	f7ff fd58 	bl	80001ac <nrf24_w_reg>
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <nrf24_auto_ack>:

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d901      	bls.n	800071e <nrf24_auto_ack+0x1a>
		pipe = 5;
 800071a:	2305      	movs	r3, #5
 800071c:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800071e:	2101      	movs	r1, #1
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff fd6b 	bl	80001fc <nrf24_r_reg>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00b      	beq.n	8000748 <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2201      	movs	r2, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	b25a      	sxtb	r2, r3
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	b25b      	sxtb	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b25b      	sxtb	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e00c      	b.n	8000762 <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2201      	movs	r2, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	b25b      	sxtb	r3, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	b25a      	sxtb	r2, r3
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	b25b      	sxtb	r3, r3
 800075a:	4013      	ands	r3, r2
 800075c:	b25b      	sxtb	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000762:	f107 030f 	add.w	r3, r7, #15
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fd1e 	bl	80001ac <nrf24_w_reg>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <nrf24_auto_ack_all>:

void nrf24_auto_ack_all(uint8_t ack){
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000782:	2101      	movs	r1, #1
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff fd39 	bl	80001fc <nrf24_r_reg>
 800078a:	4603      	mov	r3, r0
 800078c:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <nrf24_auto_ack_all+0x22>
		enaa = 63;
 8000794:	233f      	movs	r3, #63	@ 0x3f
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e001      	b.n	800079e <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 800079e:	f107 030f 	add.w	r3, r7, #15
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fd00 	bl	80001ac <nrf24_w_reg>
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80007be:	2101      	movs	r1, #1
 80007c0:	201d      	movs	r0, #29
 80007c2:	f7ff fd1b 	bl	80001fc <nrf24_r_reg>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73fb      	strb	r3, [r7, #15]

	if(en){
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e004      	b.n	80007e6 <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f023 0302 	bic.w	r3, r3, #2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80007e6:	f107 030f 	add.w	r3, r7, #15
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	201d      	movs	r0, #29
 80007f0:	f7ff fcdc 	bl	80001ac <nrf24_w_reg>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000806:	2101      	movs	r1, #1
 8000808:	201d      	movs	r0, #29
 800080a:	f7ff fcf7 	bl	80001fc <nrf24_r_reg>
 800080e:	4603      	mov	r3, r0
 8000810:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e004      	b.n	800082e <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f023 0301 	bic.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800082e:	f107 030f 	add.w	r3, r7, #15
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	201d      	movs	r0, #29
 8000838:	f7ff fcb8 	bl	80001ac <nrf24_w_reg>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <nrf24_auto_retr_delay>:

void nrf24_auto_retr_delay(uint8_t delay){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 800084e:	2101      	movs	r1, #1
 8000850:	2004      	movs	r0, #4
 8000852:	f7ff fcd3 	bl	80001fc <nrf24_r_reg>
 8000856:	4603      	mov	r3, r0
 8000858:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	f003 030f 	and.w	r3, r3, #15
 8000860:	b2db      	uxtb	r3, r3
 8000862:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	b25a      	sxtb	r2, r3
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	b25b      	sxtb	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8000878:	f107 030f 	add.w	r3, r7, #15
 800087c:	2201      	movs	r2, #1
 800087e:	4619      	mov	r1, r3
 8000880:	2004      	movs	r0, #4
 8000882:	f7ff fc93 	bl	80001ac <nrf24_w_reg>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000898:	2101      	movs	r1, #1
 800089a:	2004      	movs	r0, #4
 800089c:	f7ff fcae 	bl	80001fc <nrf24_r_reg>
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	f023 030f 	bic.w	r3, r3, #15
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80008b8:	f107 030f 	add.w	r3, r7, #15
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	2004      	movs	r0, #4
 80008c2:	f7ff fc73 	bl	80001ac <nrf24_w_reg>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]

	ce_low();
 80008dc:	f7ff fc5a 	bl	8000194 <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 80008e0:	23a0      	movs	r3, #160	@ 0xa0
 80008e2:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80008e4:	f7ff fc3e 	bl	8000164 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80008e8:	f107 010f 	add.w	r1, r7, #15
 80008ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f0:	2201      	movs	r2, #1
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <nrf24_transmit+0x70>)
 80008f4:	f003 fa54 	bl	8003da0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	480f      	ldr	r0, [pc, #60]	@ (8000940 <nrf24_transmit+0x70>)
 8000904:	f003 fa4c 	bl	8003da0 <HAL_SPI_Transmit>
	csn_high();
 8000908:	f7ff fc20 	bl	800014c <csn_high>

	ce_high();
 800090c:	f7ff fc36 	bl	800017c <ce_high>
	HAL_Delay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f001 f94f 	bl	8001bb4 <HAL_Delay>
	ce_low();
 8000916:	f7ff fc3d 	bl	8000194 <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 800091a:	f7ff fe17 	bl	800054c <nrf24_r_status>
 800091e:	4603      	mov	r3, r0
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 8000928:	f7ff fe5c 	bl	80005e4 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 800092c:	f7ff fdf8 	bl	8000520 <nrf24_flush_tx>
		return 1;
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <nrf24_transmit+0x66>
	}

	return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000010c 	.word	0x2000010c

08000944 <nrf24_defaults>:
	csn_high();

	nrf24_clear_rx_dr();
}

void nrf24_defaults(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	ce_low();
 800094a:	f7ff fc23 	bl	8000194 <ce_low>

	nrf24_pwr_dwn();
 800094e:	f7ff fca9 	bl	80002a4 <nrf24_pwr_dwn>
	nrf24_tx_pwr(3);
 8000952:	2003      	movs	r0, #3
 8000954:	f7ff fcc0 	bl	80002d8 <nrf24_tx_pwr>
	nrf24_data_rate(_1mbps);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fce4 	bl	8000326 <nrf24_data_rate>
	nrf24_set_channel(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff fd0f 	bl	8000382 <nrf24_set_channel>
	nrf24_set_crc(no_crc, _1byte);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fd99 	bl	800049e <nrf24_set_crc>
	nrf24_set_addr_width(5);
 800096c:	2005      	movs	r0, #5
 800096e:	f7ff fdc4 	bl	80004fa <nrf24_set_addr_width>
	nrf24_flush_tx();
 8000972:	f7ff fdd5 	bl	8000520 <nrf24_flush_tx>
	nrf24_flush_rx();
 8000976:	f7ff fdde 	bl	8000536 <nrf24_flush_rx>
	nrf24_clear_rx_dr();
 800097a:	f7ff fe03 	bl	8000584 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 800097e:	f7ff fe19 	bl	80005b4 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000982:	f7ff fe2f 	bl	80005e4 <nrf24_clear_max_rt>
	nrf24_stop_listen();
 8000986:	f7ff fe45 	bl	8000614 <nrf24_stop_listen>
	nrf24_dpl(disable);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe5c 	bl	8000648 <nrf24_dpl>
	nrf24_en_ack_pld(disable);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ff0f 	bl	80007b4 <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff30 	bl	80007fc <nrf24_en_dyn_ack>
	nrf24_auto_retr_delay(0);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ff51 	bl	8000844 <nrf24_auto_retr_delay>
	nrf24_auto_retr_limit(3);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f7ff ff73 	bl	800088e <nrf24_auto_retr_limit>


	for(uint8_t i = 0; i < 5; i++){
 80009a8:	2300      	movs	r3, #0
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	e015      	b.n	80009da <nrf24_defaults+0x96>
		nrf24_pipe_pld_size(i, 0);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd02 	bl	80003bc <nrf24_pipe_pld_size>
		nrf24_cls_rx_pipe(i);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fd4c 	bl	8000458 <nrf24_cls_rx_pipe>
		nrf24_set_rx_dpl(i, disable);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe63 	bl	8000690 <nrf24_set_rx_dpl>
		nrf24_auto_ack(i, enable);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe98 	bl	8000704 <nrf24_auto_ack>
	for(uint8_t i = 0; i < 5; i++){
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	3301      	adds	r3, #1
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d9e6      	bls.n	80009ae <nrf24_defaults+0x6a>
	}

	ce_high();
 80009e0:	f7ff fbcc 	bl	800017c <ce_high>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <nrf24_init>:

void nrf24_init(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80009f0:	f7ff fc3e 	bl	8000270 <nrf24_pwr_up>

	nrf24_flush_tx();
 80009f4:	f7ff fd94 	bl	8000520 <nrf24_flush_tx>
	nrf24_flush_rx();
 80009f8:	f7ff fd9d 	bl	8000536 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80009fc:	f7ff fdc2 	bl	8000584 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8000a00:	f7ff fdd8 	bl	80005b4 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000a04:	f7ff fdee 	bl	80005e4 <nrf24_clear_max_rt>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a1e:	4a28      	ldr	r2, [pc, #160]	@ (8000ac0 <MX_ADC1_Init+0xb4>)
 8000a20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a38:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4a:	481c      	ldr	r0, [pc, #112]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a4c:	f001 f8d6 	bl	8001bfc <HAL_ADC_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000a56:	f000 fbbb 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a62:	2307      	movs	r3, #7
 8000a64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4814      	ldr	r0, [pc, #80]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a6c:	f001 fb9a 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 fbab 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a88:	f001 fb8c 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a92:	f000 fb9d 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a96:	230c      	movs	r3, #12
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000aa4:	f001 fb7e 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000aae:	f000 fb8f 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000008c 	.word	0x2000008c
 8000ac0:	40012400 	.word	0x40012400

08000ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d151      	bne.n	8000b88 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a24      	ldr	r2, [pc, #144]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = X_axis_Pin|Y_axis_Pin|Z_axis_Pin;
 8000b14:	2307      	movs	r3, #7
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	481d      	ldr	r0, [pc, #116]	@ (8000b98 <HAL_ADC_MspInit+0xd4>)
 8000b24:	f002 f9a0 	bl	8002e68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b52:	2220      	movs	r2, #32
 8000b54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b5c:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b5e:	f001 fee1 	bl	8002924 <HAL_DMA_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000b68:	f000 fb32 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b70:	621a      	str	r2, [r3, #32]
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f001 fe9a 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b82:	2012      	movs	r0, #18
 8000b84:	f001 feb3 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40012400 	.word	0x40012400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	200000bc 	.word	0x200000bc
 8000ba0:	40020008 	.word	0x40020008

08000ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200b      	movs	r0, #11
 8000bc8:	f001 fe75 	bl	80028b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bcc:	200b      	movs	r0, #11
 8000bce:	f001 fe8e 	bl	80028ee <HAL_NVIC_EnableIRQ>

}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0c:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a27      	ldr	r2, [pc, #156]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c12:	f043 0320 	orr.w	r3, r3, #32
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_Pin_GPIO_Port, CSN_Pin_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5a:	4816      	ldr	r0, [pc, #88]	@ (8000cb4 <MX_GPIO_Init+0xd4>)
 8000c5c:	f002 fa88 	bl	8003170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_Pin_GPIO_Port, CE_Pin_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c66:	4814      	ldr	r0, [pc, #80]	@ (8000cb8 <MX_GPIO_Init+0xd8>)
 8000c68:	f002 fa82 	bl	8003170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CSN_Pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin;
 8000c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	@ (8000cb4 <MX_GPIO_Init+0xd4>)
 8000c86:	f002 f8ef 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin_Pin */
  GPIO_InitStruct.Pin = CE_Pin_Pin;
 8000c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_GPIO_Init+0xd8>)
 8000ca4:	f002 f8e0 	bl	8002e68 <HAL_GPIO_Init>

}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40010800 	.word	0x40010800

08000cbc <nrf24_set_payload_size>:
 * Receive data
 */
void nrf24_receive(uint8_t *data, uint8_t size);

static inline void nrf24_set_payload_size(uint8_t size)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
    nrf24_pipe_pld_size(0, size);   // 파이프 0만 사용
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fb76 	bl	80003bc <nrf24_pipe_pld_size>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cdc:	f000 ff08 	bl	8001af0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce0:	f000 f832 	bl	8000d48 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce4:	f7ff ff7c 	bl	8000be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ce8:	f7ff ff5c 	bl	8000ba4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cec:	f000 fa76 	bl	80011dc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000cf0:	f000 fc90 	bl	8001614 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000cf4:	f7ff fe8a 	bl	8000a0c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000cf8:	f000 fc1c 	bl	8001534 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000cfc:	f000 fcb4 	bl	8001668 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

nrf24_init();
 8000d00:	f7ff fe74 	bl	80009ec <nrf24_init>
nrf24_transmitter_setup();
 8000d04:	f000 f8a8 	bl	8000e58 <nrf24_transmitter_setup>

// 음성 FSM + UART3 인터럽트 수신 시작
Voice_Init();
 8000d08:	f000 fdb0 	bl	800186c <Voice_Init>
HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4909      	ldr	r1, [pc, #36]	@ (8000d34 <main+0x5c>)
 8000d10:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <main+0x60>)
 8000d12:	f004 fa22 	bl	800515a <HAL_UART_Receive_IT>

HAL_ADCEx_Calibration_Start(&hadc1);
 8000d16:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <main+0x64>)
 8000d18:	f001 fc3e 	bl	8002598 <HAL_ADCEx_Calibration_Start>

//타이머 인터럽트 시작 20ms마다
HAL_TIM_Base_Start_IT(&htim2);
 8000d1c:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <main+0x68>)
 8000d1e:	f003 fd9f 	bl	8004860 <HAL_TIM_Base_Start_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(adc_conversion_complete){	//DMA가 메모리 저장을 완료하여 콜백함수에 의해 adc_conversion_complete = 1이 되어 조건이 참이된다면
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <main+0x6c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <main+0x58>
	transmit_sensor_data();
 8000d2c:	f000 f8e4 	bl	8000ef8 <transmit_sensor_data>

	    }

	    __WFI(); // 저전력 대기(인터럽트가 깨움)
 8000d30:	bf30      	wfi
	if(adc_conversion_complete){	//DMA가 메모리 저장을 완료하여 콜백함수에 의해 adc_conversion_complete = 1이 되어 조건이 참이된다면
 8000d32:	e7f6      	b.n	8000d22 <main+0x4a>
 8000d34:	20000107 	.word	0x20000107
 8000d38:	200001f8 	.word	0x200001f8
 8000d3c:	2000008c 	.word	0x2000008c
 8000d40:	20000168 	.word	0x20000168
 8000d44:	20000106 	.word	0x20000106

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b094      	sub	sp, #80	@ 0x50
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d52:	2228      	movs	r2, #40	@ 0x28
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f005 f89d 	bl	8005e96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d7c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d86:	2301      	movs	r3, #1
 8000d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d94:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 f9fe 	bl	80031a0 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000daa:	f000 fa11 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2102      	movs	r1, #2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 fc6a 	bl	80036a4 <HAL_RCC_ClockConfig>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dd6:	f000 f9fb 	bl	80011d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000de2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fdea 	bl	80039c0 <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000df2:	f000 f9ed 	bl	80011d0 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3750      	adds	r7, #80	@ 0x50
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <joystick_is_active>:

/* USER CODE BEGIN 4 */
static bool joystick_is_active(int x, int y, int z) {
 8000dfe:	b480      	push	{r7}
 8000e00:	b085      	sub	sp, #20
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
    return (abs(x - ADC_NEU) > ADC_DEAD_ZONE) ||
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bfb8      	it	lt
 8000e14:	425b      	neglt	r3, r3
           (abs(y - ADC_NEU) > ADC_DEAD_ZONE) ||
 8000e16:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e1a:	dc11      	bgt.n	8000e40 <joystick_is_active+0x42>
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bfb8      	it	lt
 8000e26:	425b      	neglt	r3, r3
    return (abs(x - ADC_NEU) > ADC_DEAD_ZONE) ||
 8000e28:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e2c:	dc08      	bgt.n	8000e40 <joystick_is_active+0x42>
           (abs(z - ADC_NEU) > ADC_DEAD_ZONE);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bfb8      	it	lt
 8000e38:	425b      	neglt	r3, r3
           (abs(y - ADC_NEU) > ADC_DEAD_ZONE) ||
 8000e3a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000e3e:	dd01      	ble.n	8000e44 <joystick_is_active+0x46>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <joystick_is_active+0x48>
 8000e44:	2300      	movs	r3, #0
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
	...

08000e58 <nrf24_transmitter_setup>:

void nrf24_transmitter_setup(void)

{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
nrf24_defaults();
 8000e5e:	f7ff fd71 	bl	8000944 <nrf24_defaults>
nrf24_pwr_up();
 8000e62:	f7ff fa05 	bl	8000270 <nrf24_pwr_up>
nrf24_flush_tx();
 8000e66:	f7ff fb5b 	bl	8000520 <nrf24_flush_tx>
nrf24_flush_rx();
 8000e6a:	f7ff fb64 	bl	8000536 <nrf24_flush_rx>
nrf24_clear_rx_dr();
 8000e6e:	f7ff fb89 	bl	8000584 <nrf24_clear_rx_dr>
nrf24_clear_tx_ds();
 8000e72:	f7ff fb9f 	bl	80005b4 <nrf24_clear_tx_ds>
nrf24_clear_max_rt();
 8000e76:	f7ff fbb5 	bl	80005e4 <nrf24_clear_max_rt>
nrf24_stop_listen();                        //수신모드 비활성화 하여 송신 전용 모드로 전환
 8000e7a:	f7ff fbcb 	bl	8000614 <nrf24_stop_listen>
nrf24_set_channel(40);                      //무선 채널 40번으로 설정
 8000e7e:	2028      	movs	r0, #40	@ 0x28
 8000e80:	f7ff fa7f 	bl	8000382 <nrf24_set_channel>
nrf24_auto_ack_all(disable);                //자동 ack기능 off=>단순 송신만 수행
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff fc77 	bl	8000778 <nrf24_auto_ack_all>
nrf24_set_payload_size(6);                  //한번에 전송할 페이로드 크기 최대 32바이트
 8000e8a:	2006      	movs	r0, #6
 8000e8c:	f7ff ff16 	bl	8000cbc <nrf24_set_payload_size>
nrf24_tx_pwr(3);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f7ff fa21 	bl	80002d8 <nrf24_tx_pwr>
nrf24_data_rate(_1mbps);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fa45 	bl	8000326 <nrf24_data_rate>
nrf24_open_tx_pipe(tx_address);             //파이프 0에 tx_address를 열어 송신 대상 지정
 8000e9c:	480c      	ldr	r0, [pc, #48]	@ (8000ed0 <nrf24_transmitter_setup+0x78>)
 8000e9e:	f7ff fa7f 	bl	80003a0 <nrf24_open_tx_pipe>
nrf24_pwr_up();                             //모듈 power up=>송신 준비 완료
 8000ea2:	f7ff f9e5 	bl	8000270 <nrf24_pwr_up>

    uint8_t cfg = nrf24_r_reg(CONFIG, 1);
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff f9a7 	bl	80001fc <nrf24_r_reg>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
    cfg &= ~((1<<5)|(1<<4));                // MASK_TX_DS=5, MASK_MAX_RT=4 -> 0
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	71fb      	strb	r3, [r7, #7]
    nrf24_w_reg(CONFIG, &cfg, 1);
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff f972 	bl	80001ac <nrf24_w_reg>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000

08000ed4 <__io_putchar>:

int __io_putchar(int ch)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4803      	ldr	r0, [pc, #12]	@ (8000ef4 <__io_putchar+0x20>)
 8000ee6:	f004 f8ad 	bl	8005044 <HAL_UART_Transmit>
return ch;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200001b0 	.word	0x200001b0

08000ef8 <transmit_sensor_data>:


void transmit_sensor_data(void){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	@ 0x38
 8000efc:	af02      	add	r7, sp, #8
	adc_conversion_complete = 0;
 8000efe:	4b6f      	ldr	r3, [pc, #444]	@ (80010bc <transmit_sensor_data+0x1c4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop

	uint16_t x,y,z;
    __disable_irq();
    x = adc_buffer[0];
 8000f08:	4b6d      	ldr	r3, [pc, #436]	@ (80010c0 <transmit_sensor_data+0x1c8>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	853b      	strh	r3, [r7, #40]	@ 0x28
    y = adc_buffer[1];
 8000f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80010c0 <transmit_sensor_data+0x1c8>)
 8000f10:	885b      	ldrh	r3, [r3, #2]
 8000f12:	84fb      	strh	r3, [r7, #38]	@ 0x26
    z = adc_buffer[2];
 8000f14:	4b6a      	ldr	r3, [pc, #424]	@ (80010c0 <transmit_sensor_data+0x1c8>)
 8000f16:	889b      	ldrh	r3, [r3, #4]
 8000f18:	84bb      	strh	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 8000f1a:	b662      	cpsie	i
}
 8000f1c:	bf00      	nop
    __enable_irq();
    // 2) 조이스틱 활성 판정
  	 bool active = joystick_is_active((int)x,(int)y,(int)z);
 8000f1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f20:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8000f22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff6a 	bl	8000dfe <joystick_is_active>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  	      // 3) (조이스틱 중립일 때만) 음성 프레임 소비
  	 if (!active && Voice_FrameAvailable()){
 8000f30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f34:	f083 0301 	eor.w	r3, r3, #1
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d020      	beq.n	8000f80 <transmit_sensor_data+0x88>
 8000f3e:	f000 fd4b 	bl	80019d8 <Voice_FrameAvailable>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d01b      	beq.n	8000f80 <transmit_sensor_data+0x88>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  	 voice_frame_t vf;
  	 __disable_irq();
  	 bool ok = Voice_TryPopFrame(&vf);
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fd4d 	bl	80019f0 <Voice_TryPopFrame>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  __ASM volatile ("cpsie i" : : : "memory");
 8000f5c:	b662      	cpsie	i
}
 8000f5e:	bf00      	nop
  	 __enable_irq();
     if (ok && vf.cmd >= 0x01 && vf.cmd <= 0x05){
 8000f60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00b      	beq.n	8000f80 <transmit_sensor_data+0x88>
 8000f68:	7bbb      	ldrb	r3, [r7, #14]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <transmit_sensor_data+0x88>
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d805      	bhi.n	8000f80 <transmit_sensor_data+0x88>
     last_cmd = vf.cmd;
 8000f74:	7bba      	ldrb	r2, [r7, #14]
 8000f76:	4b53      	ldr	r3, [pc, #332]	@ (80010c4 <transmit_sensor_data+0x1cc>)
 8000f78:	701a      	strb	r2, [r3, #0]
     g_state  = ST_VOICE;       // 음성 모드 진입
 8000f7a:	4b53      	ldr	r3, [pc, #332]	@ (80010c8 <transmit_sensor_data+0x1d0>)
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	701a      	strb	r2, [r3, #0]
  	  }
    }
  	// 4) 상태머신으로 이번 주기 전송값 결정
  		      uint16_t tx_x = ADC_NEU, tx_y = ADC_NEU, tx_z = ADC_NEU;
 8000f80:	f240 73da 	movw	r3, #2010	@ 0x7da
 8000f84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000f86:	f240 73da 	movw	r3, #2010	@ 0x7da
 8000f8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000f8c:	f240 73da 	movw	r3, #2010	@ 0x7da
 8000f90:	857b      	strh	r3, [r7, #42]	@ 0x2a

  		      switch (g_state)
 8000f92:	4b4d      	ldr	r3, [pc, #308]	@ (80010c8 <transmit_sensor_data+0x1d0>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <transmit_sensor_data+0xaa>
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d008      	beq.n	8000fb2 <transmit_sensor_data+0xba>
 8000fa0:	e019      	b.n	8000fd6 <transmit_sensor_data+0xde>
  		      {
  		        case ST_IDLE:
  		          if (active) g_state = ST_JOYSTICK;
 8000fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d038      	beq.n	800101c <transmit_sensor_data+0x124>
 8000faa:	4b47      	ldr	r3, [pc, #284]	@ (80010c8 <transmit_sensor_data+0x1d0>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
  		          // IDLE은 정지값 유지(송신은 해도 되고 안 해도 됨: 여기선 보냄)
  		          break;
 8000fb0:	e034      	b.n	800101c <transmit_sensor_data+0x124>

  		        case ST_JOYSTICK:
  		          if (!active){
 8000fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <transmit_sensor_data+0xd0>
  		            g_state = ST_IDLE;
 8000fc0:	4b41      	ldr	r3, [pc, #260]	@ (80010c8 <transmit_sensor_data+0x1d0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
  		          } else {
  		            tx_x = x; tx_y = y; tx_z = z;      // 조이스틱 값 그대로
  		          }
  		          break;
 8000fc6:	e02a      	b.n	800101e <transmit_sensor_data+0x126>
  		            tx_x = x; tx_y = y; tx_z = z;      // 조이스틱 값 그대로
 8000fc8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000fca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000fcc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000fce:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000fd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fd2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  		          break;
 8000fd4:	e023      	b.n	800101e <transmit_sensor_data+0x126>

  		        case ST_VOICE:
  		        default:
  		          if (active){
 8000fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d009      	beq.n	8000ff2 <transmit_sensor_data+0xfa>
  		            g_state = ST_JOYSTICK;            // 조이스틱 우선
 8000fde:	4b3a      	ldr	r3, [pc, #232]	@ (80010c8 <transmit_sensor_data+0x1d0>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
  		            tx_x = x; tx_y = y; tx_z = z;
 8000fe4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000fe6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000fe8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000fea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000fec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000fee:	857b      	strh	r3, [r7, #42]	@ 0x2a
  		          } else {
  		            triplet_t t = VOICE_MAP[last_cmd];
  		            tx_x = t.x; tx_y = t.y; tx_z = t.z; // 음성 등가값
  		          }
  		          break;
 8000ff0:	e015      	b.n	800101e <transmit_sensor_data+0x126>
  		            triplet_t t = VOICE_MAP[last_cmd];
 8000ff2:	4b34      	ldr	r3, [pc, #208]	@ (80010c4 <transmit_sensor_data+0x1cc>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4a34      	ldr	r2, [pc, #208]	@ (80010cc <transmit_sensor_data+0x1d4>)
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	440b      	add	r3, r1
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	441a      	add	r2, r3
 8001004:	463b      	mov	r3, r7
 8001006:	6810      	ldr	r0, [r2, #0]
 8001008:	6018      	str	r0, [r3, #0]
 800100a:	8892      	ldrh	r2, [r2, #4]
 800100c:	809a      	strh	r2, [r3, #4]
  		            tx_x = t.x; tx_y = t.y; tx_z = t.z; // 음성 등가값
 800100e:	883b      	ldrh	r3, [r7, #0]
 8001010:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	857b      	strh	r3, [r7, #42]	@ 0x2a
  		          break;
 800101a:	e000      	b.n	800101e <transmit_sensor_data+0x126>
  		          break;
 800101c:	bf00      	nop
  		      }


	//6바이트 2진 패킹
	uint8_t payload[6];
	payload[0] = (uint8_t)(x & 0xff);	//x하위8비트
 800101e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001020:	b2db      	uxtb	r3, r3
 8001022:	753b      	strb	r3, [r7, #20]
	payload[1] = (uint8_t)(x >> 8);		//x상위8비트 시프트
 8001024:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	b29b      	uxth	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	757b      	strb	r3, [r7, #21]
	payload[2] = (uint8_t)(y & 0xff);	//y하위8비트
 800102e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001030:	b2db      	uxtb	r3, r3
 8001032:	75bb      	strb	r3, [r7, #22]
	payload[3] = (uint8_t)(y >> 8);		//y상위8비트
 8001034:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001036:	0a1b      	lsrs	r3, r3, #8
 8001038:	b29b      	uxth	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	75fb      	strb	r3, [r7, #23]
	payload[4] = (uint8_t)(z & 0xff);	//z하위8비트
 800103e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001040:	b2db      	uxtb	r3, r3
 8001042:	763b      	strb	r3, [r7, #24]
	payload[5] = (uint8_t)(z >> 8);		//z상위8비트
 8001044:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b29b      	uxth	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	767b      	strb	r3, [r7, #25]

	//최종 데이터 발송
	nrf24_transmit(payload, 6);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2106      	movs	r1, #6
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fc3b 	bl	80008d0 <nrf24_transmit>

		      // 6) 디버그 로그
	const char* s = (g_state==ST_JOYSTICK)?"JOY":(g_state==ST_VOICE)?"VOICE":"IDLE";
 800105a:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <transmit_sensor_data+0x1d0>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d008      	beq.n	8001076 <transmit_sensor_data+0x17e>
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <transmit_sensor_data+0x1d0>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d101      	bne.n	8001072 <transmit_sensor_data+0x17a>
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <transmit_sensor_data+0x1d8>)
 8001070:	e002      	b.n	8001078 <transmit_sensor_data+0x180>
 8001072:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <transmit_sensor_data+0x1dc>)
 8001074:	e000      	b.n	8001078 <transmit_sensor_data+0x180>
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <transmit_sensor_data+0x1e0>)
 8001078:	61fb      	str	r3, [r7, #28]
	if (g_state==ST_VOICE) {
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <transmit_sensor_data+0x1d0>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d10e      	bne.n	80010a2 <transmit_sensor_data+0x1aa>
    printf("TX[%s] CMD:0x%02X | X:%u Y:%u Z:%u\r\n", s, last_cmd, tx_x, tx_y, tx_z);
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <transmit_sensor_data+0x1cc>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800108c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800108e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001090:	9201      	str	r2, [sp, #4]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	460b      	mov	r3, r1
 8001096:	4602      	mov	r2, r0
 8001098:	69f9      	ldr	r1, [r7, #28]
 800109a:	4810      	ldr	r0, [pc, #64]	@ (80010dc <transmit_sensor_data+0x1e4>)
 800109c:	f004 fea6 	bl	8005dec <iprintf>
    } else {
    printf("TX[%s] X:%u Y:%u Z:%u\r\n", s, tx_x, tx_y, tx_z);
		 }
  }
 80010a0:	e008      	b.n	80010b4 <transmit_sensor_data+0x1bc>
    printf("TX[%s] X:%u Y:%u Z:%u\r\n", s, tx_x, tx_y, tx_z);
 80010a2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80010a4:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 80010a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	460b      	mov	r3, r1
 80010ac:	69f9      	ldr	r1, [r7, #28]
 80010ae:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <transmit_sensor_data+0x1e8>)
 80010b0:	f004 fe9c 	bl	8005dec <iprintf>
  }
 80010b4:	bf00      	nop
 80010b6:	3730      	adds	r7, #48	@ 0x30
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000106 	.word	0x20000106
 80010c0:	20000100 	.word	0x20000100
 80010c4:	20000005 	.word	0x20000005
 80010c8:	20000108 	.word	0x20000108
 80010cc:	08006b44 	.word	0x08006b44
 80010d0:	08006af0 	.word	0x08006af0
 80010d4:	08006af8 	.word	0x08006af8
 80010d8:	08006b00 	.word	0x08006b00
 80010dc:	08006b04 	.word	0x08006b04
 80010e0:	08006b2c 	.word	0x08006b2c

080010e4 <HAL_TIM_PeriodElapsedCallback>:



//타이머가 만료될 때마다 호출되는 콜백함수 20ms주기
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    // 이벤트가 발생한 타이머가 TIM2인지 확인
    if (htim->Instance == TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010f4:	d104      	bne.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
    	//3개의 ADC값을 변환해서 그 결과를 adc_buffer에 DMA로 저장 시작
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 3);
 80010f6:	2203      	movs	r2, #3
 80010f8:	4903      	ldr	r1, [pc, #12]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010fc:	f000 fe56 	bl	8001dac <HAL_ADC_Start_DMA>
    }
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000100 	.word	0x20000100
 800110c:	2000008c 	.word	0x2000008c

08001110 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    // 이벤트가 발생한 ADC가 ADC1인지 확인
    if (hadc->Instance == ADC1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <HAL_ADC_ConvCpltCallback+0x24>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d102      	bne.n	8001128 <HAL_ADC_ConvCpltCallback+0x18>
    {
        // Main루프의 if문 조건이 참이 되어 transmit_sensor_data함수호출
        adc_conversion_complete = 1;
 8001122:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_ADC_ConvCpltCallback+0x28>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
    }
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40012400 	.word	0x40012400
 8001138:	20000106 	.word	0x20000106

0800113c <HAL_ADC_ErrorCallback>:


//ADC변환 중 오류가 발생했을 때 자동으로 호출, DMA전송을 중지
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a04      	ldr	r2, [pc, #16]	@ (800115c <HAL_ADC_ErrorCallback+0x20>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d102      	bne.n	8001154 <HAL_ADC_ErrorCallback+0x18>
    {
        // ADC 오류 발생 시, 진행 중이던 DMA를 안전하게 중지
        // 다음 타이머 주기(20ms 후)에 HAL_ADC_Start_DMA가 다시 호출되며 자동으로 복구를 시도함
        HAL_ADC_Stop_DMA(&hadc1);
 800114e:	4804      	ldr	r0, [pc, #16]	@ (8001160 <HAL_ADC_ErrorCallback+0x24>)
 8001150:	f000 ff0a 	bl	8001f68 <HAL_ADC_Stop_DMA>
    }
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40012400 	.word	0x40012400
 8001160:	2000008c 	.word	0x2000008c

08001164 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <HAL_UART_RxCpltCallback+0x30>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d109      	bne.n	800118a <HAL_UART_RxCpltCallback+0x26>
  {
    Voice_RxByteFromIRQ(rx3_byte);
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_UART_RxCpltCallback+0x34>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fb8c 	bl	8001898 <Voice_RxByteFromIRQ>
    HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 8001180:	2201      	movs	r2, #1
 8001182:	4905      	ldr	r1, [pc, #20]	@ (8001198 <HAL_UART_RxCpltCallback+0x34>)
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <HAL_UART_RxCpltCallback+0x38>)
 8001186:	f003 ffe8 	bl	800515a <HAL_UART_Receive_IT>
  }
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40004800 	.word	0x40004800
 8001198:	20000107 	.word	0x20000107
 800119c:	200001f8 	.word	0x200001f8

080011a0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <HAL_UART_ErrorCallback+0x24>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d104      	bne.n	80011bc <HAL_UART_ErrorCallback+0x1c>
  {
    HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	4904      	ldr	r1, [pc, #16]	@ (80011c8 <HAL_UART_ErrorCallback+0x28>)
 80011b6:	4805      	ldr	r0, [pc, #20]	@ (80011cc <HAL_UART_ErrorCallback+0x2c>)
 80011b8:	f003 ffcf 	bl	800515a <HAL_UART_Receive_IT>
  }
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40004800 	.word	0x40004800
 80011c8:	20000107 	.word	0x20000107
 80011cc:	200001f8 	.word	0x200001f8

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */

	__disable_irq();
	  while (1) { }
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <Error_Handler+0x8>

080011dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011e0:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <MX_SPI1_Init+0x64>)
 80011e2:	4a18      	ldr	r2, [pc, #96]	@ (8001244 <MX_SPI1_Init+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <MX_SPI1_Init+0x64>)
 80011e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <MX_SPI1_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001200:	4b0f      	ldr	r3, [pc, #60]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800120c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800120e:	4b0c      	ldr	r3, [pc, #48]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001210:	2218      	movs	r2, #24
 8001212:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001214:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <MX_SPI1_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <MX_SPI1_Init+0x64>)
 8001228:	220a      	movs	r2, #10
 800122a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	@ (8001240 <MX_SPI1_Init+0x64>)
 800122e:	f002 fd33 	bl	8003c98 <HAL_SPI_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001238:	f7ff ffca 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000010c 	.word	0x2000010c
 8001244:	40013000 	.word	0x40013000

08001248 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1b      	ldr	r2, [pc, #108]	@ (80012d0 <HAL_SPI_MspInit+0x88>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d12f      	bne.n	80012c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <HAL_SPI_MspInit+0x8c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a19      	ldr	r2, [pc, #100]	@ (80012d4 <HAL_SPI_MspInit+0x8c>)
 800126e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_SPI_MspInit+0x8c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_SPI_MspInit+0x8c>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a13      	ldr	r2, [pc, #76]	@ (80012d4 <HAL_SPI_MspInit+0x8c>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_SPI_MspInit+0x8c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001298:	23a0      	movs	r3, #160	@ 0xa0
 800129a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	480b      	ldr	r0, [pc, #44]	@ (80012d8 <HAL_SPI_MspInit+0x90>)
 80012ac:	f001 fddc 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b0:	2340      	movs	r3, #64	@ 0x40
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <HAL_SPI_MspInit+0x90>)
 80012c4:	f001 fdd0 	bl	8002e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40013000 	.word	0x40013000
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010800 	.word	0x40010800

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_MspInit+0x5c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <HAL_MspInit+0x5c>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6193      	str	r3, [r2, #24]
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_MspInit+0x5c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_MspInit+0x5c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001338 <HAL_MspInit+0x5c>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <HAL_MspInit+0x5c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001312:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_MspInit+0x60>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	4a04      	ldr	r2, [pc, #16]	@ (800133c <HAL_MspInit+0x60>)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <NMI_Handler+0x4>

08001348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <MemManage_Handler+0x4>

08001358 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <UsageFault_Handler+0x4>

08001368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 fbf4 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <DMA1_Channel1_IRQHandler+0x10>)
 800139e:	f001 fc2f 	bl	8002c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200000bc 	.word	0x200000bc

080013ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <ADC1_2_IRQHandler+0x10>)
 80013b2:	f000 fe25 	bl	8002000 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000008c 	.word	0x2000008c

080013c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <TIM2_IRQHandler+0x10>)
 80013c6:	f003 fa9d 	bl	8004904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000168 	.word	0x20000168

080013d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <USART3_IRQHandler+0x10>)
 80013da:	f003 fee3 	bl	80051a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001f8 	.word	0x200001f8

080013e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e00a      	b.n	8001410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013fa:	f3af 8000 	nop.w
 80013fe:	4601      	mov	r1, r0
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	60ba      	str	r2, [r7, #8]
 8001406:	b2ca      	uxtb	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf0      	blt.n	80013fa <_read+0x12>
  }

  return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e009      	b.n	8001448 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fd49 	bl	8000ed4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf1      	blt.n	8001434 <_write+0x12>
  }
  return len;
 8001450:	687b      	ldr	r3, [r7, #4]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_close>:

int _close(int file)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001480:	605a      	str	r2, [r3, #4]
  return 0;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <_isatty>:

int _isatty(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
	...

080014bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c4:	4a14      	ldr	r2, [pc, #80]	@ (8001518 <_sbrk+0x5c>)
 80014c6:	4b15      	ldr	r3, [pc, #84]	@ (800151c <_sbrk+0x60>)
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <_sbrk+0x64>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <_sbrk+0x68>)
 80014dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d207      	bcs.n	80014fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ec:	f004 fd22 	bl	8005f34 <__errno>
 80014f0:	4603      	mov	r3, r0
 80014f2:	220c      	movs	r2, #12
 80014f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e009      	b.n	8001510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	4a05      	ldr	r2, [pc, #20]	@ (8001520 <_sbrk+0x64>)
 800150c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20005000 	.word	0x20005000
 800151c:	00000400 	.word	0x00000400
 8001520:	20000164 	.word	0x20000164
 8001524:	200003a8 	.word	0x200003a8

08001528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	463b      	mov	r3, r7
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001550:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <MX_TIM2_Init+0x94>)
 8001552:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001556:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <MX_TIM2_Init+0x94>)
 800155a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800155e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b19      	ldr	r3, [pc, #100]	@ (80015c8 <MX_TIM2_Init+0x94>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <MX_TIM2_Init+0x94>)
 8001568:	22c7      	movs	r2, #199	@ 0xc7
 800156a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <MX_TIM2_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <MX_TIM2_Init+0x94>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001578:	4813      	ldr	r0, [pc, #76]	@ (80015c8 <MX_TIM2_Init+0x94>)
 800157a:	f003 f922 	bl	80047c2 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001584:	f7ff fe24 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800158c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <MX_TIM2_Init+0x94>)
 8001596:	f003 faa5 	bl	8004ae4 <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015a0:	f7ff fe16 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_TIM2_Init+0x94>)
 80015b2:	f003 fc87 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015bc:	f7ff fe08 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000168 	.word	0x20000168

080015cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015dc:	d113      	bne.n	8001606 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <HAL_TIM_Base_MspInit+0x44>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001610 <HAL_TIM_Base_MspInit+0x44>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_TIM_Base_MspInit+0x44>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	201c      	movs	r0, #28
 80015fc:	f001 f95b 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001600:	201c      	movs	r0, #28
 8001602:	f001 f974 	bl	80028ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000

08001614 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 800161a:	4a12      	ldr	r2, [pc, #72]	@ (8001664 <MX_USART2_UART_Init+0x50>)
 800161c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 8001620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001638:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 800163a:	220c      	movs	r2, #12
 800163c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 8001646:	2200      	movs	r2, #0
 8001648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <MX_USART2_UART_Init+0x4c>)
 800164c:	f003 fcaa 	bl	8004fa4 <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001656:	f7ff fdbb 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200001b0 	.word	0x200001b0
 8001664:	40004400 	.word	0x40004400

08001668 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <MX_USART3_UART_Init+0x4c>)
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <MX_USART3_UART_Init+0x50>)
 8001670:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <MX_USART3_UART_Init+0x4c>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <MX_USART3_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <MX_USART3_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <MX_USART3_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <MX_USART3_UART_Init+0x4c>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <MX_USART3_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <MX_USART3_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_USART3_UART_Init+0x4c>)
 80016a0:	f003 fc80 	bl	8004fa4 <HAL_UART_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016aa:	f7ff fd91 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200001f8 	.word	0x200001f8
 80016b8:	40004800 	.word	0x40004800

080016bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a3b      	ldr	r2, [pc, #236]	@ (80017c4 <HAL_UART_MspInit+0x108>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d130      	bne.n	800173e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016dc:	4b3a      	ldr	r3, [pc, #232]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	4a39      	ldr	r2, [pc, #228]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 80016e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e6:	61d3      	str	r3, [r2, #28]
 80016e8:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a33      	ldr	r2, [pc, #204]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800170c:	2304      	movs	r3, #4
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	4619      	mov	r1, r3
 800171e:	482b      	ldr	r0, [pc, #172]	@ (80017cc <HAL_UART_MspInit+0x110>)
 8001720:	f001 fba2 	bl	8002e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001724:	2308      	movs	r3, #8
 8001726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0318 	add.w	r3, r7, #24
 8001734:	4619      	mov	r1, r3
 8001736:	4825      	ldr	r0, [pc, #148]	@ (80017cc <HAL_UART_MspInit+0x110>)
 8001738:	f001 fb96 	bl	8002e68 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800173c:	e03e      	b.n	80017bc <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a23      	ldr	r2, [pc, #140]	@ (80017d0 <HAL_UART_MspInit+0x114>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d139      	bne.n	80017bc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001748:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	4a1e      	ldr	r2, [pc, #120]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 800174e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001752:	61d3      	str	r3, [r2, #28]
 8001754:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a18      	ldr	r2, [pc, #96]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <HAL_UART_MspInit+0x10c>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	4619      	mov	r1, r3
 800178c:	4811      	ldr	r0, [pc, #68]	@ (80017d4 <HAL_UART_MspInit+0x118>)
 800178e:	f001 fb6b 	bl	8002e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001792:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	f107 0318 	add.w	r3, r7, #24
 80017a4:	4619      	mov	r1, r3
 80017a6:	480b      	ldr	r0, [pc, #44]	@ (80017d4 <HAL_UART_MspInit+0x118>)
 80017a8:	f001 fb5e 	bl	8002e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2027      	movs	r0, #39	@ 0x27
 80017b2:	f001 f880 	bl	80028b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017b6:	2027      	movs	r0, #39	@ 0x27
 80017b8:	f001 f899 	bl	80028ee <HAL_NVIC_EnableIRQ>
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	@ 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40004400 	.word	0x40004400
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010800 	.word	0x40010800
 80017d0:	40004800 	.word	0x40004800
 80017d4:	40010c00 	.word	0x40010c00

080017d8 <Voice_CalcChecksum>:

static volatile bool     s_ready = false;
static volatile uint8_t  s_last[6];   // 메인 루프에서 읽을 최종 프레임

uint8_t Voice_CalcChecksum(uint8_t head, uint8_t cmd, uint8_t al, uint8_t ah)
{
 80017d8:	b490      	push	{r4, r7}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4604      	mov	r4, r0
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	4603      	mov	r3, r0
 80017ec:	71bb      	strb	r3, [r7, #6]
 80017ee:	460b      	mov	r3, r1
 80017f0:	717b      	strb	r3, [r7, #5]
 80017f2:	4613      	mov	r3, r2
 80017f4:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((head ^ cmd ^ al ^ ah) & 0xFF);
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	79bb      	ldrb	r3, [r7, #6]
 80017fa:	4053      	eors	r3, r2
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	797b      	ldrb	r3, [r7, #5]
 8001800:	4053      	eors	r3, r2
 8001802:	b2da      	uxtb	r2, r3
 8001804:	793b      	ldrb	r3, [r7, #4]
 8001806:	4053      	eors	r3, r2
 8001808:	b2db      	uxtb	r3, r3
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bc90      	pop	{r4, r7}
 8001812:	4770      	bx	lr

08001814 <Voice_ValidateRaw6>:

bool Voice_ValidateRaw6(const uint8_t f[6])
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
    if (f[0] != 0xAA) return false;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2baa      	cmp	r3, #170	@ 0xaa
 8001822:	d001      	beq.n	8001828 <Voice_ValidateRaw6+0x14>
 8001824:	2300      	movs	r3, #0
 8001826:	e01d      	b.n	8001864 <Voice_ValidateRaw6+0x50>
    if (f[5] != 0x55) return false;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3305      	adds	r3, #5
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b55      	cmp	r3, #85	@ 0x55
 8001830:	d001      	beq.n	8001836 <Voice_ValidateRaw6+0x22>
 8001832:	2300      	movs	r3, #0
 8001834:	e016      	b.n	8001864 <Voice_ValidateRaw6+0x50>
    uint8_t chk = Voice_CalcChecksum(0xAA, f[1], f[2], f[3]);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	7819      	ldrb	r1, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3302      	adds	r3, #2
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3303      	adds	r3, #3
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	20aa      	movs	r0, #170	@ 0xaa
 800184a:	f7ff ffc5 	bl	80017d8 <Voice_CalcChecksum>
 800184e:	4603      	mov	r3, r0
 8001850:	73fb      	strb	r3, [r7, #15]
    return (chk == f[4]);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	429a      	cmp	r2, r3
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <Voice_Init>:

void Voice_Init(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
    s_rx_state = RX_ST_WAIT_HEAD;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <Voice_Init+0x20>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
    s_idx = 0;
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <Voice_Init+0x24>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
    s_ready = false;
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <Voice_Init+0x28>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000240 	.word	0x20000240
 8001890:	20000241 	.word	0x20000241
 8001894:	2000024a 	.word	0x2000024a

08001898 <Voice_RxByteFromIRQ>:

void Voice_RxByteFromIRQ(uint8_t b)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
    switch (s_rx_state)
 80018a2:	4b48      	ldr	r3, [pc, #288]	@ (80019c4 <Voice_RxByteFromIRQ+0x12c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	f200 8085 	bhi.w	80019b8 <Voice_RxByteFromIRQ+0x120>
 80018ae:	a201      	add	r2, pc, #4	@ (adr r2, 80018b4 <Voice_RxByteFromIRQ+0x1c>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	080018cd 	.word	0x080018cd
 80018b8:	080018e7 	.word	0x080018e7
 80018bc:	08001905 	.word	0x08001905
 80018c0:	08001923 	.word	0x08001923
 80018c4:	08001941 	.word	0x08001941
 80018c8:	0800195f 	.word	0x0800195f
    {
        case RX_ST_WAIT_HEAD:
            if (b == 0xAA) {
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2baa      	cmp	r3, #170	@ 0xaa
 80018d0:	d171      	bne.n	80019b6 <Voice_RxByteFromIRQ+0x11e>
                s_work[0] = 0xAA;
 80018d2:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <Voice_RxByteFromIRQ+0x130>)
 80018d4:	22aa      	movs	r2, #170	@ 0xaa
 80018d6:	701a      	strb	r2, [r3, #0]
                s_idx = 1;
 80018d8:	4b3c      	ldr	r3, [pc, #240]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
                s_rx_state = RX_ST_GET_CMD;
 80018de:	4b39      	ldr	r3, [pc, #228]	@ (80019c4 <Voice_RxByteFromIRQ+0x12c>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80018e4:	e067      	b.n	80019b6 <Voice_RxByteFromIRQ+0x11e>

        case RX_ST_GET_CMD:
            s_work[s_idx++] = b;
 80018e6:	4b39      	ldr	r3, [pc, #228]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	b2d1      	uxtb	r1, r2
 80018f0:	4a36      	ldr	r2, [pc, #216]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 80018f2:	7011      	strb	r1, [r2, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	4a34      	ldr	r2, [pc, #208]	@ (80019c8 <Voice_RxByteFromIRQ+0x130>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_AL;
 80018fc:	4b31      	ldr	r3, [pc, #196]	@ (80019c4 <Voice_RxByteFromIRQ+0x12c>)
 80018fe:	2202      	movs	r2, #2
 8001900:	701a      	strb	r2, [r3, #0]
            break;
 8001902:	e059      	b.n	80019b8 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_AL:
            s_work[s_idx++] = b;
 8001904:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	b2d1      	uxtb	r1, r2
 800190e:	4a2f      	ldr	r2, [pc, #188]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 8001910:	7011      	strb	r1, [r2, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	4a2c      	ldr	r2, [pc, #176]	@ (80019c8 <Voice_RxByteFromIRQ+0x130>)
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_AH;
 800191a:	4b2a      	ldr	r3, [pc, #168]	@ (80019c4 <Voice_RxByteFromIRQ+0x12c>)
 800191c:	2203      	movs	r2, #3
 800191e:	701a      	strb	r2, [r3, #0]
            break;
 8001920:	e04a      	b.n	80019b8 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_AH:
            s_work[s_idx++] = b;
 8001922:	4b2a      	ldr	r3, [pc, #168]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	b2d1      	uxtb	r1, r2
 800192c:	4a27      	ldr	r2, [pc, #156]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 800192e:	7011      	strb	r1, [r2, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	4a25      	ldr	r2, [pc, #148]	@ (80019c8 <Voice_RxByteFromIRQ+0x130>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_CHK;
 8001938:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <Voice_RxByteFromIRQ+0x12c>)
 800193a:	2204      	movs	r2, #4
 800193c:	701a      	strb	r2, [r3, #0]
            break;
 800193e:	e03b      	b.n	80019b8 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_CHK:
            s_work[s_idx++] = b;
 8001940:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	b2d1      	uxtb	r1, r2
 800194a:	4a20      	ldr	r2, [pc, #128]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 800194c:	7011      	strb	r1, [r2, #0]
 800194e:	4619      	mov	r1, r3
 8001950:	4a1d      	ldr	r2, [pc, #116]	@ (80019c8 <Voice_RxByteFromIRQ+0x130>)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_TAIL;
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <Voice_RxByteFromIRQ+0x12c>)
 8001958:	2205      	movs	r2, #5
 800195a:	701a      	strb	r2, [r3, #0]
            break;
 800195c:	e02c      	b.n	80019b8 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_TAIL:
            s_work[s_idx++] = b; // tail
 800195e:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	b2d1      	uxtb	r1, r2
 8001968:	4a18      	ldr	r2, [pc, #96]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 800196a:	7011      	strb	r1, [r2, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	4a16      	ldr	r2, [pc, #88]	@ (80019c8 <Voice_RxByteFromIRQ+0x130>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	5453      	strb	r3, [r2, r1]
            if (s_idx == 6) {
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b06      	cmp	r3, #6
 800197c:	d114      	bne.n	80019a8 <Voice_RxByteFromIRQ+0x110>
                for (int i = 0; i < 6; ++i) s_last[i] = s_work[i];
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	e00b      	b.n	800199c <Voice_RxByteFromIRQ+0x104>
 8001984:	4a10      	ldr	r2, [pc, #64]	@ (80019c8 <Voice_RxByteFromIRQ+0x130>)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4413      	add	r3, r2
 800198a:	7819      	ldrb	r1, [r3, #0]
 800198c:	4a10      	ldr	r2, [pc, #64]	@ (80019d0 <Voice_RxByteFromIRQ+0x138>)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	460a      	mov	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3301      	adds	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	ddf0      	ble.n	8001984 <Voice_RxByteFromIRQ+0xec>
                s_ready = true;
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <Voice_RxByteFromIRQ+0x13c>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
            }
            s_rx_state = RX_ST_WAIT_HEAD;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <Voice_RxByteFromIRQ+0x12c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
            s_idx = 0;
 80019ae:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <Voice_RxByteFromIRQ+0x134>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
            break;
 80019b4:	e000      	b.n	80019b8 <Voice_RxByteFromIRQ+0x120>
            break;
 80019b6:	bf00      	nop
    }
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000240 	.word	0x20000240
 80019c8:	20000244 	.word	0x20000244
 80019cc:	20000241 	.word	0x20000241
 80019d0:	2000024c 	.word	0x2000024c
 80019d4:	2000024a 	.word	0x2000024a

080019d8 <Voice_FrameAvailable>:

bool Voice_FrameAvailable(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
    return s_ready;
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <Voice_FrameAvailable+0x14>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	2000024a 	.word	0x2000024a

080019f0 <Voice_TryPopFrame>:

bool Voice_TryPopFrame(voice_frame_t* out)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    if (!s_ready) return false;
 80019f8:	4b28      	ldr	r3, [pc, #160]	@ (8001a9c <Voice_TryPopFrame+0xac>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f083 0301 	eor.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <Voice_TryPopFrame+0x1c>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e043      	b.n	8001a94 <Voice_TryPopFrame+0xa4>

    uint8_t f[6];
    for (int i = 0; i < 6; ++i) f[i] = s_last[i];
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e00d      	b.n	8001a2e <Voice_TryPopFrame+0x3e>
 8001a12:	4a23      	ldr	r2, [pc, #140]	@ (8001aa0 <Voice_TryPopFrame+0xb0>)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2d9      	uxtb	r1, r3
 8001a1c:	f107 0208 	add.w	r2, r7, #8
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	4413      	add	r3, r2
 8001a24:	460a      	mov	r2, r1
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	ddee      	ble.n	8001a12 <Voice_TryPopFrame+0x22>
    s_ready = false;
 8001a34:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <Voice_TryPopFrame+0xac>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]

    if (!Voice_ValidateRaw6(f)) return false;
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fee8 	bl	8001814 <Voice_ValidateRaw6>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f083 0301 	eor.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <Voice_TryPopFrame+0x64>
 8001a50:	2300      	movs	r3, #0
 8001a52:	e01f      	b.n	8001a94 <Voice_TryPopFrame+0xa4>

    if (out) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01b      	beq.n	8001a92 <Voice_TryPopFrame+0xa2>
        for (int i = 0; i < 6; ++i) out->raw[i] = f[i];
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	e00c      	b.n	8001a7a <Voice_TryPopFrame+0x8a>
 8001a60:	f107 0208 	add.w	r2, r7, #8
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	7819      	ldrb	r1, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4413      	add	r3, r2
 8001a70:	460a      	mov	r2, r1
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	3301      	adds	r3, #1
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	ddef      	ble.n	8001a60 <Voice_TryPopFrame+0x70>
        out->cmd = f[1];
 8001a80:	7a7a      	ldrb	r2, [r7, #9]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	719a      	strb	r2, [r3, #6]
        out->al  = f[2];
 8001a86:	7aba      	ldrb	r2, [r7, #10]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	71da      	strb	r2, [r3, #7]
        out->ah  = f[3];
 8001a8c:	7afa      	ldrb	r2, [r7, #11]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	721a      	strb	r2, [r3, #8]
    }
    return true;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000024a 	.word	0x2000024a
 8001aa0:	2000024c 	.word	0x2000024c

08001aa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa4:	f7ff fd40 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa8:	480b      	ldr	r0, [pc, #44]	@ (8001ad8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aaa:	490c      	ldr	r1, [pc, #48]	@ (8001adc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ac0:	4c09      	ldr	r4, [pc, #36]	@ (8001ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ace:	f004 fa37 	bl	8005f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ad2:	f7ff f901 	bl	8000cd8 <main>
  bx lr
 8001ad6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ae0:	08006be4 	.word	0x08006be4
  ldr r2, =_sbss
 8001ae4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ae8:	200003a4 	.word	0x200003a4

08001aec <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <CAN1_RX1_IRQHandler>
	...

08001af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <HAL_Init+0x28>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <HAL_Init+0x28>)
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 fecd 	bl	80028a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 f808 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fbe6 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40022000 	.word	0x40022000

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fee5 	bl	800290a <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 fead 	bl	80028b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000008 	.word	0x20000008
 8001b74:	20000010 	.word	0x20000010
 8001b78:	2000000c 	.word	0x2000000c

08001b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_IncTick+0x1c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <HAL_IncTick+0x20>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a03      	ldr	r2, [pc, #12]	@ (8001b9c <HAL_IncTick+0x20>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000010 	.word	0x20000010
 8001b9c:	20000254 	.word	0x20000254

08001ba0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b02      	ldr	r3, [pc, #8]	@ (8001bb0 <HAL_GetTick+0x10>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	20000254 	.word	0x20000254

08001bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff fff0 	bl	8001ba0 <HAL_GetTick>
 8001bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d005      	beq.n	8001bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <HAL_Delay+0x44>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bda:	bf00      	nop
 8001bdc:	f7ff ffe0 	bl	8001ba0 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d8f7      	bhi.n	8001bdc <HAL_Delay+0x28>
  {
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000010 	.word	0x20000010

08001bfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0be      	b.n	8001d9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d109      	bne.n	8001c40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7fe ff42 	bl	8000ac4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fc01 	bl	8002448 <ADC_ConversionStop_Disable>
 8001c46:	4603      	mov	r3, r0
 8001c48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 8099 	bne.w	8001d8a <HAL_ADC_Init+0x18e>
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 8095 	bne.w	8001d8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c64:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c68:	f023 0302 	bic.w	r3, r3, #2
 8001c6c:	f043 0202 	orr.w	r2, r3, #2
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	7b1b      	ldrb	r3, [r3, #12]
 8001c82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c94:	d003      	beq.n	8001c9e <HAL_ADC_Init+0xa2>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d102      	bne.n	8001ca4 <HAL_ADC_Init+0xa8>
 8001c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ca2:	e000      	b.n	8001ca6 <HAL_ADC_Init+0xaa>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7d1b      	ldrb	r3, [r3, #20]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d119      	bne.n	8001ce8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7b1b      	ldrb	r3, [r3, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	035a      	lsls	r2, r3, #13
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	e00b      	b.n	8001ce8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd4:	f043 0220 	orr.w	r2, r3, #32
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce0:	f043 0201 	orr.w	r2, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <HAL_ADC_Init+0x1a8>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d18:	d003      	beq.n	8001d22 <HAL_ADC_Init+0x126>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d104      	bne.n	8001d2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	051b      	lsls	r3, r3, #20
 8001d2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d32:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <HAL_ADC_Init+0x1ac>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d10b      	bne.n	8001d68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5a:	f023 0303 	bic.w	r3, r3, #3
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d66:	e018      	b.n	8001d9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6c:	f023 0312 	bic.w	r3, r3, #18
 8001d70:	f043 0210 	orr.w	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d88:	e007      	b.n	8001d9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8e:	f043 0210 	orr.w	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	ffe1f7fd 	.word	0xffe1f7fd
 8001da8:	ff1f0efe 	.word	0xff1f0efe

08001dac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a64      	ldr	r2, [pc, #400]	@ (8001f54 <HAL_ADC_Start_DMA+0x1a8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_ADC_Start_DMA+0x24>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a63      	ldr	r2, [pc, #396]	@ (8001f58 <HAL_ADC_Start_DMA+0x1ac>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d106      	bne.n	8001dde <HAL_ADC_Start_DMA+0x32>
 8001dd0:	4b60      	ldr	r3, [pc, #384]	@ (8001f54 <HAL_ADC_Start_DMA+0x1a8>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 80b3 	bne.w	8001f44 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_Start_DMA+0x40>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0ae      	b.n	8001f4a <HAL_ADC_Start_DMA+0x19e>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 facd 	bl	8002394 <ADC_Enable>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 809a 	bne.w	8001f3a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8001f58 <HAL_ADC_Start_DMA+0x1ac>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_Start_DMA+0x84>
 8001e24:	4b4b      	ldr	r3, [pc, #300]	@ (8001f54 <HAL_ADC_Start_DMA+0x1a8>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d115      	bne.n	8001e5c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d026      	beq.n	8001e98 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e5a:	e01d      	b.n	8001e98 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a39      	ldr	r2, [pc, #228]	@ (8001f54 <HAL_ADC_Start_DMA+0x1a8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d004      	beq.n	8001e7c <HAL_ADC_Start_DMA+0xd0>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a38      	ldr	r2, [pc, #224]	@ (8001f58 <HAL_ADC_Start_DMA+0x1ac>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10d      	bne.n	8001e98 <HAL_ADC_Start_DMA+0xec>
 8001e7c:	4b35      	ldr	r3, [pc, #212]	@ (8001f54 <HAL_ADC_Start_DMA+0x1a8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea8:	f023 0206 	bic.w	r2, r3, #6
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001eb0:	e002      	b.n	8001eb8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a25      	ldr	r2, [pc, #148]	@ (8001f5c <HAL_ADC_Start_DMA+0x1b0>)
 8001ec6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4a24      	ldr	r2, [pc, #144]	@ (8001f60 <HAL_ADC_Start_DMA+0x1b4>)
 8001ece:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	4a23      	ldr	r2, [pc, #140]	@ (8001f64 <HAL_ADC_Start_DMA+0x1b8>)
 8001ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0202 	mvn.w	r2, #2
 8001ee0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ef0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a18      	ldr	r0, [r3, #32]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	334c      	adds	r3, #76	@ 0x4c
 8001efc:	4619      	mov	r1, r3
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f000 fd69 	bl	80029d8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f10:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f14:	d108      	bne.n	8001f28 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001f24:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f26:	e00f      	b.n	8001f48 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f36:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f38:	e006      	b.n	8001f48 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001f42:	e001      	b.n	8001f48 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40012400 	.word	0x40012400
 8001f58:	40012800 	.word	0x40012800
 8001f5c:	080024cb 	.word	0x080024cb
 8001f60:	08002547 	.word	0x08002547
 8001f64:	08002563 	.word	0x08002563

08001f68 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_Stop_DMA+0x1a>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e03a      	b.n	8001ff8 <HAL_ADC_Stop_DMA+0x90>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fa5c 	bl	8002448 <ADC_ConversionStop_Disable>
 8001f90:	4603      	mov	r3, r0
 8001f92:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d129      	bne.n	8001fee <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d11a      	bne.n	8001fee <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fd6b 	bl	8002a98 <HAL_DMA_Abort>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10a      	bne.n	8001fe2 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fe0:	e005      	b.n	8001fee <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d03e      	beq.n	80020a0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d039      	beq.n	80020a0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	2b00      	cmp	r3, #0
 8002036:	d105      	bne.n	8002044 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800204e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002052:	d11d      	bne.n	8002090 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002058:	2b00      	cmp	r3, #0
 800205a:	d119      	bne.n	8002090 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0220 	bic.w	r2, r2, #32
 800206a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002070:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff f83d 	bl	8001110 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f06f 0212 	mvn.w	r2, #18
 800209e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d04d      	beq.n	8002146 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d048      	beq.n	8002146 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d105      	bne.n	80020cc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80020d6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80020da:	d012      	beq.n	8002102 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d125      	bne.n	8002136 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80020f4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020f8:	d11d      	bne.n	8002136 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d119      	bne.n	8002136 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002110:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002116:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d105      	bne.n	8002136 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	f043 0201 	orr.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fadc 	bl	80026f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 020c 	mvn.w	r2, #12
 8002144:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d012      	beq.n	8002176 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f812 	bl	8002190 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0201 	mvn.w	r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x20>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0dc      	b.n	800237e <HAL_ADC_ConfigChannel+0x1da>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b06      	cmp	r3, #6
 80021d2:	d81c      	bhi.n	800220e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	3b05      	subs	r3, #5
 80021e6:	221f      	movs	r2, #31
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4019      	ands	r1, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b05      	subs	r3, #5
 8002200:	fa00 f203 	lsl.w	r2, r0, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	635a      	str	r2, [r3, #52]	@ 0x34
 800220c:	e03c      	b.n	8002288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d81c      	bhi.n	8002250 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	3b23      	subs	r3, #35	@ 0x23
 8002228:	221f      	movs	r2, #31
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	4019      	ands	r1, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	3b23      	subs	r3, #35	@ 0x23
 8002242:	fa00 f203 	lsl.w	r2, r0, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	631a      	str	r2, [r3, #48]	@ 0x30
 800224e:	e01b      	b.n	8002288 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b41      	subs	r3, #65	@ 0x41
 8002262:	221f      	movs	r2, #31
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	4019      	ands	r1, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b41      	subs	r3, #65	@ 0x41
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d91c      	bls.n	80022ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68d9      	ldr	r1, [r3, #12]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	2207      	movs	r2, #7
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4019      	ands	r1, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6898      	ldr	r0, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	3b1e      	subs	r3, #30
 80022bc:	fa00 f203 	lsl.w	r2, r0, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	e019      	b.n	80022fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6919      	ldr	r1, [r3, #16]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	2207      	movs	r2, #7
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	4019      	ands	r1, r3
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	6898      	ldr	r0, [r3, #8]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	fa00 f203 	lsl.w	r2, r0, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d003      	beq.n	800230e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800230a:	2b11      	cmp	r3, #17
 800230c:	d132      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1d      	ldr	r2, [pc, #116]	@ (8002388 <HAL_ADC_ConfigChannel+0x1e4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d125      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d126      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002334:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b10      	cmp	r3, #16
 800233c:	d11a      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800233e:	4b13      	ldr	r3, [pc, #76]	@ (800238c <HAL_ADC_ConfigChannel+0x1e8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a13      	ldr	r2, [pc, #76]	@ (8002390 <HAL_ADC_ConfigChannel+0x1ec>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	0c9a      	lsrs	r2, r3, #18
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002354:	e002      	b.n	800235c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3b01      	subs	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f9      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x1b2>
 8002362:	e007      	b.n	8002374 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800237c:	7bfb      	ldrb	r3, [r7, #15]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	40012400 	.word	0x40012400
 800238c:	20000008 	.word	0x20000008
 8002390:	431bde83 	.word	0x431bde83

08002394 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d040      	beq.n	8002434 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002440 <ADC_Enable+0xac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002444 <ADC_Enable+0xb0>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	0c9b      	lsrs	r3, r3, #18
 80023ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023d0:	e002      	b.n	80023d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023de:	f7ff fbdf 	bl	8001ba0 <HAL_GetTick>
 80023e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023e4:	e01f      	b.n	8002426 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023e6:	f7ff fbdb 	bl	8001ba0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d918      	bls.n	8002426 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d011      	beq.n	8002426 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002406:	f043 0210 	orr.w	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e007      	b.n	8002436 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d1d8      	bne.n	80023e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000008 	.word	0x20000008
 8002444:	431bde83 	.word	0x431bde83

08002448 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d12e      	bne.n	80024c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002472:	f7ff fb95 	bl	8001ba0 <HAL_GetTick>
 8002476:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002478:	e01b      	b.n	80024b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800247a:	f7ff fb91 	bl	8001ba0 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d914      	bls.n	80024b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10d      	bne.n	80024b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e007      	b.n	80024c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d0dc      	beq.n	800247a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d127      	bne.n	8002534 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80024fa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024fe:	d115      	bne.n	800252c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002504:	2b00      	cmp	r3, #0
 8002506:	d111      	bne.n	800252c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f7fe fdef 	bl	8001110 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002532:	e004      	b.n	800253e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff fe12 	bl	800217e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7fe fdd7 	bl	800113c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_ADCEx_Calibration_Start+0x1e>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e097      	b.n	80026e6 <HAL_ADCEx_Calibration_Start+0x14e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ff42 	bl	8002448 <ADC_ConversionStop_Disable>
 80025c4:	4603      	mov	r3, r0
 80025c6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fee3 	bl	8002394 <ADC_Enable>
 80025ce:	4603      	mov	r3, r0
 80025d0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 8081 	bne.w	80026dc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025e2:	f023 0302 	bic.w	r3, r3, #2
 80025e6:	f043 0202 	orr.w	r2, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80025ee:	4b40      	ldr	r3, [pc, #256]	@ (80026f0 <HAL_ADCEx_Calibration_Start+0x158>)
 80025f0:	681c      	ldr	r4, [r3, #0]
 80025f2:	2002      	movs	r0, #2
 80025f4:	f001 fa9a 	bl	8003b2c <HAL_RCCEx_GetPeriphCLKFreq>
 80025f8:	4603      	mov	r3, r0
 80025fa:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80025fe:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002600:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002602:	e002      	b.n	800260a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3b01      	subs	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f9      	bne.n	8002604 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0208 	orr.w	r2, r2, #8
 800261e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002620:	f7ff fabe 	bl	8001ba0 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002626:	e01b      	b.n	8002660 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002628:	f7ff faba 	bl	8001ba0 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b0a      	cmp	r3, #10
 8002634:	d914      	bls.n	8002660 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002648:	f023 0312 	bic.w	r3, r3, #18
 800264c:	f043 0210 	orr.w	r2, r3, #16
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e042      	b.n	80026e6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1dc      	bne.n	8002628 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0204 	orr.w	r2, r2, #4
 800267c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800267e:	f7ff fa8f 	bl	8001ba0 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002684:	e01b      	b.n	80026be <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002686:	f7ff fa8b 	bl	8001ba0 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b0a      	cmp	r3, #10
 8002692:	d914      	bls.n	80026be <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00d      	beq.n	80026be <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a6:	f023 0312 	bic.w	r3, r3, #18
 80026aa:	f043 0210 	orr.w	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e013      	b.n	80026e6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1dc      	bne.n	8002686 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d0:	f023 0303 	bic.w	r3, r3, #3
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000008 	.word	0x20000008

080026f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
	...

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273a:	4a04      	ldr	r2, [pc, #16]	@ (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60d3      	str	r3, [r2, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4906      	ldr	r1, [pc, #24]	@ (80027a0 <__NVIC_EnableIRQ+0x34>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	e000e100 	.word	0xe000e100

080027a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db0a      	blt.n	80027ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	490c      	ldr	r1, [pc, #48]	@ (80027f0 <__NVIC_SetPriority+0x4c>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027cc:	e00a      	b.n	80027e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4908      	ldr	r1, [pc, #32]	@ (80027f4 <__NVIC_SetPriority+0x50>)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	3b04      	subs	r3, #4
 80027dc:	0112      	lsls	r2, r2, #4
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	440b      	add	r3, r1
 80027e2:	761a      	strb	r2, [r3, #24]
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000e100 	.word	0xe000e100
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	@ 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f1c3 0307 	rsb	r3, r3, #7
 8002812:	2b04      	cmp	r3, #4
 8002814:	bf28      	it	cs
 8002816:	2304      	movcs	r3, #4
 8002818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3304      	adds	r3, #4
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <NVIC_EncodePriority+0x30>
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3b03      	subs	r3, #3
 8002826:	e000      	b.n	800282a <NVIC_EncodePriority+0x32>
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	401a      	ands	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43d9      	mvns	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	4313      	orrs	r3, r2
         );
}
 8002852:	4618      	mov	r0, r3
 8002854:	3724      	adds	r7, #36	@ 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800286c:	d301      	bcc.n	8002872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286e:	2301      	movs	r3, #1
 8002870:	e00f      	b.n	8002892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002872:	4a0a      	ldr	r2, [pc, #40]	@ (800289c <SysTick_Config+0x40>)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800287a:	210f      	movs	r1, #15
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f7ff ff90 	bl	80027a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <SysTick_Config+0x40>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288a:	4b04      	ldr	r3, [pc, #16]	@ (800289c <SysTick_Config+0x40>)
 800288c:	2207      	movs	r2, #7
 800288e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	e000e010 	.word	0xe000e010

080028a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff ff2d 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c8:	f7ff ff42 	bl	8002750 <__NVIC_GetPriorityGrouping>
 80028cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f7ff ff90 	bl	80027f8 <NVIC_EncodePriority>
 80028d8:	4602      	mov	r2, r0
 80028da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff5f 	bl	80027a4 <__NVIC_SetPriority>
}
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff35 	bl	800276c <__NVIC_EnableIRQ>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ffa2 	bl	800285c <SysTick_Config>
 8002918:	4603      	mov	r3, r0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e043      	b.n	80029c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	4b22      	ldr	r3, [pc, #136]	@ (80029cc <HAL_DMA_Init+0xa8>)
 8002942:	4413      	add	r3, r2
 8002944:	4a22      	ldr	r2, [pc, #136]	@ (80029d0 <HAL_DMA_Init+0xac>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	009a      	lsls	r2, r3, #2
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a1f      	ldr	r2, [pc, #124]	@ (80029d4 <HAL_DMA_Init+0xb0>)
 8002956:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800296e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002972:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800297c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	bffdfff8 	.word	0xbffdfff8
 80029d0:	cccccccd 	.word	0xcccccccd
 80029d4:	40020000 	.word	0x40020000

080029d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_DMA_Start_IT+0x20>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e04b      	b.n	8002a90 <HAL_DMA_Start_IT+0xb8>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d13a      	bne.n	8002a82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0201 	bic.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f9eb 	bl	8002e0c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 020e 	orr.w	r2, r2, #14
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	e00f      	b.n	8002a70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0204 	bic.w	r2, r2, #4
 8002a5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 020a 	orr.w	r2, r2, #10
 8002a6e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e005      	b.n	8002a8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d008      	beq.n	8002ac2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e020      	b.n	8002b04 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 020e 	bic.w	r2, r2, #14
 8002ad0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f202 	lsl.w	r2, r1, r2
 8002af0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d005      	beq.n	8002b34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
 8002b32:	e051      	b.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 020e 	bic.w	r2, r2, #14
 8002b42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0201 	bic.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a22      	ldr	r2, [pc, #136]	@ (8002be4 <HAL_DMA_Abort_IT+0xd4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d029      	beq.n	8002bb2 <HAL_DMA_Abort_IT+0xa2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a21      	ldr	r2, [pc, #132]	@ (8002be8 <HAL_DMA_Abort_IT+0xd8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d022      	beq.n	8002bae <HAL_DMA_Abort_IT+0x9e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bec <HAL_DMA_Abort_IT+0xdc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01a      	beq.n	8002ba8 <HAL_DMA_Abort_IT+0x98>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf0 <HAL_DMA_Abort_IT+0xe0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d012      	beq.n	8002ba2 <HAL_DMA_Abort_IT+0x92>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf4 <HAL_DMA_Abort_IT+0xe4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00a      	beq.n	8002b9c <HAL_DMA_Abort_IT+0x8c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf8 <HAL_DMA_Abort_IT+0xe8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d102      	bne.n	8002b96 <HAL_DMA_Abort_IT+0x86>
 8002b90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b94:	e00e      	b.n	8002bb4 <HAL_DMA_Abort_IT+0xa4>
 8002b96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b9a:	e00b      	b.n	8002bb4 <HAL_DMA_Abort_IT+0xa4>
 8002b9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ba0:	e008      	b.n	8002bb4 <HAL_DMA_Abort_IT+0xa4>
 8002ba2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ba6:	e005      	b.n	8002bb4 <HAL_DMA_Abort_IT+0xa4>
 8002ba8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bac:	e002      	b.n	8002bb4 <HAL_DMA_Abort_IT+0xa4>
 8002bae:	2310      	movs	r3, #16
 8002bb0:	e000      	b.n	8002bb4 <HAL_DMA_Abort_IT+0xa4>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	4a11      	ldr	r2, [pc, #68]	@ (8002bfc <HAL_DMA_Abort_IT+0xec>)
 8002bb6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
    } 
  }
  return status;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40020008 	.word	0x40020008
 8002be8:	4002001c 	.word	0x4002001c
 8002bec:	40020030 	.word	0x40020030
 8002bf0:	40020044 	.word	0x40020044
 8002bf4:	40020058 	.word	0x40020058
 8002bf8:	4002006c 	.word	0x4002006c
 8002bfc:	40020000 	.word	0x40020000

08002c00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d04f      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xc8>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04a      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0204 	bic.w	r2, r2, #4
 8002c4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a66      	ldr	r2, [pc, #408]	@ (8002df0 <HAL_DMA_IRQHandler+0x1f0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d029      	beq.n	8002cae <HAL_DMA_IRQHandler+0xae>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a65      	ldr	r2, [pc, #404]	@ (8002df4 <HAL_DMA_IRQHandler+0x1f4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d022      	beq.n	8002caa <HAL_DMA_IRQHandler+0xaa>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a63      	ldr	r2, [pc, #396]	@ (8002df8 <HAL_DMA_IRQHandler+0x1f8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01a      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0xa4>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a62      	ldr	r2, [pc, #392]	@ (8002dfc <HAL_DMA_IRQHandler+0x1fc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d012      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x9e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a60      	ldr	r2, [pc, #384]	@ (8002e00 <HAL_DMA_IRQHandler+0x200>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00a      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x98>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5f      	ldr	r2, [pc, #380]	@ (8002e04 <HAL_DMA_IRQHandler+0x204>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d102      	bne.n	8002c92 <HAL_DMA_IRQHandler+0x92>
 8002c8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c90:	e00e      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002c92:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c96:	e00b      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002c98:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002c9c:	e008      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002c9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ca2:	e005      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002ca4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ca8:	e002      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002caa:	2340      	movs	r3, #64	@ 0x40
 8002cac:	e000      	b.n	8002cb0 <HAL_DMA_IRQHandler+0xb0>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	4a55      	ldr	r2, [pc, #340]	@ (8002e08 <HAL_DMA_IRQHandler+0x208>)
 8002cb2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8094 	beq.w	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cc6:	e08e      	b.n	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	2202      	movs	r2, #2
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d056      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x186>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d051      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 020a 	bic.w	r2, r2, #10
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a38      	ldr	r2, [pc, #224]	@ (8002df0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d029      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x166>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a37      	ldr	r2, [pc, #220]	@ (8002df4 <HAL_DMA_IRQHandler+0x1f4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d022      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x162>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a35      	ldr	r2, [pc, #212]	@ (8002df8 <HAL_DMA_IRQHandler+0x1f8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d01a      	beq.n	8002d5c <HAL_DMA_IRQHandler+0x15c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a34      	ldr	r2, [pc, #208]	@ (8002dfc <HAL_DMA_IRQHandler+0x1fc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d012      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x156>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a32      	ldr	r2, [pc, #200]	@ (8002e00 <HAL_DMA_IRQHandler+0x200>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00a      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x150>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a31      	ldr	r2, [pc, #196]	@ (8002e04 <HAL_DMA_IRQHandler+0x204>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d102      	bne.n	8002d4a <HAL_DMA_IRQHandler+0x14a>
 8002d44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d48:	e00e      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d4e:	e00b      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d54:	e008      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d5a:	e005      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d60:	e002      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d62:	2320      	movs	r3, #32
 8002d64:	e000      	b.n	8002d68 <HAL_DMA_IRQHandler+0x168>
 8002d66:	2302      	movs	r3, #2
 8002d68:	4a27      	ldr	r2, [pc, #156]	@ (8002e08 <HAL_DMA_IRQHandler+0x208>)
 8002d6a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d034      	beq.n	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d84:	e02f      	b.n	8002de6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d028      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x1e8>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d023      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 020e 	bic.w	r2, r2, #14
 8002dae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
    }
  }
  return;
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
}
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40020008 	.word	0x40020008
 8002df4:	4002001c 	.word	0x4002001c
 8002df8:	40020030 	.word	0x40020030
 8002dfc:	40020044 	.word	0x40020044
 8002e00:	40020058 	.word	0x40020058
 8002e04:	4002006c 	.word	0x4002006c
 8002e08:	40020000 	.word	0x40020000

08002e0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d108      	bne.n	8002e4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e4a:	e007      	b.n	8002e5c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
	...

08002e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b08b      	sub	sp, #44	@ 0x2c
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e72:	2300      	movs	r3, #0
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7a:	e169      	b.n	8003150 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	f040 8158 	bne.w	800314a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a9a      	ldr	r2, [pc, #616]	@ (8003108 <HAL_GPIO_Init+0x2a0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d05e      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
 8002ea4:	4a98      	ldr	r2, [pc, #608]	@ (8003108 <HAL_GPIO_Init+0x2a0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d875      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002eaa:	4a98      	ldr	r2, [pc, #608]	@ (800310c <HAL_GPIO_Init+0x2a4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d058      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
 8002eb0:	4a96      	ldr	r2, [pc, #600]	@ (800310c <HAL_GPIO_Init+0x2a4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d86f      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002eb6:	4a96      	ldr	r2, [pc, #600]	@ (8003110 <HAL_GPIO_Init+0x2a8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d052      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
 8002ebc:	4a94      	ldr	r2, [pc, #592]	@ (8003110 <HAL_GPIO_Init+0x2a8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d869      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002ec2:	4a94      	ldr	r2, [pc, #592]	@ (8003114 <HAL_GPIO_Init+0x2ac>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d04c      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
 8002ec8:	4a92      	ldr	r2, [pc, #584]	@ (8003114 <HAL_GPIO_Init+0x2ac>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d863      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002ece:	4a92      	ldr	r2, [pc, #584]	@ (8003118 <HAL_GPIO_Init+0x2b0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d046      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
 8002ed4:	4a90      	ldr	r2, [pc, #576]	@ (8003118 <HAL_GPIO_Init+0x2b0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d85d      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002eda:	2b12      	cmp	r3, #18
 8002edc:	d82a      	bhi.n	8002f34 <HAL_GPIO_Init+0xcc>
 8002ede:	2b12      	cmp	r3, #18
 8002ee0:	d859      	bhi.n	8002f96 <HAL_GPIO_Init+0x12e>
 8002ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <HAL_GPIO_Init+0x80>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002f63 	.word	0x08002f63
 8002eec:	08002f3d 	.word	0x08002f3d
 8002ef0:	08002f4f 	.word	0x08002f4f
 8002ef4:	08002f91 	.word	0x08002f91
 8002ef8:	08002f97 	.word	0x08002f97
 8002efc:	08002f97 	.word	0x08002f97
 8002f00:	08002f97 	.word	0x08002f97
 8002f04:	08002f97 	.word	0x08002f97
 8002f08:	08002f97 	.word	0x08002f97
 8002f0c:	08002f97 	.word	0x08002f97
 8002f10:	08002f97 	.word	0x08002f97
 8002f14:	08002f97 	.word	0x08002f97
 8002f18:	08002f97 	.word	0x08002f97
 8002f1c:	08002f97 	.word	0x08002f97
 8002f20:	08002f97 	.word	0x08002f97
 8002f24:	08002f97 	.word	0x08002f97
 8002f28:	08002f97 	.word	0x08002f97
 8002f2c:	08002f45 	.word	0x08002f45
 8002f30:	08002f59 	.word	0x08002f59
 8002f34:	4a79      	ldr	r2, [pc, #484]	@ (800311c <HAL_GPIO_Init+0x2b4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f3a:	e02c      	b.n	8002f96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	623b      	str	r3, [r7, #32]
          break;
 8002f42:	e029      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	623b      	str	r3, [r7, #32]
          break;
 8002f4c:	e024      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	3308      	adds	r3, #8
 8002f54:	623b      	str	r3, [r7, #32]
          break;
 8002f56:	e01f      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	330c      	adds	r3, #12
 8002f5e:	623b      	str	r3, [r7, #32]
          break;
 8002f60:	e01a      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	623b      	str	r3, [r7, #32]
          break;
 8002f6e:	e013      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d105      	bne.n	8002f84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f78:	2308      	movs	r3, #8
 8002f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	611a      	str	r2, [r3, #16]
          break;
 8002f82:	e009      	b.n	8002f98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f84:	2308      	movs	r3, #8
 8002f86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	615a      	str	r2, [r3, #20]
          break;
 8002f8e:	e003      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f90:	2300      	movs	r3, #0
 8002f92:	623b      	str	r3, [r7, #32]
          break;
 8002f94:	e000      	b.n	8002f98 <HAL_GPIO_Init+0x130>
          break;
 8002f96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2bff      	cmp	r3, #255	@ 0xff
 8002f9c:	d801      	bhi.n	8002fa2 <HAL_GPIO_Init+0x13a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	e001      	b.n	8002fa6 <HAL_GPIO_Init+0x13e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2bff      	cmp	r3, #255	@ 0xff
 8002fac:	d802      	bhi.n	8002fb4 <HAL_GPIO_Init+0x14c>
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	e002      	b.n	8002fba <HAL_GPIO_Init+0x152>
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	3b08      	subs	r3, #8
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	210f      	movs	r1, #15
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	401a      	ands	r2, r3
 8002fcc:	6a39      	ldr	r1, [r7, #32]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80b1 	beq.w	800314a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8003120 <HAL_GPIO_Init+0x2b8>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	4a4c      	ldr	r2, [pc, #304]	@ (8003120 <HAL_GPIO_Init+0x2b8>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6193      	str	r3, [r2, #24]
 8002ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8003120 <HAL_GPIO_Init+0x2b8>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003000:	4a48      	ldr	r2, [pc, #288]	@ (8003124 <HAL_GPIO_Init+0x2bc>)
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	089b      	lsrs	r3, r3, #2
 8003006:	3302      	adds	r3, #2
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a40      	ldr	r2, [pc, #256]	@ (8003128 <HAL_GPIO_Init+0x2c0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_GPIO_Init+0x1ec>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3f      	ldr	r2, [pc, #252]	@ (800312c <HAL_GPIO_Init+0x2c4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00d      	beq.n	8003050 <HAL_GPIO_Init+0x1e8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3e      	ldr	r2, [pc, #248]	@ (8003130 <HAL_GPIO_Init+0x2c8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <HAL_GPIO_Init+0x1e4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a3d      	ldr	r2, [pc, #244]	@ (8003134 <HAL_GPIO_Init+0x2cc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_GPIO_Init+0x1e0>
 8003044:	2303      	movs	r3, #3
 8003046:	e006      	b.n	8003056 <HAL_GPIO_Init+0x1ee>
 8003048:	2304      	movs	r3, #4
 800304a:	e004      	b.n	8003056 <HAL_GPIO_Init+0x1ee>
 800304c:	2302      	movs	r3, #2
 800304e:	e002      	b.n	8003056 <HAL_GPIO_Init+0x1ee>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_GPIO_Init+0x1ee>
 8003054:	2300      	movs	r3, #0
 8003056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003058:	f002 0203 	and.w	r2, r2, #3
 800305c:	0092      	lsls	r2, r2, #2
 800305e:	4093      	lsls	r3, r2
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003066:	492f      	ldr	r1, [pc, #188]	@ (8003124 <HAL_GPIO_Init+0x2bc>)
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003080:	4b2d      	ldr	r3, [pc, #180]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	492c      	ldr	r1, [pc, #176]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]
 800308c:	e006      	b.n	800309c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800308e:	4b2a      	ldr	r3, [pc, #168]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	43db      	mvns	r3, r3
 8003096:	4928      	ldr	r1, [pc, #160]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 8003098:	4013      	ands	r3, r2
 800309a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030a8:	4b23      	ldr	r3, [pc, #140]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	4922      	ldr	r1, [pc, #136]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60cb      	str	r3, [r1, #12]
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030b6:	4b20      	ldr	r3, [pc, #128]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	43db      	mvns	r3, r3
 80030be:	491e      	ldr	r1, [pc, #120]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4918      	ldr	r1, [pc, #96]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030de:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	4914      	ldr	r1, [pc, #80]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d021      	beq.n	800313c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	490e      	ldr	r1, [pc, #56]	@ (8003138 <HAL_GPIO_Init+0x2d0>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]
 8003104:	e021      	b.n	800314a <HAL_GPIO_Init+0x2e2>
 8003106:	bf00      	nop
 8003108:	10320000 	.word	0x10320000
 800310c:	10310000 	.word	0x10310000
 8003110:	10220000 	.word	0x10220000
 8003114:	10210000 	.word	0x10210000
 8003118:	10120000 	.word	0x10120000
 800311c:	10110000 	.word	0x10110000
 8003120:	40021000 	.word	0x40021000
 8003124:	40010000 	.word	0x40010000
 8003128:	40010800 	.word	0x40010800
 800312c:	40010c00 	.word	0x40010c00
 8003130:	40011000 	.word	0x40011000
 8003134:	40011400 	.word	0x40011400
 8003138:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_GPIO_Init+0x304>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	43db      	mvns	r3, r3
 8003144:	4909      	ldr	r1, [pc, #36]	@ (800316c <HAL_GPIO_Init+0x304>)
 8003146:	4013      	ands	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	3301      	adds	r3, #1
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	fa22 f303 	lsr.w	r3, r2, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	f47f ae8e 	bne.w	8002e7c <HAL_GPIO_Init+0x14>
  }
}
 8003160:	bf00      	nop
 8003162:	bf00      	nop
 8003164:	372c      	adds	r7, #44	@ 0x2c
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	40010400 	.word	0x40010400

08003170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	807b      	strh	r3, [r7, #2]
 800317c:	4613      	mov	r3, r2
 800317e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003180:	787b      	ldrb	r3, [r7, #1]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800318c:	e003      	b.n	8003196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800318e:	887b      	ldrh	r3, [r7, #2]
 8003190:	041a      	lsls	r2, r3, #16
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	611a      	str	r2, [r3, #16]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e272      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 8087 	beq.w	80032ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031c0:	4b92      	ldr	r3, [pc, #584]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d00c      	beq.n	80031e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031cc:	4b8f      	ldr	r3, [pc, #572]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d112      	bne.n	80031fe <HAL_RCC_OscConfig+0x5e>
 80031d8:	4b8c      	ldr	r3, [pc, #560]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e4:	d10b      	bne.n	80031fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e6:	4b89      	ldr	r3, [pc, #548]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d06c      	beq.n	80032cc <HAL_RCC_OscConfig+0x12c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d168      	bne.n	80032cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e24c      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x76>
 8003208:	4b80      	ldr	r3, [pc, #512]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7f      	ldr	r2, [pc, #508]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 800320e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e02e      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x98>
 800321e:	4b7b      	ldr	r3, [pc, #492]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7a      	ldr	r2, [pc, #488]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b78      	ldr	r3, [pc, #480]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a77      	ldr	r2, [pc, #476]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003230:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e01d      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0xbc>
 8003242:	4b72      	ldr	r3, [pc, #456]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a71      	ldr	r2, [pc, #452]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b6f      	ldr	r3, [pc, #444]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6e      	ldr	r2, [pc, #440]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0xd4>
 800325c:	4b6b      	ldr	r3, [pc, #428]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a6a      	ldr	r2, [pc, #424]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	4b68      	ldr	r3, [pc, #416]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a67      	ldr	r2, [pc, #412]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003272:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d013      	beq.n	80032a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fc90 	bl	8001ba0 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fc8c 	bl	8001ba0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	@ 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e200      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b5d      	ldr	r3, [pc, #372]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0xe4>
 80032a2:	e014      	b.n	80032ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7fe fc7c 	bl	8001ba0 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fc78 	bl	8001ba0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e1ec      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032be:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x10c>
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032da:	4b4c      	ldr	r3, [pc, #304]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032e6:	4b49      	ldr	r3, [pc, #292]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d11c      	bne.n	800332c <HAL_RCC_OscConfig+0x18c>
 80032f2:	4b46      	ldr	r3, [pc, #280]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	4b43      	ldr	r3, [pc, #268]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_RCC_OscConfig+0x176>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d001      	beq.n	8003316 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e1c0      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b3d      	ldr	r3, [pc, #244]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4939      	ldr	r1, [pc, #228]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	e03a      	b.n	80033a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003334:	4b36      	ldr	r3, [pc, #216]	@ (8003410 <HAL_RCC_OscConfig+0x270>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe fc31 	bl	8001ba0 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003342:	f7fe fc2d 	bl	8001ba0 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e1a1      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	4b2d      	ldr	r3, [pc, #180]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b2a      	ldr	r3, [pc, #168]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4927      	ldr	r1, [pc, #156]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]
 8003374:	e015      	b.n	80033a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b26      	ldr	r3, [pc, #152]	@ (8003410 <HAL_RCC_OscConfig+0x270>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fc10 	bl	8001ba0 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003384:	f7fe fc0c 	bl	8001ba0 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e180      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	4b1d      	ldr	r3, [pc, #116]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03a      	beq.n	8003424 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d019      	beq.n	80033ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b6:	4b17      	ldr	r3, [pc, #92]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7fe fbf0 	bl	8001ba0 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fe fbec 	bl	8001ba0 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e160      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <HAL_RCC_OscConfig+0x26c>)
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f000 face 	bl	8003984 <RCC_Delay>
 80033e8:	e01c      	b.n	8003424 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003414 <HAL_RCC_OscConfig+0x274>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f0:	f7fe fbd6 	bl	8001ba0 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f6:	e00f      	b.n	8003418 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f8:	f7fe fbd2 	bl	8001ba0 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d908      	bls.n	8003418 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e146      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	42420000 	.word	0x42420000
 8003414:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003418:	4b92      	ldr	r3, [pc, #584]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e9      	bne.n	80033f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80a6 	beq.w	800357e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b8b      	ldr	r3, [pc, #556]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b88      	ldr	r3, [pc, #544]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4a87      	ldr	r2, [pc, #540]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800344c:	61d3      	str	r3, [r2, #28]
 800344e:	4b85      	ldr	r3, [pc, #532]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345e:	4b82      	ldr	r3, [pc, #520]	@ (8003668 <HAL_RCC_OscConfig+0x4c8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d118      	bne.n	800349c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800346a:	4b7f      	ldr	r3, [pc, #508]	@ (8003668 <HAL_RCC_OscConfig+0x4c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a7e      	ldr	r2, [pc, #504]	@ (8003668 <HAL_RCC_OscConfig+0x4c8>)
 8003470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003476:	f7fe fb93 	bl	8001ba0 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347e:	f7fe fb8f 	bl	8001ba0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b64      	cmp	r3, #100	@ 0x64
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e103      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003490:	4b75      	ldr	r3, [pc, #468]	@ (8003668 <HAL_RCC_OscConfig+0x4c8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d106      	bne.n	80034b2 <HAL_RCC_OscConfig+0x312>
 80034a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6213      	str	r3, [r2, #32]
 80034b0:	e02d      	b.n	800350e <HAL_RCC_OscConfig+0x36e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x334>
 80034ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4a69      	ldr	r2, [pc, #420]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	f023 0301 	bic.w	r3, r3, #1
 80034c4:	6213      	str	r3, [r2, #32]
 80034c6:	4b67      	ldr	r3, [pc, #412]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4a66      	ldr	r2, [pc, #408]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	6213      	str	r3, [r2, #32]
 80034d2:	e01c      	b.n	800350e <HAL_RCC_OscConfig+0x36e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d10c      	bne.n	80034f6 <HAL_RCC_OscConfig+0x356>
 80034dc:	4b61      	ldr	r3, [pc, #388]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4a60      	ldr	r2, [pc, #384]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	6213      	str	r3, [r2, #32]
 80034e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6213      	str	r3, [r2, #32]
 80034f4:	e00b      	b.n	800350e <HAL_RCC_OscConfig+0x36e>
 80034f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6213      	str	r3, [r2, #32]
 8003502:	4b58      	ldr	r3, [pc, #352]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a57      	ldr	r2, [pc, #348]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d015      	beq.n	8003542 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003516:	f7fe fb43 	bl	8001ba0 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe fb3f 	bl	8001ba0 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0b1      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	4b4b      	ldr	r3, [pc, #300]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ee      	beq.n	800351e <HAL_RCC_OscConfig+0x37e>
 8003540:	e014      	b.n	800356c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7fe fb2d 	bl	8001ba0 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe fb29 	bl	8001ba0 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e09b      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003560:	4b40      	ldr	r3, [pc, #256]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ee      	bne.n	800354a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d105      	bne.n	800357e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003572:	4b3c      	ldr	r3, [pc, #240]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a3b      	ldr	r2, [pc, #236]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800357c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8087 	beq.w	8003696 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003588:	4b36      	ldr	r3, [pc, #216]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d061      	beq.n	8003658 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2b02      	cmp	r3, #2
 800359a:	d146      	bne.n	800362a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359c:	4b33      	ldr	r3, [pc, #204]	@ (800366c <HAL_RCC_OscConfig+0x4cc>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fe fafd 	bl	8001ba0 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe faf9 	bl	8001ba0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e06d      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035bc:	4b29      	ldr	r3, [pc, #164]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d0:	d108      	bne.n	80035e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035d2:	4b24      	ldr	r3, [pc, #144]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	4921      	ldr	r1, [pc, #132]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a19      	ldr	r1, [r3, #32]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	430b      	orrs	r3, r1
 80035f6:	491b      	ldr	r1, [pc, #108]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035fc:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <HAL_RCC_OscConfig+0x4cc>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003602:	f7fe facd 	bl	8001ba0 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360a:	f7fe fac9 	bl	8001ba0 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e03d      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800361c:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x46a>
 8003628:	e035      	b.n	8003696 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362a:	4b10      	ldr	r3, [pc, #64]	@ (800366c <HAL_RCC_OscConfig+0x4cc>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe fab6 	bl	8001ba0 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003638:	f7fe fab2 	bl	8001ba0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e026      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800364a:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x498>
 8003656:	e01e      	b.n	8003696 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d107      	bne.n	8003670 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e019      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
 8003664:	40021000 	.word	0x40021000
 8003668:	40007000 	.word	0x40007000
 800366c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003670:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <HAL_RCC_OscConfig+0x500>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	429a      	cmp	r2, r3
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000

080036a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0d0      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d910      	bls.n	80036e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b67      	ldr	r3, [pc, #412]	@ (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 0207 	bic.w	r2, r3, #7
 80036ce:	4965      	ldr	r1, [pc, #404]	@ (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b63      	ldr	r3, [pc, #396]	@ (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0b8      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003700:	4b59      	ldr	r3, [pc, #356]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a58      	ldr	r2, [pc, #352]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800370a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003718:	4b53      	ldr	r3, [pc, #332]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a52      	ldr	r2, [pc, #328]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003724:	4b50      	ldr	r3, [pc, #320]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	494d      	ldr	r1, [pc, #308]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d040      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b47      	ldr	r3, [pc, #284]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d115      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e07f      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b41      	ldr	r3, [pc, #260]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e073      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3d      	ldr	r3, [pc, #244]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e06b      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b39      	ldr	r3, [pc, #228]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4936      	ldr	r1, [pc, #216]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fe fa04 	bl	8001ba0 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fe fa00 	bl	8001ba0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e053      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b27      	ldr	r3, [pc, #156]	@ (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d210      	bcs.n	80037f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b24      	ldr	r3, [pc, #144]	@ (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 0207 	bic.w	r2, r3, #7
 80037da:	4922      	ldr	r1, [pc, #136]	@ (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b20      	ldr	r3, [pc, #128]	@ (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e032      	b.n	800385a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003800:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4916      	ldr	r1, [pc, #88]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800381e:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	490e      	ldr	r1, [pc, #56]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003832:	f000 f821 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8003836:	4602      	mov	r2, r0
 8003838:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	490a      	ldr	r1, [pc, #40]	@ (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	5ccb      	ldrb	r3, [r1, r3]
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	4a09      	ldr	r2, [pc, #36]	@ (8003870 <HAL_RCC_ClockConfig+0x1cc>)
 800384c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800384e:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <HAL_RCC_ClockConfig+0x1d0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe f962 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40022000 	.word	0x40022000
 8003868:	40021000 	.word	0x40021000
 800386c:	08006b68 	.word	0x08006b68
 8003870:	20000008 	.word	0x20000008
 8003874:	2000000c 	.word	0x2000000c

08003878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003892:	4b1e      	ldr	r3, [pc, #120]	@ (800390c <HAL_RCC_GetSysClockFreq+0x94>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d002      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x30>
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d003      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x36>
 80038a6:	e027      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a8:	4b19      	ldr	r3, [pc, #100]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x98>)
 80038aa:	613b      	str	r3, [r7, #16]
      break;
 80038ac:	e027      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	0c9b      	lsrs	r3, r3, #18
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	4a17      	ldr	r2, [pc, #92]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c6:	4b11      	ldr	r3, [pc, #68]	@ (800390c <HAL_RCC_GetSysClockFreq+0x94>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	0c5b      	lsrs	r3, r3, #17
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	4a11      	ldr	r2, [pc, #68]	@ (8003918 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x98>)
 80038da:	fb03 f202 	mul.w	r2, r3, r2
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	e004      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a0c      	ldr	r2, [pc, #48]	@ (800391c <HAL_RCC_GetSysClockFreq+0xa4>)
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	613b      	str	r3, [r7, #16]
      break;
 80038f6:	e002      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <HAL_RCC_GetSysClockFreq+0x98>)
 80038fa:	613b      	str	r3, [r7, #16]
      break;
 80038fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fe:	693b      	ldr	r3, [r7, #16]
}
 8003900:	4618      	mov	r0, r3
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	007a1200 	.word	0x007a1200
 8003914:	08006b80 	.word	0x08006b80
 8003918:	08006b90 	.word	0x08006b90
 800391c:	003d0900 	.word	0x003d0900

08003920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b02      	ldr	r3, [pc, #8]	@ (8003930 <HAL_RCC_GetHCLKFreq+0x10>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	20000008 	.word	0x20000008

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003938:	f7ff fff2 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4903      	ldr	r1, [pc, #12]	@ (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	08006b78 	.word	0x08006b78

0800395c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003960:	f7ff ffde 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	0adb      	lsrs	r3, r3, #11
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4903      	ldr	r1, [pc, #12]	@ (8003980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000
 8003980:	08006b78 	.word	0x08006b78

08003984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <RCC_Delay+0x34>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0a      	ldr	r2, [pc, #40]	@ (80039bc <RCC_Delay+0x38>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0a5b      	lsrs	r3, r3, #9
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039a0:	bf00      	nop
  }
  while (Delay --);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e5a      	subs	r2, r3, #1
 80039a6:	60fa      	str	r2, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f9      	bne.n	80039a0 <RCC_Delay+0x1c>
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	20000008 	.word	0x20000008
 80039bc:	10624dd3 	.word	0x10624dd3

080039c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d07d      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039dc:	2300      	movs	r3, #0
 80039de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10d      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	61d3      	str	r3, [r2, #28]
 80039f8:	4b49      	ldr	r3, [pc, #292]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a04:	2301      	movs	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a08:	4b46      	ldr	r3, [pc, #280]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d118      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a14:	4b43      	ldr	r3, [pc, #268]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a42      	ldr	r2, [pc, #264]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a20:	f7fe f8be 	bl	8001ba0 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	e008      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a28:	f7fe f8ba 	bl	8001ba0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	@ 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e06d      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a46:	4b36      	ldr	r3, [pc, #216]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d02e      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d027      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a64:	4b2e      	ldr	r3, [pc, #184]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a74:	4b2c      	ldr	r3, [pc, #176]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a7a:	4a29      	ldr	r2, [pc, #164]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d014      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fe f889 	bl	8001ba0 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fe f885 	bl	8001ba0 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e036      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ee      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	4917      	ldr	r1, [pc, #92]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003acc:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	4a13      	ldr	r2, [pc, #76]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ad6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	490b      	ldr	r1, [pc, #44]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b02:	4b07      	ldr	r3, [pc, #28]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	4904      	ldr	r1, [pc, #16]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40007000 	.word	0x40007000
 8003b28:	42420440 	.word	0x42420440

08003b2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	f200 808a 	bhi.w	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d045      	beq.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d075      	beq.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b62:	e082      	b.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b64:	4b46      	ldr	r3, [pc, #280]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b6a:	4b45      	ldr	r3, [pc, #276]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d07b      	beq.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	0c9b      	lsrs	r3, r3, #18
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	4a41      	ldr	r2, [pc, #260]	@ (8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003b80:	5cd3      	ldrb	r3, [r2, r3]
 8003b82:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d015      	beq.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	0c5b      	lsrs	r3, r3, #17
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	4a3b      	ldr	r2, [pc, #236]	@ (8003c88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ba8:	4a38      	ldr	r2, [pc, #224]	@ (8003c8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	e004      	b.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4a34      	ldr	r2, [pc, #208]	@ (8003c90 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bd0:	d102      	bne.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	61bb      	str	r3, [r7, #24]
      break;
 8003bd6:	e04a      	b.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	61bb      	str	r3, [r7, #24]
      break;
 8003be6:	e042      	b.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003be8:	4b25      	ldr	r3, [pc, #148]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf8:	d108      	bne.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e01f      	b.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c16:	d109      	bne.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c18:	4b19      	ldr	r3, [pc, #100]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003c24:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e00f      	b.n	8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c36:	d11c      	bne.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c38:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d016      	beq.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c44:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003c48:	61bb      	str	r3, [r7, #24]
      break;
 8003c4a:	e012      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c4c:	e011      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c4e:	f7ff fe85 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	0b9b      	lsrs	r3, r3, #14
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	61bb      	str	r3, [r7, #24]
      break;
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c72:	bf00      	nop
    }
  }
  return (frequency);
 8003c74:	69bb      	ldr	r3, [r7, #24]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08006b94 	.word	0x08006b94
 8003c88:	08006ba4 	.word	0x08006ba4
 8003c8c:	007a1200 	.word	0x007a1200
 8003c90:	003d0900 	.word	0x003d0900
 8003c94:	aaaaaaab 	.word	0xaaaaaaab

08003c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e076      	b.n	8003d98 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cba:	d009      	beq.n	8003cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	61da      	str	r2, [r3, #28]
 8003cc2:	e005      	b.n	8003cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd faac 	bl	8001248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d54:	ea42 0103 	orr.w	r1, r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	0c1a      	lsrs	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f002 0204 	and.w	r2, r2, #4
 8003d76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	4613      	mov	r3, r2
 8003dae:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003db0:	f7fd fef6 	bl	8001ba0 <HAL_GetTick>
 8003db4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d001      	beq.n	8003dca <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e12a      	b.n	8004020 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_SPI_Transmit+0x36>
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e122      	b.n	8004020 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_SPI_Transmit+0x48>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e11b      	b.n	8004020 <HAL_SPI_Transmit+0x280>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2203      	movs	r2, #3
 8003df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e36:	d10f      	bne.n	8003e58 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e62:	2b40      	cmp	r3, #64	@ 0x40
 8003e64:	d007      	beq.n	8003e76 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e7e:	d152      	bne.n	8003f26 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_SPI_Transmit+0xee>
 8003e88:	8b7b      	ldrh	r3, [r7, #26]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d145      	bne.n	8003f1a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	881a      	ldrh	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	1c9a      	adds	r2, r3, #2
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eb2:	e032      	b.n	8003f1a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d112      	bne.n	8003ee8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	1c9a      	adds	r2, r3, #2
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ee6:	e018      	b.n	8003f1a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee8:	f7fd fe5a 	bl	8001ba0 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d803      	bhi.n	8003f00 <HAL_SPI_Transmit+0x160>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efe:	d102      	bne.n	8003f06 <HAL_SPI_Transmit+0x166>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e082      	b.n	8004020 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1c7      	bne.n	8003eb4 <HAL_SPI_Transmit+0x114>
 8003f24:	e053      	b.n	8003fce <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_Transmit+0x194>
 8003f2e:	8b7b      	ldrh	r3, [r7, #26]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d147      	bne.n	8003fc4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	7812      	ldrb	r2, [r2, #0]
 8003f40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f5a:	e033      	b.n	8003fc4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d113      	bne.n	8003f92 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	7812      	ldrb	r2, [r2, #0]
 8003f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f90:	e018      	b.n	8003fc4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f92:	f7fd fe05 	bl	8001ba0 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d803      	bhi.n	8003faa <HAL_SPI_Transmit+0x20a>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d102      	bne.n	8003fb0 <HAL_SPI_Transmit+0x210>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e02d      	b.n	8004020 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1c6      	bne.n	8003f5c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	6839      	ldr	r1, [r7, #0]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fbc4 	bl	8004760 <SPI_EndRxTxTransaction>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800401e:	2300      	movs	r3, #0
  }
}
 8004020:	4618      	mov	r0, r3
 8004022:	3720      	adds	r7, #32
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d001      	beq.n	8004048 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
 8004046:	e104      	b.n	8004252 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004050:	d112      	bne.n	8004078 <HAL_SPI_Receive+0x50>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10e      	bne.n	8004078 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2204      	movs	r2, #4
 800405e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f8f3 	bl	800425a <HAL_SPI_TransmitReceive>
 8004074:	4603      	mov	r3, r0
 8004076:	e0ec      	b.n	8004252 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004078:	f7fd fd92 	bl	8001ba0 <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_SPI_Receive+0x62>
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0e1      	b.n	8004252 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_SPI_Receive+0x74>
 8004098:	2302      	movs	r3, #2
 800409a:	e0da      	b.n	8004252 <HAL_SPI_Receive+0x22a>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2204      	movs	r2, #4
 80040a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ea:	d10f      	bne.n	800410c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800410a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d007      	beq.n	800412a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004128:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d170      	bne.n	8004214 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004132:	e035      	b.n	80041a0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b01      	cmp	r3, #1
 8004140:	d115      	bne.n	800416e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f103 020c 	add.w	r2, r3, #12
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414e:	7812      	ldrb	r2, [r2, #0]
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800416c:	e018      	b.n	80041a0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800416e:	f7fd fd17 	bl	8001ba0 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d803      	bhi.n	8004186 <HAL_SPI_Receive+0x15e>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d102      	bne.n	800418c <HAL_SPI_Receive+0x164>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e058      	b.n	8004252 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1c4      	bne.n	8004134 <HAL_SPI_Receive+0x10c>
 80041aa:	e038      	b.n	800421e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d113      	bne.n	80041e2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c4:	b292      	uxth	r2, r2
 80041c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041e0:	e018      	b.n	8004214 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041e2:	f7fd fcdd 	bl	8001ba0 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d803      	bhi.n	80041fa <HAL_SPI_Receive+0x1d2>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d102      	bne.n	8004200 <HAL_SPI_Receive+0x1d8>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e01e      	b.n	8004252 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1c6      	bne.n	80041ac <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fa4a 	bl	80046bc <SPI_EndRxTransaction>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004250:	2300      	movs	r3, #0
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b08a      	sub	sp, #40	@ 0x28
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004268:	2301      	movs	r3, #1
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800426c:	f7fd fc98 	bl	8001ba0 <HAL_GetTick>
 8004270:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004278:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004280:	887b      	ldrh	r3, [r7, #2]
 8004282:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004284:	7ffb      	ldrb	r3, [r7, #31]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d00c      	beq.n	80042a4 <HAL_SPI_TransmitReceive+0x4a>
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004290:	d106      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0x46>
 800429a:	7ffb      	ldrb	r3, [r7, #31]
 800429c:	2b04      	cmp	r3, #4
 800429e:	d001      	beq.n	80042a4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
 80042a2:	e17f      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_SPI_TransmitReceive+0x5c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_SPI_TransmitReceive+0x5c>
 80042b0:	887b      	ldrh	r3, [r7, #2]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e174      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x6e>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e16d      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x34a>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d003      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2205      	movs	r2, #5
 80042e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	887a      	ldrh	r2, [r7, #2]
 80042fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	887a      	ldrh	r2, [r7, #2]
 8004306:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	887a      	ldrh	r2, [r7, #2]
 800430c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004324:	2b40      	cmp	r3, #64	@ 0x40
 8004326:	d007      	beq.n	8004338 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004336:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004340:	d17e      	bne.n	8004440 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_SPI_TransmitReceive+0xf6>
 800434a:	8afb      	ldrh	r3, [r7, #22]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d16c      	bne.n	800442a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	881a      	ldrh	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004360:	1c9a      	adds	r2, r3, #2
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004374:	e059      	b.n	800442a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b02      	cmp	r3, #2
 8004382:	d11b      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x162>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d016      	beq.n	80043bc <HAL_SPI_TransmitReceive+0x162>
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	2b01      	cmp	r3, #1
 8004392:	d113      	bne.n	80043bc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a4:	1c9a      	adds	r2, r3, #2
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d119      	bne.n	80043fe <HAL_SPI_TransmitReceive+0x1a4>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d014      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043de:	b292      	uxth	r2, r2
 80043e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e6:	1c9a      	adds	r2, r3, #2
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043fa:	2301      	movs	r3, #1
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043fe:	f7fd fbcf 	bl	8001ba0 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800440a:	429a      	cmp	r2, r3
 800440c:	d80d      	bhi.n	800442a <HAL_SPI_TransmitReceive+0x1d0>
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d009      	beq.n	800442a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e0bc      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1a0      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x11c>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d19b      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x11c>
 800443e:	e082      	b.n	8004546 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_SPI_TransmitReceive+0x1f4>
 8004448:	8afb      	ldrh	r3, [r7, #22]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d171      	bne.n	8004532 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	330c      	adds	r3, #12
 8004458:	7812      	ldrb	r2, [r2, #0]
 800445a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004474:	e05d      	b.n	8004532 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b02      	cmp	r3, #2
 8004482:	d11c      	bne.n	80044be <HAL_SPI_TransmitReceive+0x264>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d017      	beq.n	80044be <HAL_SPI_TransmitReceive+0x264>
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	2b01      	cmp	r3, #1
 8004492:	d114      	bne.n	80044be <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	7812      	ldrb	r2, [r2, #0]
 80044a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d119      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x2a6>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d014      	beq.n	8004500 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044fc:	2301      	movs	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004500:	f7fd fb4e 	bl	8001ba0 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800450c:	429a      	cmp	r2, r3
 800450e:	d803      	bhi.n	8004518 <HAL_SPI_TransmitReceive+0x2be>
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d102      	bne.n	800451e <HAL_SPI_TransmitReceive+0x2c4>
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e038      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d19c      	bne.n	8004476 <HAL_SPI_TransmitReceive+0x21c>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d197      	bne.n	8004476 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004546:	6a3a      	ldr	r2, [r7, #32]
 8004548:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f908 	bl	8004760 <SPI_EndRxTxTransaction>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e01d      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3728      	adds	r7, #40	@ 0x28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045bc:	f7fd faf0 	bl	8001ba0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	4413      	add	r3, r2
 80045ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045cc:	f7fd fae8 	bl	8001ba0 <HAL_GetTick>
 80045d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045d2:	4b39      	ldr	r3, [pc, #228]	@ (80046b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	015b      	lsls	r3, r3, #5
 80045d8:	0d1b      	lsrs	r3, r3, #20
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	fb02 f303 	mul.w	r3, r2, r3
 80045e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045e2:	e054      	b.n	800468e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d050      	beq.n	800468e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045ec:	f7fd fad8 	bl	8001ba0 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d902      	bls.n	8004602 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d13d      	bne.n	800467e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004610:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800461a:	d111      	bne.n	8004640 <SPI_WaitFlagStateUntilTimeout+0x94>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004624:	d004      	beq.n	8004630 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800462e:	d107      	bne.n	8004640 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800463e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004648:	d10f      	bne.n	800466a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004668:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e017      	b.n	80046ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	3b01      	subs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4013      	ands	r3, r2
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	429a      	cmp	r2, r3
 800469c:	bf0c      	ite	eq
 800469e:	2301      	moveq	r3, #1
 80046a0:	2300      	movne	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d19b      	bne.n	80045e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3720      	adds	r7, #32
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000008 	.word	0x20000008

080046bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046d0:	d111      	bne.n	80046f6 <SPI_EndRxTransaction+0x3a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046da:	d004      	beq.n	80046e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e4:	d107      	bne.n	80046f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046f4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046fe:	d117      	bne.n	8004730 <SPI_EndRxTransaction+0x74>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004708:	d112      	bne.n	8004730 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2200      	movs	r2, #0
 8004712:	2101      	movs	r1, #1
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff ff49 	bl	80045ac <SPI_WaitFlagStateUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e013      	b.n	8004758 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2200      	movs	r2, #0
 8004738:	2180      	movs	r1, #128	@ 0x80
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff ff36 	bl	80045ac <SPI_WaitFlagStateUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474a:	f043 0220 	orr.w	r2, r3, #32
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e000      	b.n	8004758 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2201      	movs	r2, #1
 8004774:	2102      	movs	r1, #2
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7ff ff18 	bl	80045ac <SPI_WaitFlagStateUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d007      	beq.n	8004792 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e013      	b.n	80047ba <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2200      	movs	r2, #0
 800479a:	2180      	movs	r1, #128	@ 0x80
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff ff05 	bl	80045ac <SPI_WaitFlagStateUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e000      	b.n	80047ba <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e041      	b.n	8004858 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fc feef 	bl	80015cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3304      	adds	r3, #4
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f000 fa5b 	bl	8004cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e03a      	b.n	80048ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a18      	ldr	r2, [pc, #96]	@ (80048f8 <HAL_TIM_Base_Start_IT+0x98>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x58>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a2:	d009      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x58>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a14      	ldr	r2, [pc, #80]	@ (80048fc <HAL_TIM_Base_Start_IT+0x9c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x58>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <HAL_TIM_Base_Start_IT+0xa0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d111      	bne.n	80048dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d010      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	e007      	b.n	80048ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40000400 	.word	0x40000400
 8004900:	40000800 	.word	0x40000800

08004904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0202 	mvn.w	r2, #2
 8004938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f998 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f98b 	bl	8004c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f99a 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d020      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01b      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0204 	mvn.w	r2, #4
 8004984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f972 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f965 	bl	8004c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f974 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d020      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01b      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0208 	mvn.w	r2, #8
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2204      	movs	r2, #4
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f94c 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f93f 	bl	8004c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f94e 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d020      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01b      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0210 	mvn.w	r2, #16
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2208      	movs	r2, #8
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f926 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f919 	bl	8004c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f928 	bl	8004c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0201 	mvn.w	r2, #1
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fc fb3a 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00c      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa7f 	bl	8004f92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8f8 	bl	8004ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00c      	beq.n	8004adc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f06f 0220 	mvn.w	r2, #32
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa52 	bl	8004f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_TIM_ConfigClockSource+0x1c>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0b4      	b.n	8004c6a <HAL_TIM_ConfigClockSource+0x186>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b38:	d03e      	beq.n	8004bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b3e:	f200 8087 	bhi.w	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b46:	f000 8086 	beq.w	8004c56 <HAL_TIM_ConfigClockSource+0x172>
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b4e:	d87f      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b70      	cmp	r3, #112	@ 0x70
 8004b52:	d01a      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0xa6>
 8004b54:	2b70      	cmp	r3, #112	@ 0x70
 8004b56:	d87b      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b60      	cmp	r3, #96	@ 0x60
 8004b5a:	d050      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x11a>
 8004b5c:	2b60      	cmp	r3, #96	@ 0x60
 8004b5e:	d877      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b50      	cmp	r3, #80	@ 0x50
 8004b62:	d03c      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0xfa>
 8004b64:	2b50      	cmp	r3, #80	@ 0x50
 8004b66:	d873      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b40      	cmp	r3, #64	@ 0x40
 8004b6a:	d058      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x13a>
 8004b6c:	2b40      	cmp	r3, #64	@ 0x40
 8004b6e:	d86f      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b30      	cmp	r3, #48	@ 0x30
 8004b72:	d064      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	2b30      	cmp	r3, #48	@ 0x30
 8004b76:	d86b      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d060      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d867      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d05c      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d05a      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b88:	e062      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b9a:	f000 f974 	bl	8004e86 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	609a      	str	r2, [r3, #8]
      break;
 8004bb6:	e04f      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc8:	f000 f95d 	bl	8004e86 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bda:	609a      	str	r2, [r3, #8]
      break;
 8004bdc:	e03c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 f8d4 	bl	8004d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2150      	movs	r1, #80	@ 0x50
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f92b 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e02c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 f8f2 	bl	8004df4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2160      	movs	r1, #96	@ 0x60
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f91b 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e01c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f000 f8b4 	bl	8004d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2140      	movs	r1, #64	@ 0x40
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f90b 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004c3c:	e00c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f000 f902 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004c4e:	e003      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
      break;
 8004c54:	e000      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
	...

08004cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a2f      	ldr	r2, [pc, #188]	@ (8004d8c <TIM_Base_SetConfig+0xd0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <TIM_Base_SetConfig+0x30>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cda:	d007      	beq.n	8004cec <TIM_Base_SetConfig+0x30>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a2c      	ldr	r2, [pc, #176]	@ (8004d90 <TIM_Base_SetConfig+0xd4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_Base_SetConfig+0x30>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8004d94 <TIM_Base_SetConfig+0xd8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d108      	bne.n	8004cfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a22      	ldr	r2, [pc, #136]	@ (8004d8c <TIM_Base_SetConfig+0xd0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00b      	beq.n	8004d1e <TIM_Base_SetConfig+0x62>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0c:	d007      	beq.n	8004d1e <TIM_Base_SetConfig+0x62>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1f      	ldr	r2, [pc, #124]	@ (8004d90 <TIM_Base_SetConfig+0xd4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d003      	beq.n	8004d1e <TIM_Base_SetConfig+0x62>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a1e      	ldr	r2, [pc, #120]	@ (8004d94 <TIM_Base_SetConfig+0xd8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d108      	bne.n	8004d30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a0d      	ldr	r2, [pc, #52]	@ (8004d8c <TIM_Base_SetConfig+0xd0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d103      	bne.n	8004d64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f023 0201 	bic.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	611a      	str	r2, [r3, #16]
  }
}
 8004d82:	bf00      	nop
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800

08004d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0201 	bic.w	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f023 030a 	bic.w	r3, r3, #10
 8004dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f023 0210 	bic.w	r2, r3, #16
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	031b      	lsls	r3, r3, #12
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr

08004e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f043 0307 	orr.w	r3, r3, #7
 8004e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	609a      	str	r2, [r3, #8]
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b087      	sub	sp, #28
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	021a      	lsls	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	609a      	str	r2, [r3, #8]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e046      	b.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00e      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d009      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a12      	ldr	r2, [pc, #72]	@ (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a10      	ldr	r2, [pc, #64]	@ (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d10c      	bne.n	8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800

08004f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e042      	b.n	800503c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc fb76 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	@ 0x24
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fdaf 	bl	8005b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800500c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800501c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	@ 0x28
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b20      	cmp	r3, #32
 8005062:	d175      	bne.n	8005150 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_UART_Transmit+0x2c>
 800506a:	88fb      	ldrh	r3, [r7, #6]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e06e      	b.n	8005152 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2221      	movs	r2, #33	@ 0x21
 800507e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005082:	f7fc fd8d 	bl	8001ba0 <HAL_GetTick>
 8005086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	88fa      	ldrh	r2, [r7, #6]
 800508c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509c:	d108      	bne.n	80050b0 <HAL_UART_Transmit+0x6c>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d104      	bne.n	80050b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e003      	b.n	80050b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050b8:	e02e      	b.n	8005118 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2180      	movs	r1, #128	@ 0x80
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fb13 	bl	80056f0 <UART_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e03a      	b.n	8005152 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	881b      	ldrh	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	3302      	adds	r3, #2
 80050f6:	61bb      	str	r3, [r7, #24]
 80050f8:	e007      	b.n	800510a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3301      	adds	r3, #1
 8005108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1cb      	bne.n	80050ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2200      	movs	r2, #0
 800512a:	2140      	movs	r1, #64	@ 0x40
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fadf 	bl	80056f0 <UART_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e006      	b.n	8005152 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	e000      	b.n	8005152 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005150:	2302      	movs	r3, #2
  }
}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	4613      	mov	r3, r2
 8005166:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b20      	cmp	r3, #32
 8005172:	d112      	bne.n	800519a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_UART_Receive_IT+0x26>
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e00b      	b.n	800519c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	461a      	mov	r2, r3
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 fb06 	bl	80057a2 <UART_Start_Receive_IT>
 8005196:	4603      	mov	r3, r0
 8005198:	e000      	b.n	800519c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800519a:	2302      	movs	r3, #2
  }
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b0ba      	sub	sp, #232	@ 0xe8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80051e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10f      	bne.n	800520a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_UART_IRQHandler+0x66>
 80051f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fbe3 	bl	80059ce <UART_Receive_IT>
      return;
 8005208:	e25b      	b.n	80056c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800520a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80de 	beq.w	80053d0 <HAL_UART_IRQHandler+0x22c>
 8005214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005224:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80d1 	beq.w	80053d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <HAL_UART_IRQHandler+0xae>
 800523a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800523e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <HAL_UART_IRQHandler+0xd2>
 800525e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	f043 0202 	orr.w	r2, r3, #2
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00b      	beq.n	800529a <HAL_UART_IRQHandler+0xf6>
 8005282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005292:	f043 0204 	orr.w	r2, r3, #4
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800529a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d011      	beq.n	80052ca <HAL_UART_IRQHandler+0x126>
 80052a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d105      	bne.n	80052be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c2:	f043 0208 	orr.w	r2, r3, #8
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 81f2 	beq.w	80056b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_UART_IRQHandler+0x14e>
 80052e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fb6e 	bl	80059ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	bf14      	ite	ne
 8005300:	2301      	movne	r3, #1
 8005302:	2300      	moveq	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <HAL_UART_IRQHandler+0x17a>
 8005316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d04f      	beq.n	80053be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fa78 	bl	8005814 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d041      	beq.n	80053b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3314      	adds	r3, #20
 8005338:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005348:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800534c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3314      	adds	r3, #20
 800535a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800535e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005362:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800536a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1d9      	bne.n	8005332 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d013      	beq.n	80053ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	4a7e      	ldr	r2, [pc, #504]	@ (8005584 <HAL_UART_IRQHandler+0x3e0>)
 800538c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005392:	4618      	mov	r0, r3
 8005394:	f7fd fbbc 	bl	8002b10 <HAL_DMA_Abort_IT>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d016      	beq.n	80053cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053a8:	4610      	mov	r0, r2
 80053aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	e00e      	b.n	80053cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fb fef6 	bl	80011a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	e00a      	b.n	80053cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fb fef2 	bl	80011a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053bc:	e006      	b.n	80053cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fb feee 	bl	80011a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80053ca:	e175      	b.n	80056b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053cc:	bf00      	nop
    return;
 80053ce:	e173      	b.n	80056b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	f040 814f 	bne.w	8005678 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053de:	f003 0310 	and.w	r3, r3, #16
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 8148 	beq.w	8005678 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8141 	beq.w	8005678 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053f6:	2300      	movs	r3, #0
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	60bb      	str	r3, [r7, #8]
 800540a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 80b6 	beq.w	8005588 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005428:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8145 	beq.w	80056bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800543a:	429a      	cmp	r2, r3
 800543c:	f080 813e 	bcs.w	80056bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005446:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	2b20      	cmp	r3, #32
 8005450:	f000 8088 	beq.w	8005564 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800546a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800546e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005472:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	330c      	adds	r3, #12
 800547c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005480:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005484:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800548c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005498:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1d9      	bne.n	8005454 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3314      	adds	r3, #20
 80054a6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80054b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3314      	adds	r3, #20
 80054c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054c4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80054c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80054cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80054d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e1      	bne.n	80054a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3314      	adds	r3, #20
 80054e2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80054ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3314      	adds	r3, #20
 80054fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005500:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005502:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005506:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800550e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e3      	bne.n	80054dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005534:	f023 0310 	bic.w	r3, r3, #16
 8005538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005546:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005548:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800554c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e3      	bne.n	8005522 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555e:	4618      	mov	r0, r3
 8005560:	f7fd fa9a 	bl	8002a98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005572:	b29b      	uxth	r3, r3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	b29b      	uxth	r3, r3
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f8ad 	bl	80056da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005580:	e09c      	b.n	80056bc <HAL_UART_IRQHandler+0x518>
 8005582:	bf00      	nop
 8005584:	080058d9 	.word	0x080058d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005590:	b29b      	uxth	r3, r3
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 808e 	beq.w	80056c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80055a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8089 	beq.w	80056c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	330c      	adds	r3, #12
 80055ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80055d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80055d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e3      	bne.n	80055ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3314      	adds	r3, #20
 80055ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	623b      	str	r3, [r7, #32]
   return(result);
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3314      	adds	r3, #20
 8005606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800560a:	633a      	str	r2, [r7, #48]	@ 0x30
 800560c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e3      	bne.n	80055e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	330c      	adds	r3, #12
 8005632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	60fb      	str	r3, [r7, #12]
   return(result);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0310 	bic.w	r3, r3, #16
 8005642:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	330c      	adds	r3, #12
 800564c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005650:	61fa      	str	r2, [r7, #28]
 8005652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	69b9      	ldr	r1, [r7, #24]
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	617b      	str	r3, [r7, #20]
   return(result);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e3      	bne.n	800562c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800566a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f832 	bl	80056da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005676:	e023      	b.n	80056c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800567c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <HAL_UART_IRQHandler+0x4f4>
 8005684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f935 	bl	8005900 <UART_Transmit_IT>
    return;
 8005696:	e014      	b.n	80056c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800569c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00e      	beq.n	80056c2 <HAL_UART_IRQHandler+0x51e>
 80056a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f974 	bl	800599e <UART_EndTransmit_IT>
    return;
 80056b6:	e004      	b.n	80056c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80056b8:	bf00      	nop
 80056ba:	e002      	b.n	80056c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80056bc:	bf00      	nop
 80056be:	e000      	b.n	80056c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80056c0:	bf00      	nop
  }
}
 80056c2:	37e8      	adds	r7, #232	@ 0xe8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr

080056da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr

080056f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	4613      	mov	r3, r2
 80056fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005700:	e03b      	b.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d037      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570a:	f7fc fa49 	bl	8001ba0 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <UART_WaitOnFlagUntilTimeout+0x30>
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e03a      	b.n	800579a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d023      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b80      	cmp	r3, #128	@ 0x80
 8005736:	d020      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b40      	cmp	r3, #64	@ 0x40
 800573c:	d01d      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b08      	cmp	r3, #8
 800574a:	d116      	bne.n	800577a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 f856 	bl	8005814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2208      	movs	r2, #8
 800576c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e00f      	b.n	800579a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	bf0c      	ite	eq
 800578a:	2301      	moveq	r3, #1
 800578c:	2300      	movne	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	429a      	cmp	r2, r3
 8005796:	d0b4      	beq.n	8005702 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	88fa      	ldrh	r2, [r7, #6]
 80057ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	88fa      	ldrh	r2, [r7, #6]
 80057c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2222      	movs	r2, #34	@ 0x22
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0220 	orr.w	r2, r2, #32
 8005806:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b095      	sub	sp, #84	@ 0x54
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800583c:	643a      	str	r2, [r7, #64]	@ 0x40
 800583e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005842:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3314      	adds	r3, #20
 8005856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005870:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005872:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e5      	bne.n	8005850 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005888:	2b01      	cmp	r3, #1
 800588a:	d119      	bne.n	80058c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	60bb      	str	r3, [r7, #8]
   return(result);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 0310 	bic.w	r3, r3, #16
 80058a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058ac:	61ba      	str	r2, [r7, #24]
 80058ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6979      	ldr	r1, [r7, #20]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058ce:	bf00      	nop
 80058d0:	3754      	adds	r7, #84	@ 0x54
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f7fb fc54 	bl	80011a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b21      	cmp	r3, #33	@ 0x21
 8005912:	d13e      	bne.n	8005992 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591c:	d114      	bne.n	8005948 <UART_Transmit_IT+0x48>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d110      	bne.n	8005948 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800593a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]
 8005946:	e008      	b.n	800595a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	1c59      	adds	r1, r3, #1
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6211      	str	r1, [r2, #32]
 8005952:	781a      	ldrb	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b01      	subs	r3, #1
 8005962:	b29b      	uxth	r3, r3
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4619      	mov	r1, r3
 8005968:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10f      	bne.n	800598e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800597c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800598c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e000      	b.n	8005994 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
  }
}
 8005994:	4618      	mov	r0, r3
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fe82 	bl	80056c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b08c      	sub	sp, #48	@ 0x30
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b22      	cmp	r3, #34	@ 0x22
 80059e0:	f040 80ae 	bne.w	8005b40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ec:	d117      	bne.n	8005a1e <UART_Receive_IT+0x50>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d113      	bne.n	8005a1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059f6:	2300      	movs	r3, #0
 80059f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a16:	1c9a      	adds	r2, r3, #2
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a1c:	e026      	b.n	8005a6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a30:	d007      	beq.n	8005a42 <UART_Receive_IT+0x74>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <UART_Receive_IT+0x82>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	e008      	b.n	8005a62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d15d      	bne.n	8005b3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0220 	bic.w	r2, r2, #32
 8005a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d135      	bne.n	8005b32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	613b      	str	r3, [r7, #16]
   return(result);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 0310 	bic.w	r3, r3, #16
 8005ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aec:	623a      	str	r2, [r7, #32]
 8005aee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	69f9      	ldr	r1, [r7, #28]
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d10a      	bne.n	8005b24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fdd5 	bl	80056da <HAL_UARTEx_RxEventCallback>
 8005b30:	e002      	b.n	8005b38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fb fb16 	bl	8001164 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	e002      	b.n	8005b42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e000      	b.n	8005b42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b40:	2302      	movs	r3, #2
  }
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3730      	adds	r7, #48	@ 0x30
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005b86:	f023 030c 	bic.w	r3, r3, #12
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	430b      	orrs	r3, r1
 8005b92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <UART_SetConfig+0x114>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d103      	bne.n	8005bbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bb4:	f7fd fed2 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	e002      	b.n	8005bc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bbc:	f7fd feba 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8005bc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009a      	lsls	r2, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	4a22      	ldr	r2, [pc, #136]	@ (8005c64 <UART_SetConfig+0x118>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	0119      	lsls	r1, r3, #4
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4613      	mov	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	009a      	lsls	r2, r3, #2
 8005bec:	441a      	add	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c64 <UART_SetConfig+0x118>)
 8005bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	2064      	movs	r0, #100	@ 0x64
 8005c02:	fb00 f303 	mul.w	r3, r0, r3
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	3332      	adds	r3, #50	@ 0x32
 8005c0c:	4a15      	ldr	r2, [pc, #84]	@ (8005c64 <UART_SetConfig+0x118>)
 8005c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c18:	4419      	add	r1, r3
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	009a      	lsls	r2, r3, #2
 8005c24:	441a      	add	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c30:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <UART_SetConfig+0x118>)
 8005c32:	fba3 0302 	umull	r0, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	2064      	movs	r0, #100	@ 0x64
 8005c3a:	fb00 f303 	mul.w	r3, r0, r3
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	3332      	adds	r3, #50	@ 0x32
 8005c44:	4a07      	ldr	r2, [pc, #28]	@ (8005c64 <UART_SetConfig+0x118>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	f003 020f 	and.w	r2, r3, #15
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	440a      	add	r2, r1
 8005c56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40013800 	.word	0x40013800
 8005c64:	51eb851f 	.word	0x51eb851f

08005c68 <std>:
 8005c68:	2300      	movs	r3, #0
 8005c6a:	b510      	push	{r4, lr}
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c76:	6083      	str	r3, [r0, #8]
 8005c78:	8181      	strh	r1, [r0, #12]
 8005c7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c7c:	81c2      	strh	r2, [r0, #14]
 8005c7e:	6183      	str	r3, [r0, #24]
 8005c80:	4619      	mov	r1, r3
 8005c82:	2208      	movs	r2, #8
 8005c84:	305c      	adds	r0, #92	@ 0x5c
 8005c86:	f000 f906 	bl	8005e96 <memset>
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc0 <std+0x58>)
 8005c8c:	6224      	str	r4, [r4, #32]
 8005c8e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c90:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc4 <std+0x5c>)
 8005c92:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c94:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <std+0x60>)
 8005c96:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c98:	4b0c      	ldr	r3, [pc, #48]	@ (8005ccc <std+0x64>)
 8005c9a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd0 <std+0x68>)
 8005c9e:	429c      	cmp	r4, r3
 8005ca0:	d006      	beq.n	8005cb0 <std+0x48>
 8005ca2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ca6:	4294      	cmp	r4, r2
 8005ca8:	d002      	beq.n	8005cb0 <std+0x48>
 8005caa:	33d0      	adds	r3, #208	@ 0xd0
 8005cac:	429c      	cmp	r4, r3
 8005cae:	d105      	bne.n	8005cbc <std+0x54>
 8005cb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb8:	f000 b966 	b.w	8005f88 <__retarget_lock_init_recursive>
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	bf00      	nop
 8005cc0:	08005e11 	.word	0x08005e11
 8005cc4:	08005e33 	.word	0x08005e33
 8005cc8:	08005e6b 	.word	0x08005e6b
 8005ccc:	08005e8f 	.word	0x08005e8f
 8005cd0:	20000258 	.word	0x20000258

08005cd4 <stdio_exit_handler>:
 8005cd4:	4a02      	ldr	r2, [pc, #8]	@ (8005ce0 <stdio_exit_handler+0xc>)
 8005cd6:	4903      	ldr	r1, [pc, #12]	@ (8005ce4 <stdio_exit_handler+0x10>)
 8005cd8:	4803      	ldr	r0, [pc, #12]	@ (8005ce8 <stdio_exit_handler+0x14>)
 8005cda:	f000 b869 	b.w	8005db0 <_fwalk_sglue>
 8005cde:	bf00      	nop
 8005ce0:	20000014 	.word	0x20000014
 8005ce4:	0800681d 	.word	0x0800681d
 8005ce8:	20000024 	.word	0x20000024

08005cec <cleanup_stdio>:
 8005cec:	6841      	ldr	r1, [r0, #4]
 8005cee:	4b0c      	ldr	r3, [pc, #48]	@ (8005d20 <cleanup_stdio+0x34>)
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	4299      	cmp	r1, r3
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	d001      	beq.n	8005cfc <cleanup_stdio+0x10>
 8005cf8:	f000 fd90 	bl	800681c <_fflush_r>
 8005cfc:	68a1      	ldr	r1, [r4, #8]
 8005cfe:	4b09      	ldr	r3, [pc, #36]	@ (8005d24 <cleanup_stdio+0x38>)
 8005d00:	4299      	cmp	r1, r3
 8005d02:	d002      	beq.n	8005d0a <cleanup_stdio+0x1e>
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fd89 	bl	800681c <_fflush_r>
 8005d0a:	68e1      	ldr	r1, [r4, #12]
 8005d0c:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <cleanup_stdio+0x3c>)
 8005d0e:	4299      	cmp	r1, r3
 8005d10:	d004      	beq.n	8005d1c <cleanup_stdio+0x30>
 8005d12:	4620      	mov	r0, r4
 8005d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d18:	f000 bd80 	b.w	800681c <_fflush_r>
 8005d1c:	bd10      	pop	{r4, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000258 	.word	0x20000258
 8005d24:	200002c0 	.word	0x200002c0
 8005d28:	20000328 	.word	0x20000328

08005d2c <global_stdio_init.part.0>:
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d5c <global_stdio_init.part.0+0x30>)
 8005d30:	4c0b      	ldr	r4, [pc, #44]	@ (8005d60 <global_stdio_init.part.0+0x34>)
 8005d32:	4a0c      	ldr	r2, [pc, #48]	@ (8005d64 <global_stdio_init.part.0+0x38>)
 8005d34:	4620      	mov	r0, r4
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	2104      	movs	r1, #4
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f7ff ff94 	bl	8005c68 <std>
 8005d40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d44:	2201      	movs	r2, #1
 8005d46:	2109      	movs	r1, #9
 8005d48:	f7ff ff8e 	bl	8005c68 <std>
 8005d4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d50:	2202      	movs	r2, #2
 8005d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d56:	2112      	movs	r1, #18
 8005d58:	f7ff bf86 	b.w	8005c68 <std>
 8005d5c:	20000390 	.word	0x20000390
 8005d60:	20000258 	.word	0x20000258
 8005d64:	08005cd5 	.word	0x08005cd5

08005d68 <__sfp_lock_acquire>:
 8005d68:	4801      	ldr	r0, [pc, #4]	@ (8005d70 <__sfp_lock_acquire+0x8>)
 8005d6a:	f000 b90e 	b.w	8005f8a <__retarget_lock_acquire_recursive>
 8005d6e:	bf00      	nop
 8005d70:	20000399 	.word	0x20000399

08005d74 <__sfp_lock_release>:
 8005d74:	4801      	ldr	r0, [pc, #4]	@ (8005d7c <__sfp_lock_release+0x8>)
 8005d76:	f000 b909 	b.w	8005f8c <__retarget_lock_release_recursive>
 8005d7a:	bf00      	nop
 8005d7c:	20000399 	.word	0x20000399

08005d80 <__sinit>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	4604      	mov	r4, r0
 8005d84:	f7ff fff0 	bl	8005d68 <__sfp_lock_acquire>
 8005d88:	6a23      	ldr	r3, [r4, #32]
 8005d8a:	b11b      	cbz	r3, 8005d94 <__sinit+0x14>
 8005d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d90:	f7ff bff0 	b.w	8005d74 <__sfp_lock_release>
 8005d94:	4b04      	ldr	r3, [pc, #16]	@ (8005da8 <__sinit+0x28>)
 8005d96:	6223      	str	r3, [r4, #32]
 8005d98:	4b04      	ldr	r3, [pc, #16]	@ (8005dac <__sinit+0x2c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f5      	bne.n	8005d8c <__sinit+0xc>
 8005da0:	f7ff ffc4 	bl	8005d2c <global_stdio_init.part.0>
 8005da4:	e7f2      	b.n	8005d8c <__sinit+0xc>
 8005da6:	bf00      	nop
 8005da8:	08005ced 	.word	0x08005ced
 8005dac:	20000390 	.word	0x20000390

08005db0 <_fwalk_sglue>:
 8005db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db4:	4607      	mov	r7, r0
 8005db6:	4688      	mov	r8, r1
 8005db8:	4614      	mov	r4, r2
 8005dba:	2600      	movs	r6, #0
 8005dbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dc0:	f1b9 0901 	subs.w	r9, r9, #1
 8005dc4:	d505      	bpl.n	8005dd2 <_fwalk_sglue+0x22>
 8005dc6:	6824      	ldr	r4, [r4, #0]
 8005dc8:	2c00      	cmp	r4, #0
 8005dca:	d1f7      	bne.n	8005dbc <_fwalk_sglue+0xc>
 8005dcc:	4630      	mov	r0, r6
 8005dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd2:	89ab      	ldrh	r3, [r5, #12]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d907      	bls.n	8005de8 <_fwalk_sglue+0x38>
 8005dd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	d003      	beq.n	8005de8 <_fwalk_sglue+0x38>
 8005de0:	4629      	mov	r1, r5
 8005de2:	4638      	mov	r0, r7
 8005de4:	47c0      	blx	r8
 8005de6:	4306      	orrs	r6, r0
 8005de8:	3568      	adds	r5, #104	@ 0x68
 8005dea:	e7e9      	b.n	8005dc0 <_fwalk_sglue+0x10>

08005dec <iprintf>:
 8005dec:	b40f      	push	{r0, r1, r2, r3}
 8005dee:	b507      	push	{r0, r1, r2, lr}
 8005df0:	4906      	ldr	r1, [pc, #24]	@ (8005e0c <iprintf+0x20>)
 8005df2:	ab04      	add	r3, sp, #16
 8005df4:	6808      	ldr	r0, [r1, #0]
 8005df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dfa:	6881      	ldr	r1, [r0, #8]
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	f000 f9e5 	bl	80061cc <_vfiprintf_r>
 8005e02:	b003      	add	sp, #12
 8005e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e08:	b004      	add	sp, #16
 8005e0a:	4770      	bx	lr
 8005e0c:	20000020 	.word	0x20000020

08005e10 <__sread>:
 8005e10:	b510      	push	{r4, lr}
 8005e12:	460c      	mov	r4, r1
 8005e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e18:	f000 f868 	bl	8005eec <_read_r>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	bfab      	itete	ge
 8005e20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e22:	89a3      	ldrhlt	r3, [r4, #12]
 8005e24:	181b      	addge	r3, r3, r0
 8005e26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e2a:	bfac      	ite	ge
 8005e2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e2e:	81a3      	strhlt	r3, [r4, #12]
 8005e30:	bd10      	pop	{r4, pc}

08005e32 <__swrite>:
 8005e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e36:	461f      	mov	r7, r3
 8005e38:	898b      	ldrh	r3, [r1, #12]
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	05db      	lsls	r3, r3, #23
 8005e3e:	460c      	mov	r4, r1
 8005e40:	4616      	mov	r6, r2
 8005e42:	d505      	bpl.n	8005e50 <__swrite+0x1e>
 8005e44:	2302      	movs	r3, #2
 8005e46:	2200      	movs	r2, #0
 8005e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4c:	f000 f83c 	bl	8005ec8 <_lseek_r>
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	4632      	mov	r2, r6
 8005e54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e66:	f000 b853 	b.w	8005f10 <_write_r>

08005e6a <__sseek>:
 8005e6a:	b510      	push	{r4, lr}
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e72:	f000 f829 	bl	8005ec8 <_lseek_r>
 8005e76:	1c43      	adds	r3, r0, #1
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	bf15      	itete	ne
 8005e7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e86:	81a3      	strheq	r3, [r4, #12]
 8005e88:	bf18      	it	ne
 8005e8a:	81a3      	strhne	r3, [r4, #12]
 8005e8c:	bd10      	pop	{r4, pc}

08005e8e <__sclose>:
 8005e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e92:	f000 b809 	b.w	8005ea8 <_close_r>

08005e96 <memset>:
 8005e96:	4603      	mov	r3, r0
 8005e98:	4402      	add	r2, r0
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d100      	bne.n	8005ea0 <memset+0xa>
 8005e9e:	4770      	bx	lr
 8005ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ea4:	e7f9      	b.n	8005e9a <memset+0x4>
	...

08005ea8 <_close_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	2300      	movs	r3, #0
 8005eac:	4d05      	ldr	r5, [pc, #20]	@ (8005ec4 <_close_r+0x1c>)
 8005eae:	4604      	mov	r4, r0
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	602b      	str	r3, [r5, #0]
 8005eb4:	f7fb fad1 	bl	800145a <_close>
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	d102      	bne.n	8005ec2 <_close_r+0x1a>
 8005ebc:	682b      	ldr	r3, [r5, #0]
 8005ebe:	b103      	cbz	r3, 8005ec2 <_close_r+0x1a>
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	bd38      	pop	{r3, r4, r5, pc}
 8005ec4:	20000394 	.word	0x20000394

08005ec8 <_lseek_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	4d05      	ldr	r5, [pc, #20]	@ (8005ee8 <_lseek_r+0x20>)
 8005ed4:	602a      	str	r2, [r5, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f7fb fae3 	bl	80014a2 <_lseek>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d102      	bne.n	8005ee6 <_lseek_r+0x1e>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	b103      	cbz	r3, 8005ee6 <_lseek_r+0x1e>
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	20000394 	.word	0x20000394

08005eec <_read_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4608      	mov	r0, r1
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	4d05      	ldr	r5, [pc, #20]	@ (8005f0c <_read_r+0x20>)
 8005ef8:	602a      	str	r2, [r5, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	f7fb fa74 	bl	80013e8 <_read>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_read_r+0x1e>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_read_r+0x1e>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	20000394 	.word	0x20000394

08005f10 <_write_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4604      	mov	r4, r0
 8005f14:	4608      	mov	r0, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4d05      	ldr	r5, [pc, #20]	@ (8005f30 <_write_r+0x20>)
 8005f1c:	602a      	str	r2, [r5, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f7fb fa7f 	bl	8001422 <_write>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_write_r+0x1e>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_write_r+0x1e>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	20000394 	.word	0x20000394

08005f34 <__errno>:
 8005f34:	4b01      	ldr	r3, [pc, #4]	@ (8005f3c <__errno+0x8>)
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20000020 	.word	0x20000020

08005f40 <__libc_init_array>:
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	2600      	movs	r6, #0
 8005f44:	4d0c      	ldr	r5, [pc, #48]	@ (8005f78 <__libc_init_array+0x38>)
 8005f46:	4c0d      	ldr	r4, [pc, #52]	@ (8005f7c <__libc_init_array+0x3c>)
 8005f48:	1b64      	subs	r4, r4, r5
 8005f4a:	10a4      	asrs	r4, r4, #2
 8005f4c:	42a6      	cmp	r6, r4
 8005f4e:	d109      	bne.n	8005f64 <__libc_init_array+0x24>
 8005f50:	f000 fdc2 	bl	8006ad8 <_init>
 8005f54:	2600      	movs	r6, #0
 8005f56:	4d0a      	ldr	r5, [pc, #40]	@ (8005f80 <__libc_init_array+0x40>)
 8005f58:	4c0a      	ldr	r4, [pc, #40]	@ (8005f84 <__libc_init_array+0x44>)
 8005f5a:	1b64      	subs	r4, r4, r5
 8005f5c:	10a4      	asrs	r4, r4, #2
 8005f5e:	42a6      	cmp	r6, r4
 8005f60:	d105      	bne.n	8005f6e <__libc_init_array+0x2e>
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f68:	4798      	blx	r3
 8005f6a:	3601      	adds	r6, #1
 8005f6c:	e7ee      	b.n	8005f4c <__libc_init_array+0xc>
 8005f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f72:	4798      	blx	r3
 8005f74:	3601      	adds	r6, #1
 8005f76:	e7f2      	b.n	8005f5e <__libc_init_array+0x1e>
 8005f78:	08006bdc 	.word	0x08006bdc
 8005f7c:	08006bdc 	.word	0x08006bdc
 8005f80:	08006bdc 	.word	0x08006bdc
 8005f84:	08006be0 	.word	0x08006be0

08005f88 <__retarget_lock_init_recursive>:
 8005f88:	4770      	bx	lr

08005f8a <__retarget_lock_acquire_recursive>:
 8005f8a:	4770      	bx	lr

08005f8c <__retarget_lock_release_recursive>:
 8005f8c:	4770      	bx	lr
	...

08005f90 <_free_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4605      	mov	r5, r0
 8005f94:	2900      	cmp	r1, #0
 8005f96:	d040      	beq.n	800601a <_free_r+0x8a>
 8005f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f9c:	1f0c      	subs	r4, r1, #4
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bfb8      	it	lt
 8005fa2:	18e4      	addlt	r4, r4, r3
 8005fa4:	f000 f8de 	bl	8006164 <__malloc_lock>
 8005fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800601c <_free_r+0x8c>)
 8005faa:	6813      	ldr	r3, [r2, #0]
 8005fac:	b933      	cbnz	r3, 8005fbc <_free_r+0x2c>
 8005fae:	6063      	str	r3, [r4, #4]
 8005fb0:	6014      	str	r4, [r2, #0]
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fb8:	f000 b8da 	b.w	8006170 <__malloc_unlock>
 8005fbc:	42a3      	cmp	r3, r4
 8005fbe:	d908      	bls.n	8005fd2 <_free_r+0x42>
 8005fc0:	6820      	ldr	r0, [r4, #0]
 8005fc2:	1821      	adds	r1, r4, r0
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	bf01      	itttt	eq
 8005fc8:	6819      	ldreq	r1, [r3, #0]
 8005fca:	685b      	ldreq	r3, [r3, #4]
 8005fcc:	1809      	addeq	r1, r1, r0
 8005fce:	6021      	streq	r1, [r4, #0]
 8005fd0:	e7ed      	b.n	8005fae <_free_r+0x1e>
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	b10b      	cbz	r3, 8005fdc <_free_r+0x4c>
 8005fd8:	42a3      	cmp	r3, r4
 8005fda:	d9fa      	bls.n	8005fd2 <_free_r+0x42>
 8005fdc:	6811      	ldr	r1, [r2, #0]
 8005fde:	1850      	adds	r0, r2, r1
 8005fe0:	42a0      	cmp	r0, r4
 8005fe2:	d10b      	bne.n	8005ffc <_free_r+0x6c>
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	4401      	add	r1, r0
 8005fe8:	1850      	adds	r0, r2, r1
 8005fea:	4283      	cmp	r3, r0
 8005fec:	6011      	str	r1, [r2, #0]
 8005fee:	d1e0      	bne.n	8005fb2 <_free_r+0x22>
 8005ff0:	6818      	ldr	r0, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	4408      	add	r0, r1
 8005ff6:	6010      	str	r0, [r2, #0]
 8005ff8:	6053      	str	r3, [r2, #4]
 8005ffa:	e7da      	b.n	8005fb2 <_free_r+0x22>
 8005ffc:	d902      	bls.n	8006004 <_free_r+0x74>
 8005ffe:	230c      	movs	r3, #12
 8006000:	602b      	str	r3, [r5, #0]
 8006002:	e7d6      	b.n	8005fb2 <_free_r+0x22>
 8006004:	6820      	ldr	r0, [r4, #0]
 8006006:	1821      	adds	r1, r4, r0
 8006008:	428b      	cmp	r3, r1
 800600a:	bf01      	itttt	eq
 800600c:	6819      	ldreq	r1, [r3, #0]
 800600e:	685b      	ldreq	r3, [r3, #4]
 8006010:	1809      	addeq	r1, r1, r0
 8006012:	6021      	streq	r1, [r4, #0]
 8006014:	6063      	str	r3, [r4, #4]
 8006016:	6054      	str	r4, [r2, #4]
 8006018:	e7cb      	b.n	8005fb2 <_free_r+0x22>
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	200003a0 	.word	0x200003a0

08006020 <sbrk_aligned>:
 8006020:	b570      	push	{r4, r5, r6, lr}
 8006022:	4e0f      	ldr	r6, [pc, #60]	@ (8006060 <sbrk_aligned+0x40>)
 8006024:	460c      	mov	r4, r1
 8006026:	6831      	ldr	r1, [r6, #0]
 8006028:	4605      	mov	r5, r0
 800602a:	b911      	cbnz	r1, 8006032 <sbrk_aligned+0x12>
 800602c:	f000 fcb2 	bl	8006994 <_sbrk_r>
 8006030:	6030      	str	r0, [r6, #0]
 8006032:	4621      	mov	r1, r4
 8006034:	4628      	mov	r0, r5
 8006036:	f000 fcad 	bl	8006994 <_sbrk_r>
 800603a:	1c43      	adds	r3, r0, #1
 800603c:	d103      	bne.n	8006046 <sbrk_aligned+0x26>
 800603e:	f04f 34ff 	mov.w	r4, #4294967295
 8006042:	4620      	mov	r0, r4
 8006044:	bd70      	pop	{r4, r5, r6, pc}
 8006046:	1cc4      	adds	r4, r0, #3
 8006048:	f024 0403 	bic.w	r4, r4, #3
 800604c:	42a0      	cmp	r0, r4
 800604e:	d0f8      	beq.n	8006042 <sbrk_aligned+0x22>
 8006050:	1a21      	subs	r1, r4, r0
 8006052:	4628      	mov	r0, r5
 8006054:	f000 fc9e 	bl	8006994 <_sbrk_r>
 8006058:	3001      	adds	r0, #1
 800605a:	d1f2      	bne.n	8006042 <sbrk_aligned+0x22>
 800605c:	e7ef      	b.n	800603e <sbrk_aligned+0x1e>
 800605e:	bf00      	nop
 8006060:	2000039c 	.word	0x2000039c

08006064 <_malloc_r>:
 8006064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006068:	1ccd      	adds	r5, r1, #3
 800606a:	f025 0503 	bic.w	r5, r5, #3
 800606e:	3508      	adds	r5, #8
 8006070:	2d0c      	cmp	r5, #12
 8006072:	bf38      	it	cc
 8006074:	250c      	movcc	r5, #12
 8006076:	2d00      	cmp	r5, #0
 8006078:	4606      	mov	r6, r0
 800607a:	db01      	blt.n	8006080 <_malloc_r+0x1c>
 800607c:	42a9      	cmp	r1, r5
 800607e:	d904      	bls.n	800608a <_malloc_r+0x26>
 8006080:	230c      	movs	r3, #12
 8006082:	6033      	str	r3, [r6, #0]
 8006084:	2000      	movs	r0, #0
 8006086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800608a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006160 <_malloc_r+0xfc>
 800608e:	f000 f869 	bl	8006164 <__malloc_lock>
 8006092:	f8d8 3000 	ldr.w	r3, [r8]
 8006096:	461c      	mov	r4, r3
 8006098:	bb44      	cbnz	r4, 80060ec <_malloc_r+0x88>
 800609a:	4629      	mov	r1, r5
 800609c:	4630      	mov	r0, r6
 800609e:	f7ff ffbf 	bl	8006020 <sbrk_aligned>
 80060a2:	1c43      	adds	r3, r0, #1
 80060a4:	4604      	mov	r4, r0
 80060a6:	d158      	bne.n	800615a <_malloc_r+0xf6>
 80060a8:	f8d8 4000 	ldr.w	r4, [r8]
 80060ac:	4627      	mov	r7, r4
 80060ae:	2f00      	cmp	r7, #0
 80060b0:	d143      	bne.n	800613a <_malloc_r+0xd6>
 80060b2:	2c00      	cmp	r4, #0
 80060b4:	d04b      	beq.n	800614e <_malloc_r+0xea>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	4639      	mov	r1, r7
 80060ba:	4630      	mov	r0, r6
 80060bc:	eb04 0903 	add.w	r9, r4, r3
 80060c0:	f000 fc68 	bl	8006994 <_sbrk_r>
 80060c4:	4581      	cmp	r9, r0
 80060c6:	d142      	bne.n	800614e <_malloc_r+0xea>
 80060c8:	6821      	ldr	r1, [r4, #0]
 80060ca:	4630      	mov	r0, r6
 80060cc:	1a6d      	subs	r5, r5, r1
 80060ce:	4629      	mov	r1, r5
 80060d0:	f7ff ffa6 	bl	8006020 <sbrk_aligned>
 80060d4:	3001      	adds	r0, #1
 80060d6:	d03a      	beq.n	800614e <_malloc_r+0xea>
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	442b      	add	r3, r5
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	f8d8 3000 	ldr.w	r3, [r8]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	bb62      	cbnz	r2, 8006140 <_malloc_r+0xdc>
 80060e6:	f8c8 7000 	str.w	r7, [r8]
 80060ea:	e00f      	b.n	800610c <_malloc_r+0xa8>
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	1b52      	subs	r2, r2, r5
 80060f0:	d420      	bmi.n	8006134 <_malloc_r+0xd0>
 80060f2:	2a0b      	cmp	r2, #11
 80060f4:	d917      	bls.n	8006126 <_malloc_r+0xc2>
 80060f6:	1961      	adds	r1, r4, r5
 80060f8:	42a3      	cmp	r3, r4
 80060fa:	6025      	str	r5, [r4, #0]
 80060fc:	bf18      	it	ne
 80060fe:	6059      	strne	r1, [r3, #4]
 8006100:	6863      	ldr	r3, [r4, #4]
 8006102:	bf08      	it	eq
 8006104:	f8c8 1000 	streq.w	r1, [r8]
 8006108:	5162      	str	r2, [r4, r5]
 800610a:	604b      	str	r3, [r1, #4]
 800610c:	4630      	mov	r0, r6
 800610e:	f000 f82f 	bl	8006170 <__malloc_unlock>
 8006112:	f104 000b 	add.w	r0, r4, #11
 8006116:	1d23      	adds	r3, r4, #4
 8006118:	f020 0007 	bic.w	r0, r0, #7
 800611c:	1ac2      	subs	r2, r0, r3
 800611e:	bf1c      	itt	ne
 8006120:	1a1b      	subne	r3, r3, r0
 8006122:	50a3      	strne	r3, [r4, r2]
 8006124:	e7af      	b.n	8006086 <_malloc_r+0x22>
 8006126:	6862      	ldr	r2, [r4, #4]
 8006128:	42a3      	cmp	r3, r4
 800612a:	bf0c      	ite	eq
 800612c:	f8c8 2000 	streq.w	r2, [r8]
 8006130:	605a      	strne	r2, [r3, #4]
 8006132:	e7eb      	b.n	800610c <_malloc_r+0xa8>
 8006134:	4623      	mov	r3, r4
 8006136:	6864      	ldr	r4, [r4, #4]
 8006138:	e7ae      	b.n	8006098 <_malloc_r+0x34>
 800613a:	463c      	mov	r4, r7
 800613c:	687f      	ldr	r7, [r7, #4]
 800613e:	e7b6      	b.n	80060ae <_malloc_r+0x4a>
 8006140:	461a      	mov	r2, r3
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	42a3      	cmp	r3, r4
 8006146:	d1fb      	bne.n	8006140 <_malloc_r+0xdc>
 8006148:	2300      	movs	r3, #0
 800614a:	6053      	str	r3, [r2, #4]
 800614c:	e7de      	b.n	800610c <_malloc_r+0xa8>
 800614e:	230c      	movs	r3, #12
 8006150:	4630      	mov	r0, r6
 8006152:	6033      	str	r3, [r6, #0]
 8006154:	f000 f80c 	bl	8006170 <__malloc_unlock>
 8006158:	e794      	b.n	8006084 <_malloc_r+0x20>
 800615a:	6005      	str	r5, [r0, #0]
 800615c:	e7d6      	b.n	800610c <_malloc_r+0xa8>
 800615e:	bf00      	nop
 8006160:	200003a0 	.word	0x200003a0

08006164 <__malloc_lock>:
 8006164:	4801      	ldr	r0, [pc, #4]	@ (800616c <__malloc_lock+0x8>)
 8006166:	f7ff bf10 	b.w	8005f8a <__retarget_lock_acquire_recursive>
 800616a:	bf00      	nop
 800616c:	20000398 	.word	0x20000398

08006170 <__malloc_unlock>:
 8006170:	4801      	ldr	r0, [pc, #4]	@ (8006178 <__malloc_unlock+0x8>)
 8006172:	f7ff bf0b 	b.w	8005f8c <__retarget_lock_release_recursive>
 8006176:	bf00      	nop
 8006178:	20000398 	.word	0x20000398

0800617c <__sfputc_r>:
 800617c:	6893      	ldr	r3, [r2, #8]
 800617e:	b410      	push	{r4}
 8006180:	3b01      	subs	r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	6093      	str	r3, [r2, #8]
 8006186:	da07      	bge.n	8006198 <__sfputc_r+0x1c>
 8006188:	6994      	ldr	r4, [r2, #24]
 800618a:	42a3      	cmp	r3, r4
 800618c:	db01      	blt.n	8006192 <__sfputc_r+0x16>
 800618e:	290a      	cmp	r1, #10
 8006190:	d102      	bne.n	8006198 <__sfputc_r+0x1c>
 8006192:	bc10      	pop	{r4}
 8006194:	f000 bb6a 	b.w	800686c <__swbuf_r>
 8006198:	6813      	ldr	r3, [r2, #0]
 800619a:	1c58      	adds	r0, r3, #1
 800619c:	6010      	str	r0, [r2, #0]
 800619e:	7019      	strb	r1, [r3, #0]
 80061a0:	4608      	mov	r0, r1
 80061a2:	bc10      	pop	{r4}
 80061a4:	4770      	bx	lr

080061a6 <__sfputs_r>:
 80061a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a8:	4606      	mov	r6, r0
 80061aa:	460f      	mov	r7, r1
 80061ac:	4614      	mov	r4, r2
 80061ae:	18d5      	adds	r5, r2, r3
 80061b0:	42ac      	cmp	r4, r5
 80061b2:	d101      	bne.n	80061b8 <__sfputs_r+0x12>
 80061b4:	2000      	movs	r0, #0
 80061b6:	e007      	b.n	80061c8 <__sfputs_r+0x22>
 80061b8:	463a      	mov	r2, r7
 80061ba:	4630      	mov	r0, r6
 80061bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c0:	f7ff ffdc 	bl	800617c <__sfputc_r>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d1f3      	bne.n	80061b0 <__sfputs_r+0xa>
 80061c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061cc <_vfiprintf_r>:
 80061cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d0:	460d      	mov	r5, r1
 80061d2:	4614      	mov	r4, r2
 80061d4:	4698      	mov	r8, r3
 80061d6:	4606      	mov	r6, r0
 80061d8:	b09d      	sub	sp, #116	@ 0x74
 80061da:	b118      	cbz	r0, 80061e4 <_vfiprintf_r+0x18>
 80061dc:	6a03      	ldr	r3, [r0, #32]
 80061de:	b90b      	cbnz	r3, 80061e4 <_vfiprintf_r+0x18>
 80061e0:	f7ff fdce 	bl	8005d80 <__sinit>
 80061e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061e6:	07d9      	lsls	r1, r3, #31
 80061e8:	d405      	bmi.n	80061f6 <_vfiprintf_r+0x2a>
 80061ea:	89ab      	ldrh	r3, [r5, #12]
 80061ec:	059a      	lsls	r2, r3, #22
 80061ee:	d402      	bmi.n	80061f6 <_vfiprintf_r+0x2a>
 80061f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061f2:	f7ff feca 	bl	8005f8a <__retarget_lock_acquire_recursive>
 80061f6:	89ab      	ldrh	r3, [r5, #12]
 80061f8:	071b      	lsls	r3, r3, #28
 80061fa:	d501      	bpl.n	8006200 <_vfiprintf_r+0x34>
 80061fc:	692b      	ldr	r3, [r5, #16]
 80061fe:	b99b      	cbnz	r3, 8006228 <_vfiprintf_r+0x5c>
 8006200:	4629      	mov	r1, r5
 8006202:	4630      	mov	r0, r6
 8006204:	f000 fb70 	bl	80068e8 <__swsetup_r>
 8006208:	b170      	cbz	r0, 8006228 <_vfiprintf_r+0x5c>
 800620a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800620c:	07dc      	lsls	r4, r3, #31
 800620e:	d504      	bpl.n	800621a <_vfiprintf_r+0x4e>
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	b01d      	add	sp, #116	@ 0x74
 8006216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621a:	89ab      	ldrh	r3, [r5, #12]
 800621c:	0598      	lsls	r0, r3, #22
 800621e:	d4f7      	bmi.n	8006210 <_vfiprintf_r+0x44>
 8006220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006222:	f7ff feb3 	bl	8005f8c <__retarget_lock_release_recursive>
 8006226:	e7f3      	b.n	8006210 <_vfiprintf_r+0x44>
 8006228:	2300      	movs	r3, #0
 800622a:	9309      	str	r3, [sp, #36]	@ 0x24
 800622c:	2320      	movs	r3, #32
 800622e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006232:	2330      	movs	r3, #48	@ 0x30
 8006234:	f04f 0901 	mov.w	r9, #1
 8006238:	f8cd 800c 	str.w	r8, [sp, #12]
 800623c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80063e8 <_vfiprintf_r+0x21c>
 8006240:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006244:	4623      	mov	r3, r4
 8006246:	469a      	mov	sl, r3
 8006248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800624c:	b10a      	cbz	r2, 8006252 <_vfiprintf_r+0x86>
 800624e:	2a25      	cmp	r2, #37	@ 0x25
 8006250:	d1f9      	bne.n	8006246 <_vfiprintf_r+0x7a>
 8006252:	ebba 0b04 	subs.w	fp, sl, r4
 8006256:	d00b      	beq.n	8006270 <_vfiprintf_r+0xa4>
 8006258:	465b      	mov	r3, fp
 800625a:	4622      	mov	r2, r4
 800625c:	4629      	mov	r1, r5
 800625e:	4630      	mov	r0, r6
 8006260:	f7ff ffa1 	bl	80061a6 <__sfputs_r>
 8006264:	3001      	adds	r0, #1
 8006266:	f000 80a7 	beq.w	80063b8 <_vfiprintf_r+0x1ec>
 800626a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800626c:	445a      	add	r2, fp
 800626e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006270:	f89a 3000 	ldrb.w	r3, [sl]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 809f 	beq.w	80063b8 <_vfiprintf_r+0x1ec>
 800627a:	2300      	movs	r3, #0
 800627c:	f04f 32ff 	mov.w	r2, #4294967295
 8006280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006284:	f10a 0a01 	add.w	sl, sl, #1
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	9307      	str	r3, [sp, #28]
 800628c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006290:	931a      	str	r3, [sp, #104]	@ 0x68
 8006292:	4654      	mov	r4, sl
 8006294:	2205      	movs	r2, #5
 8006296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800629a:	4853      	ldr	r0, [pc, #332]	@ (80063e8 <_vfiprintf_r+0x21c>)
 800629c:	f000 fb8a 	bl	80069b4 <memchr>
 80062a0:	9a04      	ldr	r2, [sp, #16]
 80062a2:	b9d8      	cbnz	r0, 80062dc <_vfiprintf_r+0x110>
 80062a4:	06d1      	lsls	r1, r2, #27
 80062a6:	bf44      	itt	mi
 80062a8:	2320      	movmi	r3, #32
 80062aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062ae:	0713      	lsls	r3, r2, #28
 80062b0:	bf44      	itt	mi
 80062b2:	232b      	movmi	r3, #43	@ 0x2b
 80062b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062b8:	f89a 3000 	ldrb.w	r3, [sl]
 80062bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80062be:	d015      	beq.n	80062ec <_vfiprintf_r+0x120>
 80062c0:	4654      	mov	r4, sl
 80062c2:	2000      	movs	r0, #0
 80062c4:	f04f 0c0a 	mov.w	ip, #10
 80062c8:	9a07      	ldr	r2, [sp, #28]
 80062ca:	4621      	mov	r1, r4
 80062cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062d0:	3b30      	subs	r3, #48	@ 0x30
 80062d2:	2b09      	cmp	r3, #9
 80062d4:	d94b      	bls.n	800636e <_vfiprintf_r+0x1a2>
 80062d6:	b1b0      	cbz	r0, 8006306 <_vfiprintf_r+0x13a>
 80062d8:	9207      	str	r2, [sp, #28]
 80062da:	e014      	b.n	8006306 <_vfiprintf_r+0x13a>
 80062dc:	eba0 0308 	sub.w	r3, r0, r8
 80062e0:	fa09 f303 	lsl.w	r3, r9, r3
 80062e4:	4313      	orrs	r3, r2
 80062e6:	46a2      	mov	sl, r4
 80062e8:	9304      	str	r3, [sp, #16]
 80062ea:	e7d2      	b.n	8006292 <_vfiprintf_r+0xc6>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	1d19      	adds	r1, r3, #4
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	9103      	str	r1, [sp, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bfbb      	ittet	lt
 80062f8:	425b      	neglt	r3, r3
 80062fa:	f042 0202 	orrlt.w	r2, r2, #2
 80062fe:	9307      	strge	r3, [sp, #28]
 8006300:	9307      	strlt	r3, [sp, #28]
 8006302:	bfb8      	it	lt
 8006304:	9204      	strlt	r2, [sp, #16]
 8006306:	7823      	ldrb	r3, [r4, #0]
 8006308:	2b2e      	cmp	r3, #46	@ 0x2e
 800630a:	d10a      	bne.n	8006322 <_vfiprintf_r+0x156>
 800630c:	7863      	ldrb	r3, [r4, #1]
 800630e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006310:	d132      	bne.n	8006378 <_vfiprintf_r+0x1ac>
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	3402      	adds	r4, #2
 8006316:	1d1a      	adds	r2, r3, #4
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	9203      	str	r2, [sp, #12]
 800631c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006320:	9305      	str	r3, [sp, #20]
 8006322:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80063ec <_vfiprintf_r+0x220>
 8006326:	2203      	movs	r2, #3
 8006328:	4650      	mov	r0, sl
 800632a:	7821      	ldrb	r1, [r4, #0]
 800632c:	f000 fb42 	bl	80069b4 <memchr>
 8006330:	b138      	cbz	r0, 8006342 <_vfiprintf_r+0x176>
 8006332:	2240      	movs	r2, #64	@ 0x40
 8006334:	9b04      	ldr	r3, [sp, #16]
 8006336:	eba0 000a 	sub.w	r0, r0, sl
 800633a:	4082      	lsls	r2, r0
 800633c:	4313      	orrs	r3, r2
 800633e:	3401      	adds	r4, #1
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006346:	2206      	movs	r2, #6
 8006348:	4829      	ldr	r0, [pc, #164]	@ (80063f0 <_vfiprintf_r+0x224>)
 800634a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800634e:	f000 fb31 	bl	80069b4 <memchr>
 8006352:	2800      	cmp	r0, #0
 8006354:	d03f      	beq.n	80063d6 <_vfiprintf_r+0x20a>
 8006356:	4b27      	ldr	r3, [pc, #156]	@ (80063f4 <_vfiprintf_r+0x228>)
 8006358:	bb1b      	cbnz	r3, 80063a2 <_vfiprintf_r+0x1d6>
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	3307      	adds	r3, #7
 800635e:	f023 0307 	bic.w	r3, r3, #7
 8006362:	3308      	adds	r3, #8
 8006364:	9303      	str	r3, [sp, #12]
 8006366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006368:	443b      	add	r3, r7
 800636a:	9309      	str	r3, [sp, #36]	@ 0x24
 800636c:	e76a      	b.n	8006244 <_vfiprintf_r+0x78>
 800636e:	460c      	mov	r4, r1
 8006370:	2001      	movs	r0, #1
 8006372:	fb0c 3202 	mla	r2, ip, r2, r3
 8006376:	e7a8      	b.n	80062ca <_vfiprintf_r+0xfe>
 8006378:	2300      	movs	r3, #0
 800637a:	f04f 0c0a 	mov.w	ip, #10
 800637e:	4619      	mov	r1, r3
 8006380:	3401      	adds	r4, #1
 8006382:	9305      	str	r3, [sp, #20]
 8006384:	4620      	mov	r0, r4
 8006386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800638a:	3a30      	subs	r2, #48	@ 0x30
 800638c:	2a09      	cmp	r2, #9
 800638e:	d903      	bls.n	8006398 <_vfiprintf_r+0x1cc>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0c6      	beq.n	8006322 <_vfiprintf_r+0x156>
 8006394:	9105      	str	r1, [sp, #20]
 8006396:	e7c4      	b.n	8006322 <_vfiprintf_r+0x156>
 8006398:	4604      	mov	r4, r0
 800639a:	2301      	movs	r3, #1
 800639c:	fb0c 2101 	mla	r1, ip, r1, r2
 80063a0:	e7f0      	b.n	8006384 <_vfiprintf_r+0x1b8>
 80063a2:	ab03      	add	r3, sp, #12
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	462a      	mov	r2, r5
 80063a8:	4630      	mov	r0, r6
 80063aa:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <_vfiprintf_r+0x22c>)
 80063ac:	a904      	add	r1, sp, #16
 80063ae:	f3af 8000 	nop.w
 80063b2:	4607      	mov	r7, r0
 80063b4:	1c78      	adds	r0, r7, #1
 80063b6:	d1d6      	bne.n	8006366 <_vfiprintf_r+0x19a>
 80063b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063ba:	07d9      	lsls	r1, r3, #31
 80063bc:	d405      	bmi.n	80063ca <_vfiprintf_r+0x1fe>
 80063be:	89ab      	ldrh	r3, [r5, #12]
 80063c0:	059a      	lsls	r2, r3, #22
 80063c2:	d402      	bmi.n	80063ca <_vfiprintf_r+0x1fe>
 80063c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063c6:	f7ff fde1 	bl	8005f8c <__retarget_lock_release_recursive>
 80063ca:	89ab      	ldrh	r3, [r5, #12]
 80063cc:	065b      	lsls	r3, r3, #25
 80063ce:	f53f af1f 	bmi.w	8006210 <_vfiprintf_r+0x44>
 80063d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063d4:	e71e      	b.n	8006214 <_vfiprintf_r+0x48>
 80063d6:	ab03      	add	r3, sp, #12
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	462a      	mov	r2, r5
 80063dc:	4630      	mov	r0, r6
 80063de:	4b06      	ldr	r3, [pc, #24]	@ (80063f8 <_vfiprintf_r+0x22c>)
 80063e0:	a904      	add	r1, sp, #16
 80063e2:	f000 f87d 	bl	80064e0 <_printf_i>
 80063e6:	e7e4      	b.n	80063b2 <_vfiprintf_r+0x1e6>
 80063e8:	08006ba6 	.word	0x08006ba6
 80063ec:	08006bac 	.word	0x08006bac
 80063f0:	08006bb0 	.word	0x08006bb0
 80063f4:	00000000 	.word	0x00000000
 80063f8:	080061a7 	.word	0x080061a7

080063fc <_printf_common>:
 80063fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	4616      	mov	r6, r2
 8006402:	4698      	mov	r8, r3
 8006404:	688a      	ldr	r2, [r1, #8]
 8006406:	690b      	ldr	r3, [r1, #16]
 8006408:	4607      	mov	r7, r0
 800640a:	4293      	cmp	r3, r2
 800640c:	bfb8      	it	lt
 800640e:	4613      	movlt	r3, r2
 8006410:	6033      	str	r3, [r6, #0]
 8006412:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006416:	460c      	mov	r4, r1
 8006418:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800641c:	b10a      	cbz	r2, 8006422 <_printf_common+0x26>
 800641e:	3301      	adds	r3, #1
 8006420:	6033      	str	r3, [r6, #0]
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	0699      	lsls	r1, r3, #26
 8006426:	bf42      	ittt	mi
 8006428:	6833      	ldrmi	r3, [r6, #0]
 800642a:	3302      	addmi	r3, #2
 800642c:	6033      	strmi	r3, [r6, #0]
 800642e:	6825      	ldr	r5, [r4, #0]
 8006430:	f015 0506 	ands.w	r5, r5, #6
 8006434:	d106      	bne.n	8006444 <_printf_common+0x48>
 8006436:	f104 0a19 	add.w	sl, r4, #25
 800643a:	68e3      	ldr	r3, [r4, #12]
 800643c:	6832      	ldr	r2, [r6, #0]
 800643e:	1a9b      	subs	r3, r3, r2
 8006440:	42ab      	cmp	r3, r5
 8006442:	dc2b      	bgt.n	800649c <_printf_common+0xa0>
 8006444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006448:	6822      	ldr	r2, [r4, #0]
 800644a:	3b00      	subs	r3, #0
 800644c:	bf18      	it	ne
 800644e:	2301      	movne	r3, #1
 8006450:	0692      	lsls	r2, r2, #26
 8006452:	d430      	bmi.n	80064b6 <_printf_common+0xba>
 8006454:	4641      	mov	r1, r8
 8006456:	4638      	mov	r0, r7
 8006458:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800645c:	47c8      	blx	r9
 800645e:	3001      	adds	r0, #1
 8006460:	d023      	beq.n	80064aa <_printf_common+0xae>
 8006462:	6823      	ldr	r3, [r4, #0]
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	f003 0306 	and.w	r3, r3, #6
 800646a:	2b04      	cmp	r3, #4
 800646c:	bf14      	ite	ne
 800646e:	2500      	movne	r5, #0
 8006470:	6833      	ldreq	r3, [r6, #0]
 8006472:	f04f 0600 	mov.w	r6, #0
 8006476:	bf08      	it	eq
 8006478:	68e5      	ldreq	r5, [r4, #12]
 800647a:	f104 041a 	add.w	r4, r4, #26
 800647e:	bf08      	it	eq
 8006480:	1aed      	subeq	r5, r5, r3
 8006482:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006486:	bf08      	it	eq
 8006488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800648c:	4293      	cmp	r3, r2
 800648e:	bfc4      	itt	gt
 8006490:	1a9b      	subgt	r3, r3, r2
 8006492:	18ed      	addgt	r5, r5, r3
 8006494:	42b5      	cmp	r5, r6
 8006496:	d11a      	bne.n	80064ce <_printf_common+0xd2>
 8006498:	2000      	movs	r0, #0
 800649a:	e008      	b.n	80064ae <_printf_common+0xb2>
 800649c:	2301      	movs	r3, #1
 800649e:	4652      	mov	r2, sl
 80064a0:	4641      	mov	r1, r8
 80064a2:	4638      	mov	r0, r7
 80064a4:	47c8      	blx	r9
 80064a6:	3001      	adds	r0, #1
 80064a8:	d103      	bne.n	80064b2 <_printf_common+0xb6>
 80064aa:	f04f 30ff 	mov.w	r0, #4294967295
 80064ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b2:	3501      	adds	r5, #1
 80064b4:	e7c1      	b.n	800643a <_printf_common+0x3e>
 80064b6:	2030      	movs	r0, #48	@ 0x30
 80064b8:	18e1      	adds	r1, r4, r3
 80064ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064c4:	4422      	add	r2, r4
 80064c6:	3302      	adds	r3, #2
 80064c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064cc:	e7c2      	b.n	8006454 <_printf_common+0x58>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4622      	mov	r2, r4
 80064d2:	4641      	mov	r1, r8
 80064d4:	4638      	mov	r0, r7
 80064d6:	47c8      	blx	r9
 80064d8:	3001      	adds	r0, #1
 80064da:	d0e6      	beq.n	80064aa <_printf_common+0xae>
 80064dc:	3601      	adds	r6, #1
 80064de:	e7d9      	b.n	8006494 <_printf_common+0x98>

080064e0 <_printf_i>:
 80064e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	7e0f      	ldrb	r7, [r1, #24]
 80064e6:	4691      	mov	r9, r2
 80064e8:	2f78      	cmp	r7, #120	@ 0x78
 80064ea:	4680      	mov	r8, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	469a      	mov	sl, r3
 80064f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064f6:	d807      	bhi.n	8006508 <_printf_i+0x28>
 80064f8:	2f62      	cmp	r7, #98	@ 0x62
 80064fa:	d80a      	bhi.n	8006512 <_printf_i+0x32>
 80064fc:	2f00      	cmp	r7, #0
 80064fe:	f000 80d1 	beq.w	80066a4 <_printf_i+0x1c4>
 8006502:	2f58      	cmp	r7, #88	@ 0x58
 8006504:	f000 80b8 	beq.w	8006678 <_printf_i+0x198>
 8006508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800650c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006510:	e03a      	b.n	8006588 <_printf_i+0xa8>
 8006512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006516:	2b15      	cmp	r3, #21
 8006518:	d8f6      	bhi.n	8006508 <_printf_i+0x28>
 800651a:	a101      	add	r1, pc, #4	@ (adr r1, 8006520 <_printf_i+0x40>)
 800651c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006520:	08006579 	.word	0x08006579
 8006524:	0800658d 	.word	0x0800658d
 8006528:	08006509 	.word	0x08006509
 800652c:	08006509 	.word	0x08006509
 8006530:	08006509 	.word	0x08006509
 8006534:	08006509 	.word	0x08006509
 8006538:	0800658d 	.word	0x0800658d
 800653c:	08006509 	.word	0x08006509
 8006540:	08006509 	.word	0x08006509
 8006544:	08006509 	.word	0x08006509
 8006548:	08006509 	.word	0x08006509
 800654c:	0800668b 	.word	0x0800668b
 8006550:	080065b7 	.word	0x080065b7
 8006554:	08006645 	.word	0x08006645
 8006558:	08006509 	.word	0x08006509
 800655c:	08006509 	.word	0x08006509
 8006560:	080066ad 	.word	0x080066ad
 8006564:	08006509 	.word	0x08006509
 8006568:	080065b7 	.word	0x080065b7
 800656c:	08006509 	.word	0x08006509
 8006570:	08006509 	.word	0x08006509
 8006574:	0800664d 	.word	0x0800664d
 8006578:	6833      	ldr	r3, [r6, #0]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6032      	str	r2, [r6, #0]
 8006580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006588:	2301      	movs	r3, #1
 800658a:	e09c      	b.n	80066c6 <_printf_i+0x1e6>
 800658c:	6833      	ldr	r3, [r6, #0]
 800658e:	6820      	ldr	r0, [r4, #0]
 8006590:	1d19      	adds	r1, r3, #4
 8006592:	6031      	str	r1, [r6, #0]
 8006594:	0606      	lsls	r6, r0, #24
 8006596:	d501      	bpl.n	800659c <_printf_i+0xbc>
 8006598:	681d      	ldr	r5, [r3, #0]
 800659a:	e003      	b.n	80065a4 <_printf_i+0xc4>
 800659c:	0645      	lsls	r5, r0, #25
 800659e:	d5fb      	bpl.n	8006598 <_printf_i+0xb8>
 80065a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065a4:	2d00      	cmp	r5, #0
 80065a6:	da03      	bge.n	80065b0 <_printf_i+0xd0>
 80065a8:	232d      	movs	r3, #45	@ 0x2d
 80065aa:	426d      	negs	r5, r5
 80065ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065b0:	230a      	movs	r3, #10
 80065b2:	4858      	ldr	r0, [pc, #352]	@ (8006714 <_printf_i+0x234>)
 80065b4:	e011      	b.n	80065da <_printf_i+0xfa>
 80065b6:	6821      	ldr	r1, [r4, #0]
 80065b8:	6833      	ldr	r3, [r6, #0]
 80065ba:	0608      	lsls	r0, r1, #24
 80065bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80065c0:	d402      	bmi.n	80065c8 <_printf_i+0xe8>
 80065c2:	0649      	lsls	r1, r1, #25
 80065c4:	bf48      	it	mi
 80065c6:	b2ad      	uxthmi	r5, r5
 80065c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80065ca:	6033      	str	r3, [r6, #0]
 80065cc:	bf14      	ite	ne
 80065ce:	230a      	movne	r3, #10
 80065d0:	2308      	moveq	r3, #8
 80065d2:	4850      	ldr	r0, [pc, #320]	@ (8006714 <_printf_i+0x234>)
 80065d4:	2100      	movs	r1, #0
 80065d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065da:	6866      	ldr	r6, [r4, #4]
 80065dc:	2e00      	cmp	r6, #0
 80065de:	60a6      	str	r6, [r4, #8]
 80065e0:	db05      	blt.n	80065ee <_printf_i+0x10e>
 80065e2:	6821      	ldr	r1, [r4, #0]
 80065e4:	432e      	orrs	r6, r5
 80065e6:	f021 0104 	bic.w	r1, r1, #4
 80065ea:	6021      	str	r1, [r4, #0]
 80065ec:	d04b      	beq.n	8006686 <_printf_i+0x1a6>
 80065ee:	4616      	mov	r6, r2
 80065f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80065f4:	fb03 5711 	mls	r7, r3, r1, r5
 80065f8:	5dc7      	ldrb	r7, [r0, r7]
 80065fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065fe:	462f      	mov	r7, r5
 8006600:	42bb      	cmp	r3, r7
 8006602:	460d      	mov	r5, r1
 8006604:	d9f4      	bls.n	80065f0 <_printf_i+0x110>
 8006606:	2b08      	cmp	r3, #8
 8006608:	d10b      	bne.n	8006622 <_printf_i+0x142>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	07df      	lsls	r7, r3, #31
 800660e:	d508      	bpl.n	8006622 <_printf_i+0x142>
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	6861      	ldr	r1, [r4, #4]
 8006614:	4299      	cmp	r1, r3
 8006616:	bfde      	ittt	le
 8006618:	2330      	movle	r3, #48	@ 0x30
 800661a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800661e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006622:	1b92      	subs	r2, r2, r6
 8006624:	6122      	str	r2, [r4, #16]
 8006626:	464b      	mov	r3, r9
 8006628:	4621      	mov	r1, r4
 800662a:	4640      	mov	r0, r8
 800662c:	f8cd a000 	str.w	sl, [sp]
 8006630:	aa03      	add	r2, sp, #12
 8006632:	f7ff fee3 	bl	80063fc <_printf_common>
 8006636:	3001      	adds	r0, #1
 8006638:	d14a      	bne.n	80066d0 <_printf_i+0x1f0>
 800663a:	f04f 30ff 	mov.w	r0, #4294967295
 800663e:	b004      	add	sp, #16
 8006640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	f043 0320 	orr.w	r3, r3, #32
 800664a:	6023      	str	r3, [r4, #0]
 800664c:	2778      	movs	r7, #120	@ 0x78
 800664e:	4832      	ldr	r0, [pc, #200]	@ (8006718 <_printf_i+0x238>)
 8006650:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	6831      	ldr	r1, [r6, #0]
 8006658:	061f      	lsls	r7, r3, #24
 800665a:	f851 5b04 	ldr.w	r5, [r1], #4
 800665e:	d402      	bmi.n	8006666 <_printf_i+0x186>
 8006660:	065f      	lsls	r7, r3, #25
 8006662:	bf48      	it	mi
 8006664:	b2ad      	uxthmi	r5, r5
 8006666:	6031      	str	r1, [r6, #0]
 8006668:	07d9      	lsls	r1, r3, #31
 800666a:	bf44      	itt	mi
 800666c:	f043 0320 	orrmi.w	r3, r3, #32
 8006670:	6023      	strmi	r3, [r4, #0]
 8006672:	b11d      	cbz	r5, 800667c <_printf_i+0x19c>
 8006674:	2310      	movs	r3, #16
 8006676:	e7ad      	b.n	80065d4 <_printf_i+0xf4>
 8006678:	4826      	ldr	r0, [pc, #152]	@ (8006714 <_printf_i+0x234>)
 800667a:	e7e9      	b.n	8006650 <_printf_i+0x170>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	f023 0320 	bic.w	r3, r3, #32
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	e7f6      	b.n	8006674 <_printf_i+0x194>
 8006686:	4616      	mov	r6, r2
 8006688:	e7bd      	b.n	8006606 <_printf_i+0x126>
 800668a:	6833      	ldr	r3, [r6, #0]
 800668c:	6825      	ldr	r5, [r4, #0]
 800668e:	1d18      	adds	r0, r3, #4
 8006690:	6961      	ldr	r1, [r4, #20]
 8006692:	6030      	str	r0, [r6, #0]
 8006694:	062e      	lsls	r6, r5, #24
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	d501      	bpl.n	800669e <_printf_i+0x1be>
 800669a:	6019      	str	r1, [r3, #0]
 800669c:	e002      	b.n	80066a4 <_printf_i+0x1c4>
 800669e:	0668      	lsls	r0, r5, #25
 80066a0:	d5fb      	bpl.n	800669a <_printf_i+0x1ba>
 80066a2:	8019      	strh	r1, [r3, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	4616      	mov	r6, r2
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	e7bc      	b.n	8006626 <_printf_i+0x146>
 80066ac:	6833      	ldr	r3, [r6, #0]
 80066ae:	2100      	movs	r1, #0
 80066b0:	1d1a      	adds	r2, r3, #4
 80066b2:	6032      	str	r2, [r6, #0]
 80066b4:	681e      	ldr	r6, [r3, #0]
 80066b6:	6862      	ldr	r2, [r4, #4]
 80066b8:	4630      	mov	r0, r6
 80066ba:	f000 f97b 	bl	80069b4 <memchr>
 80066be:	b108      	cbz	r0, 80066c4 <_printf_i+0x1e4>
 80066c0:	1b80      	subs	r0, r0, r6
 80066c2:	6060      	str	r0, [r4, #4]
 80066c4:	6863      	ldr	r3, [r4, #4]
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	2300      	movs	r3, #0
 80066ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066ce:	e7aa      	b.n	8006626 <_printf_i+0x146>
 80066d0:	4632      	mov	r2, r6
 80066d2:	4649      	mov	r1, r9
 80066d4:	4640      	mov	r0, r8
 80066d6:	6923      	ldr	r3, [r4, #16]
 80066d8:	47d0      	blx	sl
 80066da:	3001      	adds	r0, #1
 80066dc:	d0ad      	beq.n	800663a <_printf_i+0x15a>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	079b      	lsls	r3, r3, #30
 80066e2:	d413      	bmi.n	800670c <_printf_i+0x22c>
 80066e4:	68e0      	ldr	r0, [r4, #12]
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	4298      	cmp	r0, r3
 80066ea:	bfb8      	it	lt
 80066ec:	4618      	movlt	r0, r3
 80066ee:	e7a6      	b.n	800663e <_printf_i+0x15e>
 80066f0:	2301      	movs	r3, #1
 80066f2:	4632      	mov	r2, r6
 80066f4:	4649      	mov	r1, r9
 80066f6:	4640      	mov	r0, r8
 80066f8:	47d0      	blx	sl
 80066fa:	3001      	adds	r0, #1
 80066fc:	d09d      	beq.n	800663a <_printf_i+0x15a>
 80066fe:	3501      	adds	r5, #1
 8006700:	68e3      	ldr	r3, [r4, #12]
 8006702:	9903      	ldr	r1, [sp, #12]
 8006704:	1a5b      	subs	r3, r3, r1
 8006706:	42ab      	cmp	r3, r5
 8006708:	dcf2      	bgt.n	80066f0 <_printf_i+0x210>
 800670a:	e7eb      	b.n	80066e4 <_printf_i+0x204>
 800670c:	2500      	movs	r5, #0
 800670e:	f104 0619 	add.w	r6, r4, #25
 8006712:	e7f5      	b.n	8006700 <_printf_i+0x220>
 8006714:	08006bb7 	.word	0x08006bb7
 8006718:	08006bc8 	.word	0x08006bc8

0800671c <__sflush_r>:
 800671c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	0716      	lsls	r6, r2, #28
 8006724:	4605      	mov	r5, r0
 8006726:	460c      	mov	r4, r1
 8006728:	d454      	bmi.n	80067d4 <__sflush_r+0xb8>
 800672a:	684b      	ldr	r3, [r1, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	dc02      	bgt.n	8006736 <__sflush_r+0x1a>
 8006730:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	dd48      	ble.n	80067c8 <__sflush_r+0xac>
 8006736:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006738:	2e00      	cmp	r6, #0
 800673a:	d045      	beq.n	80067c8 <__sflush_r+0xac>
 800673c:	2300      	movs	r3, #0
 800673e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006742:	682f      	ldr	r7, [r5, #0]
 8006744:	6a21      	ldr	r1, [r4, #32]
 8006746:	602b      	str	r3, [r5, #0]
 8006748:	d030      	beq.n	80067ac <__sflush_r+0x90>
 800674a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	0759      	lsls	r1, r3, #29
 8006750:	d505      	bpl.n	800675e <__sflush_r+0x42>
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	1ad2      	subs	r2, r2, r3
 8006756:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006758:	b10b      	cbz	r3, 800675e <__sflush_r+0x42>
 800675a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800675c:	1ad2      	subs	r2, r2, r3
 800675e:	2300      	movs	r3, #0
 8006760:	4628      	mov	r0, r5
 8006762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006764:	6a21      	ldr	r1, [r4, #32]
 8006766:	47b0      	blx	r6
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	d106      	bne.n	800677c <__sflush_r+0x60>
 800676e:	6829      	ldr	r1, [r5, #0]
 8006770:	291d      	cmp	r1, #29
 8006772:	d82b      	bhi.n	80067cc <__sflush_r+0xb0>
 8006774:	4a28      	ldr	r2, [pc, #160]	@ (8006818 <__sflush_r+0xfc>)
 8006776:	40ca      	lsrs	r2, r1
 8006778:	07d6      	lsls	r6, r2, #31
 800677a:	d527      	bpl.n	80067cc <__sflush_r+0xb0>
 800677c:	2200      	movs	r2, #0
 800677e:	6062      	str	r2, [r4, #4]
 8006780:	6922      	ldr	r2, [r4, #16]
 8006782:	04d9      	lsls	r1, r3, #19
 8006784:	6022      	str	r2, [r4, #0]
 8006786:	d504      	bpl.n	8006792 <__sflush_r+0x76>
 8006788:	1c42      	adds	r2, r0, #1
 800678a:	d101      	bne.n	8006790 <__sflush_r+0x74>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b903      	cbnz	r3, 8006792 <__sflush_r+0x76>
 8006790:	6560      	str	r0, [r4, #84]	@ 0x54
 8006792:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006794:	602f      	str	r7, [r5, #0]
 8006796:	b1b9      	cbz	r1, 80067c8 <__sflush_r+0xac>
 8006798:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800679c:	4299      	cmp	r1, r3
 800679e:	d002      	beq.n	80067a6 <__sflush_r+0x8a>
 80067a0:	4628      	mov	r0, r5
 80067a2:	f7ff fbf5 	bl	8005f90 <_free_r>
 80067a6:	2300      	movs	r3, #0
 80067a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80067aa:	e00d      	b.n	80067c8 <__sflush_r+0xac>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b0      	blx	r6
 80067b2:	4602      	mov	r2, r0
 80067b4:	1c50      	adds	r0, r2, #1
 80067b6:	d1c9      	bne.n	800674c <__sflush_r+0x30>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0c6      	beq.n	800674c <__sflush_r+0x30>
 80067be:	2b1d      	cmp	r3, #29
 80067c0:	d001      	beq.n	80067c6 <__sflush_r+0xaa>
 80067c2:	2b16      	cmp	r3, #22
 80067c4:	d11d      	bne.n	8006802 <__sflush_r+0xe6>
 80067c6:	602f      	str	r7, [r5, #0]
 80067c8:	2000      	movs	r0, #0
 80067ca:	e021      	b.n	8006810 <__sflush_r+0xf4>
 80067cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067d0:	b21b      	sxth	r3, r3
 80067d2:	e01a      	b.n	800680a <__sflush_r+0xee>
 80067d4:	690f      	ldr	r7, [r1, #16]
 80067d6:	2f00      	cmp	r7, #0
 80067d8:	d0f6      	beq.n	80067c8 <__sflush_r+0xac>
 80067da:	0793      	lsls	r3, r2, #30
 80067dc:	bf18      	it	ne
 80067de:	2300      	movne	r3, #0
 80067e0:	680e      	ldr	r6, [r1, #0]
 80067e2:	bf08      	it	eq
 80067e4:	694b      	ldreq	r3, [r1, #20]
 80067e6:	1bf6      	subs	r6, r6, r7
 80067e8:	600f      	str	r7, [r1, #0]
 80067ea:	608b      	str	r3, [r1, #8]
 80067ec:	2e00      	cmp	r6, #0
 80067ee:	ddeb      	ble.n	80067c8 <__sflush_r+0xac>
 80067f0:	4633      	mov	r3, r6
 80067f2:	463a      	mov	r2, r7
 80067f4:	4628      	mov	r0, r5
 80067f6:	6a21      	ldr	r1, [r4, #32]
 80067f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80067fc:	47e0      	blx	ip
 80067fe:	2800      	cmp	r0, #0
 8006800:	dc07      	bgt.n	8006812 <__sflush_r+0xf6>
 8006802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006812:	4407      	add	r7, r0
 8006814:	1a36      	subs	r6, r6, r0
 8006816:	e7e9      	b.n	80067ec <__sflush_r+0xd0>
 8006818:	20400001 	.word	0x20400001

0800681c <_fflush_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	690b      	ldr	r3, [r1, #16]
 8006820:	4605      	mov	r5, r0
 8006822:	460c      	mov	r4, r1
 8006824:	b913      	cbnz	r3, 800682c <_fflush_r+0x10>
 8006826:	2500      	movs	r5, #0
 8006828:	4628      	mov	r0, r5
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	b118      	cbz	r0, 8006836 <_fflush_r+0x1a>
 800682e:	6a03      	ldr	r3, [r0, #32]
 8006830:	b90b      	cbnz	r3, 8006836 <_fflush_r+0x1a>
 8006832:	f7ff faa5 	bl	8005d80 <__sinit>
 8006836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f3      	beq.n	8006826 <_fflush_r+0xa>
 800683e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006840:	07d0      	lsls	r0, r2, #31
 8006842:	d404      	bmi.n	800684e <_fflush_r+0x32>
 8006844:	0599      	lsls	r1, r3, #22
 8006846:	d402      	bmi.n	800684e <_fflush_r+0x32>
 8006848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800684a:	f7ff fb9e 	bl	8005f8a <__retarget_lock_acquire_recursive>
 800684e:	4628      	mov	r0, r5
 8006850:	4621      	mov	r1, r4
 8006852:	f7ff ff63 	bl	800671c <__sflush_r>
 8006856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006858:	4605      	mov	r5, r0
 800685a:	07da      	lsls	r2, r3, #31
 800685c:	d4e4      	bmi.n	8006828 <_fflush_r+0xc>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	059b      	lsls	r3, r3, #22
 8006862:	d4e1      	bmi.n	8006828 <_fflush_r+0xc>
 8006864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006866:	f7ff fb91 	bl	8005f8c <__retarget_lock_release_recursive>
 800686a:	e7dd      	b.n	8006828 <_fflush_r+0xc>

0800686c <__swbuf_r>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	460e      	mov	r6, r1
 8006870:	4614      	mov	r4, r2
 8006872:	4605      	mov	r5, r0
 8006874:	b118      	cbz	r0, 800687e <__swbuf_r+0x12>
 8006876:	6a03      	ldr	r3, [r0, #32]
 8006878:	b90b      	cbnz	r3, 800687e <__swbuf_r+0x12>
 800687a:	f7ff fa81 	bl	8005d80 <__sinit>
 800687e:	69a3      	ldr	r3, [r4, #24]
 8006880:	60a3      	str	r3, [r4, #8]
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	071a      	lsls	r2, r3, #28
 8006886:	d501      	bpl.n	800688c <__swbuf_r+0x20>
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	b943      	cbnz	r3, 800689e <__swbuf_r+0x32>
 800688c:	4621      	mov	r1, r4
 800688e:	4628      	mov	r0, r5
 8006890:	f000 f82a 	bl	80068e8 <__swsetup_r>
 8006894:	b118      	cbz	r0, 800689e <__swbuf_r+0x32>
 8006896:	f04f 37ff 	mov.w	r7, #4294967295
 800689a:	4638      	mov	r0, r7
 800689c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	6922      	ldr	r2, [r4, #16]
 80068a2:	b2f6      	uxtb	r6, r6
 80068a4:	1a98      	subs	r0, r3, r2
 80068a6:	6963      	ldr	r3, [r4, #20]
 80068a8:	4637      	mov	r7, r6
 80068aa:	4283      	cmp	r3, r0
 80068ac:	dc05      	bgt.n	80068ba <__swbuf_r+0x4e>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f7ff ffb3 	bl	800681c <_fflush_r>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d1ed      	bne.n	8006896 <__swbuf_r+0x2a>
 80068ba:	68a3      	ldr	r3, [r4, #8]
 80068bc:	3b01      	subs	r3, #1
 80068be:	60a3      	str	r3, [r4, #8]
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	6022      	str	r2, [r4, #0]
 80068c6:	701e      	strb	r6, [r3, #0]
 80068c8:	6962      	ldr	r2, [r4, #20]
 80068ca:	1c43      	adds	r3, r0, #1
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d004      	beq.n	80068da <__swbuf_r+0x6e>
 80068d0:	89a3      	ldrh	r3, [r4, #12]
 80068d2:	07db      	lsls	r3, r3, #31
 80068d4:	d5e1      	bpl.n	800689a <__swbuf_r+0x2e>
 80068d6:	2e0a      	cmp	r6, #10
 80068d8:	d1df      	bne.n	800689a <__swbuf_r+0x2e>
 80068da:	4621      	mov	r1, r4
 80068dc:	4628      	mov	r0, r5
 80068de:	f7ff ff9d 	bl	800681c <_fflush_r>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d0d9      	beq.n	800689a <__swbuf_r+0x2e>
 80068e6:	e7d6      	b.n	8006896 <__swbuf_r+0x2a>

080068e8 <__swsetup_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4b29      	ldr	r3, [pc, #164]	@ (8006990 <__swsetup_r+0xa8>)
 80068ec:	4605      	mov	r5, r0
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	460c      	mov	r4, r1
 80068f2:	b118      	cbz	r0, 80068fc <__swsetup_r+0x14>
 80068f4:	6a03      	ldr	r3, [r0, #32]
 80068f6:	b90b      	cbnz	r3, 80068fc <__swsetup_r+0x14>
 80068f8:	f7ff fa42 	bl	8005d80 <__sinit>
 80068fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006900:	0719      	lsls	r1, r3, #28
 8006902:	d422      	bmi.n	800694a <__swsetup_r+0x62>
 8006904:	06da      	lsls	r2, r3, #27
 8006906:	d407      	bmi.n	8006918 <__swsetup_r+0x30>
 8006908:	2209      	movs	r2, #9
 800690a:	602a      	str	r2, [r5, #0]
 800690c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	81a3      	strh	r3, [r4, #12]
 8006916:	e033      	b.n	8006980 <__swsetup_r+0x98>
 8006918:	0758      	lsls	r0, r3, #29
 800691a:	d512      	bpl.n	8006942 <__swsetup_r+0x5a>
 800691c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800691e:	b141      	cbz	r1, 8006932 <__swsetup_r+0x4a>
 8006920:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006924:	4299      	cmp	r1, r3
 8006926:	d002      	beq.n	800692e <__swsetup_r+0x46>
 8006928:	4628      	mov	r0, r5
 800692a:	f7ff fb31 	bl	8005f90 <_free_r>
 800692e:	2300      	movs	r3, #0
 8006930:	6363      	str	r3, [r4, #52]	@ 0x34
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	2300      	movs	r3, #0
 800693c:	6063      	str	r3, [r4, #4]
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	f043 0308 	orr.w	r3, r3, #8
 8006948:	81a3      	strh	r3, [r4, #12]
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	b94b      	cbnz	r3, 8006962 <__swsetup_r+0x7a>
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006958:	d003      	beq.n	8006962 <__swsetup_r+0x7a>
 800695a:	4621      	mov	r1, r4
 800695c:	4628      	mov	r0, r5
 800695e:	f000 f85c 	bl	8006a1a <__smakebuf_r>
 8006962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006966:	f013 0201 	ands.w	r2, r3, #1
 800696a:	d00a      	beq.n	8006982 <__swsetup_r+0x9a>
 800696c:	2200      	movs	r2, #0
 800696e:	60a2      	str	r2, [r4, #8]
 8006970:	6962      	ldr	r2, [r4, #20]
 8006972:	4252      	negs	r2, r2
 8006974:	61a2      	str	r2, [r4, #24]
 8006976:	6922      	ldr	r2, [r4, #16]
 8006978:	b942      	cbnz	r2, 800698c <__swsetup_r+0xa4>
 800697a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800697e:	d1c5      	bne.n	800690c <__swsetup_r+0x24>
 8006980:	bd38      	pop	{r3, r4, r5, pc}
 8006982:	0799      	lsls	r1, r3, #30
 8006984:	bf58      	it	pl
 8006986:	6962      	ldrpl	r2, [r4, #20]
 8006988:	60a2      	str	r2, [r4, #8]
 800698a:	e7f4      	b.n	8006976 <__swsetup_r+0x8e>
 800698c:	2000      	movs	r0, #0
 800698e:	e7f7      	b.n	8006980 <__swsetup_r+0x98>
 8006990:	20000020 	.word	0x20000020

08006994 <_sbrk_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	2300      	movs	r3, #0
 8006998:	4d05      	ldr	r5, [pc, #20]	@ (80069b0 <_sbrk_r+0x1c>)
 800699a:	4604      	mov	r4, r0
 800699c:	4608      	mov	r0, r1
 800699e:	602b      	str	r3, [r5, #0]
 80069a0:	f7fa fd8c 	bl	80014bc <_sbrk>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d102      	bne.n	80069ae <_sbrk_r+0x1a>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	b103      	cbz	r3, 80069ae <_sbrk_r+0x1a>
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	20000394 	.word	0x20000394

080069b4 <memchr>:
 80069b4:	4603      	mov	r3, r0
 80069b6:	b510      	push	{r4, lr}
 80069b8:	b2c9      	uxtb	r1, r1
 80069ba:	4402      	add	r2, r0
 80069bc:	4293      	cmp	r3, r2
 80069be:	4618      	mov	r0, r3
 80069c0:	d101      	bne.n	80069c6 <memchr+0x12>
 80069c2:	2000      	movs	r0, #0
 80069c4:	e003      	b.n	80069ce <memchr+0x1a>
 80069c6:	7804      	ldrb	r4, [r0, #0]
 80069c8:	3301      	adds	r3, #1
 80069ca:	428c      	cmp	r4, r1
 80069cc:	d1f6      	bne.n	80069bc <memchr+0x8>
 80069ce:	bd10      	pop	{r4, pc}

080069d0 <__swhatbuf_r>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	460c      	mov	r4, r1
 80069d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d8:	4615      	mov	r5, r2
 80069da:	2900      	cmp	r1, #0
 80069dc:	461e      	mov	r6, r3
 80069de:	b096      	sub	sp, #88	@ 0x58
 80069e0:	da0c      	bge.n	80069fc <__swhatbuf_r+0x2c>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	2100      	movs	r1, #0
 80069e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069ea:	bf14      	ite	ne
 80069ec:	2340      	movne	r3, #64	@ 0x40
 80069ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069f2:	2000      	movs	r0, #0
 80069f4:	6031      	str	r1, [r6, #0]
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	b016      	add	sp, #88	@ 0x58
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	466a      	mov	r2, sp
 80069fe:	f000 f849 	bl	8006a94 <_fstat_r>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	dbed      	blt.n	80069e2 <__swhatbuf_r+0x12>
 8006a06:	9901      	ldr	r1, [sp, #4]
 8006a08:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a0c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a10:	4259      	negs	r1, r3
 8006a12:	4159      	adcs	r1, r3
 8006a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a18:	e7eb      	b.n	80069f2 <__swhatbuf_r+0x22>

08006a1a <__smakebuf_r>:
 8006a1a:	898b      	ldrh	r3, [r1, #12]
 8006a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a1e:	079d      	lsls	r5, r3, #30
 8006a20:	4606      	mov	r6, r0
 8006a22:	460c      	mov	r4, r1
 8006a24:	d507      	bpl.n	8006a36 <__smakebuf_r+0x1c>
 8006a26:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	2301      	movs	r3, #1
 8006a30:	6163      	str	r3, [r4, #20]
 8006a32:	b003      	add	sp, #12
 8006a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a36:	466a      	mov	r2, sp
 8006a38:	ab01      	add	r3, sp, #4
 8006a3a:	f7ff ffc9 	bl	80069d0 <__swhatbuf_r>
 8006a3e:	9f00      	ldr	r7, [sp, #0]
 8006a40:	4605      	mov	r5, r0
 8006a42:	4639      	mov	r1, r7
 8006a44:	4630      	mov	r0, r6
 8006a46:	f7ff fb0d 	bl	8006064 <_malloc_r>
 8006a4a:	b948      	cbnz	r0, 8006a60 <__smakebuf_r+0x46>
 8006a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a50:	059a      	lsls	r2, r3, #22
 8006a52:	d4ee      	bmi.n	8006a32 <__smakebuf_r+0x18>
 8006a54:	f023 0303 	bic.w	r3, r3, #3
 8006a58:	f043 0302 	orr.w	r3, r3, #2
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	e7e2      	b.n	8006a26 <__smakebuf_r+0xc>
 8006a60:	89a3      	ldrh	r3, [r4, #12]
 8006a62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a6a:	81a3      	strh	r3, [r4, #12]
 8006a6c:	9b01      	ldr	r3, [sp, #4]
 8006a6e:	6020      	str	r0, [r4, #0]
 8006a70:	b15b      	cbz	r3, 8006a8a <__smakebuf_r+0x70>
 8006a72:	4630      	mov	r0, r6
 8006a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a78:	f000 f81e 	bl	8006ab8 <_isatty_r>
 8006a7c:	b128      	cbz	r0, 8006a8a <__smakebuf_r+0x70>
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f023 0303 	bic.w	r3, r3, #3
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	431d      	orrs	r5, r3
 8006a8e:	81a5      	strh	r5, [r4, #12]
 8006a90:	e7cf      	b.n	8006a32 <__smakebuf_r+0x18>
	...

08006a94 <_fstat_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	2300      	movs	r3, #0
 8006a98:	4d06      	ldr	r5, [pc, #24]	@ (8006ab4 <_fstat_r+0x20>)
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	f7fa fce5 	bl	8001470 <_fstat>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	d102      	bne.n	8006ab0 <_fstat_r+0x1c>
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	b103      	cbz	r3, 8006ab0 <_fstat_r+0x1c>
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20000394 	.word	0x20000394

08006ab8 <_isatty_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	2300      	movs	r3, #0
 8006abc:	4d05      	ldr	r5, [pc, #20]	@ (8006ad4 <_isatty_r+0x1c>)
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	f7fa fce3 	bl	800148e <_isatty>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_isatty_r+0x1a>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_isatty_r+0x1a>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	20000394 	.word	0x20000394

08006ad8 <_init>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr

08006ae4 <_fini>:
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	bf00      	nop
 8006ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aea:	bc08      	pop	{r3}
 8006aec:	469e      	mov	lr, r3
 8006aee:	4770      	bx	lr
