
Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006b18  08006b18  00007b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c1c  08006c1c  00008074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006c1c  08006c1c  00008074  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006c1c  08006c1c  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c1c  08006c1c  00007c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c20  08006c20  00007c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006c24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000074  08006c98  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08006c98  000083a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c02  00000000  00000000  0000809d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d7  00000000  00000000  0001ac9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0001e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecc  00000000  00000000  0001f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac07  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a1b  00000000  00000000  0003af83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d34  00000000  00000000  0005199e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e56d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d8  00000000  00000000  000e5718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000eacf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b00 	.word	0x08006b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08006b00 	.word	0x08006b00

0800014c <csn_high>:
uint8_t nrf24_get_status(void)
{
    return nrf24_r_reg(STATUS, 1);  // ★ 'STATUS' 사용 (NRF_STATUS 아님)
}

void csn_high(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000156:	4802      	ldr	r0, [pc, #8]	@ (8000160 <csn_high+0x14>)
 8000158:	f003 f81e 	bl	8003198 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 시작 표시
	   // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40011000 	.word	0x40011000

08000164 <csn_low>:



void csn_low(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800016e:	4802      	ldr	r0, [pc, #8]	@ (8000178 <csn_low+0x14>)
 8000170:	f003 f812 	bl	8003198 <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 종료 표시
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40011000 	.word	0x40011000

0800017c <ce_high>:

void ce_high(void){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000186:	4802      	ldr	r0, [pc, #8]	@ (8000190 <ce_high+0x14>)
 8000188:	f003 f806 	bl	8003198 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <ce_low>:

void ce_low(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019e:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <ce_low+0x14>)
 80001a0:	f002 fffa 	bl	8003198 <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	6039      	str	r1, [r7, #0]
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001c6:	f7ff ffcd 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001ca:	f107 010f 	add.w	r1, r7, #15
 80001ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d2:	2201      	movs	r2, #1
 80001d4:	4808      	ldr	r0, [pc, #32]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001d6:	f003 fdf7 	bl	8003dc8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	b29a      	uxth	r2, r3
 80001de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e2:	6839      	ldr	r1, [r7, #0]
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001e6:	f003 fdef 	bl	8003dc8 <HAL_SPI_Transmit>

	csn_high();
 80001ea:	f7ff ffaf 	bl	800014c <csn_high>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000110 	.word	0x20000110

080001fc <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	4613      	mov	r3, r2
 800020a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000214:	f7ff ffa6 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000218:	f107 010f 	add.w	r1, r7, #15
 800021c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000220:	2201      	movs	r2, #1
 8000222:	4809      	ldr	r0, [pc, #36]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000224:	f003 fdd0 	bl	8003dc8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000228:	79bb      	ldrb	r3, [r7, #6]
 800022a:	b29a      	uxth	r2, r3
 800022c:	f107 010e 	add.w	r1, r7, #14
 8000230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000234:	4804      	ldr	r0, [pc, #16]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000236:	f003 ff0b 	bl	8004050 <HAL_SPI_Receive>

	csn_high();
 800023a:	f7ff ff87 	bl	800014c <csn_high>

	return data;
 800023e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000110 	.word	0x20000110

0800024c <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000256:	1df9      	adds	r1, r7, #7
 8000258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800025c:	2201      	movs	r2, #1
 800025e:	4803      	ldr	r0, [pc, #12]	@ (800026c <nrf24_w_spec_cmd+0x20>)
 8000260:	f003 fdb2 	bl	8003dc8 <HAL_SPI_Transmit>
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000110 	.word	0x20000110

08000270 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800027a:	2101      	movs	r1, #1
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ffbd 	bl	80001fc <nrf24_r_reg>
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f043 0302 	orr.w	r3, r3, #2
 800028c:	b2db      	uxtb	r3, r3
 800028e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	2201      	movs	r2, #1
 8000294:	4619      	mov	r1, r3
 8000296:	2000      	movs	r0, #0
 8000298:	f7ff ff88 	bl	80001ac <nrf24_w_reg>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <nrf24_pwr_dwn>:

void nrf24_pwr_dwn(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80002ae:	2101      	movs	r1, #1
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ffa3 	bl	80001fc <nrf24_r_reg>
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PWR_UP);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f023 0302 	bic.w	r3, r3, #2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	2201      	movs	r2, #1
 80002c8:	4619      	mov	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f7ff ff6e 	bl	80001ac <nrf24_w_reg>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <nrf24_tx_pwr>:

void nrf24_tx_pwr(uint8_t pwr){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80002e6:	2101      	movs	r1, #1
 80002e8:	2006      	movs	r0, #6
 80002ea:	f7ff ff87 	bl	80001fc <nrf24_r_reg>
 80002ee:	4603      	mov	r3, r0
 80002f0:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	b25a      	sxtb	r2, r3
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	b25b      	sxtb	r3, r3
 8000308:	4313      	orrs	r3, r2
 800030a:	b25b      	sxtb	r3, r3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000310:	f107 030f 	add.w	r3, r7, #15
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	2006      	movs	r0, #6
 800031a:	f7ff ff47 	bl	80001ac <nrf24_w_reg>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	4603      	mov	r3, r0
 800032e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000334:	2101      	movs	r1, #1
 8000336:	2006      	movs	r0, #6
 8000338:	f7ff ff60 	bl	80001fc <nrf24_r_reg>
 800033c:	4603      	mov	r3, r0
 800033e:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000346:	b2db      	uxtb	r3, r3
 8000348:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d105      	bne.n	800035c <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	b2db      	uxtb	r3, r3
 8000358:	73fb      	strb	r3, [r7, #15]
 800035a:	e007      	b.n	800036c <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d104      	bne.n	800036c <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f043 0320 	orr.w	r3, r3, #32
 8000368:	b2db      	uxtb	r3, r3
 800036a:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 800036c:	f107 030f 	add.w	r3, r7, #15
 8000370:	2201      	movs	r2, #1
 8000372:	4619      	mov	r1, r3
 8000374:	2006      	movs	r0, #6
 8000376:	f7ff ff19 	bl	80001ac <nrf24_w_reg>
}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000382:	b580      	push	{r7, lr}
 8000384:	b082      	sub	sp, #8
 8000386:	af00      	add	r7, sp, #0
 8000388:	4603      	mov	r3, r0
 800038a:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	2005      	movs	r0, #5
 8000394:	f7ff ff0a 	bl	80001ac <nrf24_w_reg>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 80003a8:	2205      	movs	r2, #5
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	2010      	movs	r0, #16
 80003ae:	f7ff fefd 	bl	80001ac <nrf24_w_reg>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	460a      	mov	r2, r1
 80003c6:	71fb      	strb	r3, [r7, #7]
 80003c8:	4613      	mov	r3, r2
 80003ca:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	2b20      	cmp	r3, #32
 80003d0:	d901      	bls.n	80003d6 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 80003d2:	2320      	movs	r3, #32
 80003d4:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b05      	cmp	r3, #5
 80003da:	d839      	bhi.n	8000450 <nrf24_pipe_pld_size+0x94>
 80003dc:	a201      	add	r2, pc, #4	@ (adr r2, 80003e4 <nrf24_pipe_pld_size+0x28>)
 80003de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e2:	bf00      	nop
 80003e4:	080003fd 	.word	0x080003fd
 80003e8:	0800040b 	.word	0x0800040b
 80003ec:	08000419 	.word	0x08000419
 80003f0:	08000427 	.word	0x08000427
 80003f4:	08000435 	.word	0x08000435
 80003f8:	08000443 	.word	0x08000443
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 80003fc:	1dbb      	adds	r3, r7, #6
 80003fe:	2201      	movs	r2, #1
 8000400:	4619      	mov	r1, r3
 8000402:	2011      	movs	r0, #17
 8000404:	f7ff fed2 	bl	80001ac <nrf24_w_reg>

		break;
 8000408:	e022      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800040a:	1dbb      	adds	r3, r7, #6
 800040c:	2201      	movs	r2, #1
 800040e:	4619      	mov	r1, r3
 8000410:	2012      	movs	r0, #18
 8000412:	f7ff fecb 	bl	80001ac <nrf24_w_reg>

		break;
 8000416:	e01b      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 8000418:	1dbb      	adds	r3, r7, #6
 800041a:	2201      	movs	r2, #1
 800041c:	4619      	mov	r1, r3
 800041e:	2013      	movs	r0, #19
 8000420:	f7ff fec4 	bl	80001ac <nrf24_w_reg>

		break;
 8000424:	e014      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	2014      	movs	r0, #20
 800042e:	f7ff febd 	bl	80001ac <nrf24_w_reg>

		break;
 8000432:	e00d      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000434:	1dbb      	adds	r3, r7, #6
 8000436:	2201      	movs	r2, #1
 8000438:	4619      	mov	r1, r3
 800043a:	2015      	movs	r0, #21
 800043c:	f7ff feb6 	bl	80001ac <nrf24_w_reg>

		break;
 8000440:	e006      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	2201      	movs	r2, #1
 8000446:	4619      	mov	r1, r3
 8000448:	2016      	movs	r0, #22
 800044a:	f7ff feaf 	bl	80001ac <nrf24_w_reg>

		break;
 800044e:	bf00      	nop
	}
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <nrf24_cls_rx_pipe>:
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_cls_rx_pipe(uint8_t pipe){
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(EN_RXADDR, 1);
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fec9 	bl	80001fc <nrf24_r_reg>
 800046a:	4603      	mov	r3, r0
 800046c:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << pipe);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2201      	movs	r2, #1
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	b25b      	sxtb	r3, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	b25a      	sxtb	r2, r3
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	b25b      	sxtb	r3, r3
 8000480:	4013      	ands	r3, r2
 8000482:	b25b      	sxtb	r3, r3
 8000484:	b2db      	uxtb	r3, r3
 8000486:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000488:	f107 030f 	add.w	r3, r7, #15
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	2002      	movs	r0, #2
 8000492:	f7ff fe8b 	bl	80001ac <nrf24_w_reg>
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <nrf24_set_crc>:

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 800049e:	b580      	push	{r7, lr}
 80004a0:	b084      	sub	sp, #16
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	460a      	mov	r2, r1
 80004a8:	71fb      	strb	r3, [r7, #7]
 80004aa:	4613      	mov	r3, r2
 80004ac:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80004ae:	2101      	movs	r1, #1
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fea3 	bl	80001fc <nrf24_r_reg>
 80004b6:	4603      	mov	r3, r0
 80004b8:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	f023 030c 	bic.w	r3, r3, #12
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	4313      	orrs	r3, r2
 80004de:	b25b      	sxtb	r3, r3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80004e4:	f107 030f 	add.w	r3, r7, #15
 80004e8:	2201      	movs	r2, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fe5d 	bl	80001ac <nrf24_w_reg>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4603      	mov	r3, r0
 8000502:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	3b02      	subs	r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	2003      	movs	r0, #3
 8000514:	f7ff fe4a 	bl	80001ac <nrf24_w_reg>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	csn_low();
 8000524:	f7ff fe1e 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000528:	20e1      	movs	r0, #225	@ 0xe1
 800052a:	f7ff fe8f 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 800052e:	f7ff fe0d 	bl	800014c <csn_high>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}

08000536 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
	csn_low();
 800053a:	f7ff fe13 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 800053e:	20e2      	movs	r0, #226	@ 0xe2
 8000540:	f7ff fe84 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 8000544:	f7ff fe02 	bl	800014c <csn_high>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8000556:	23ff      	movs	r3, #255	@ 0xff
 8000558:	71bb      	strb	r3, [r7, #6]

	csn_low();
 800055a:	f7ff fe03 	bl	8000164 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 800055e:	1dfa      	adds	r2, r7, #7
 8000560:	1db9      	adds	r1, r7, #6
 8000562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2301      	movs	r3, #1
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <nrf24_r_status+0x34>)
 800056c:	f003 fe89 	bl	8004282 <HAL_SPI_TransmitReceive>
	csn_high();
 8000570:	f7ff fdec 	bl	800014c <csn_high>

	return data;
 8000574:	79fb      	ldrb	r3, [r7, #7]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000110 	.word	0x20000110

08000584 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800058e:	f7ff ffdd 	bl	800054c <nrf24_r_status>
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800059c:	b2db      	uxtb	r3, r3
 800059e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	2007      	movs	r0, #7
 80005a8:	f7ff fe00 	bl	80001ac <nrf24_w_reg>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005be:	f7ff ffc5 	bl	800054c <nrf24_r_status>
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	2007      	movs	r0, #7
 80005d8:	f7ff fde8 	bl	80001ac <nrf24_w_reg>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005ee:	f7ff ffad 	bl	800054c <nrf24_r_status>
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f043 0310 	orr.w	r3, r3, #16
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	2007      	movs	r0, #7
 8000608:	f7ff fdd0 	bl	80001ac <nrf24_w_reg>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800061e:	2101      	movs	r1, #1
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fdeb 	bl	80001fc <nrf24_r_reg>
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fdb6 	bl	80001ac <nrf24_w_reg>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000652:	2101      	movs	r1, #1
 8000654:	201d      	movs	r0, #29
 8000656:	f7ff fdd1 	bl	80001fc <nrf24_r_reg>
 800065a:	4603      	mov	r3, r0
 800065c:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d105      	bne.n	8000670 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e004      	b.n	800067a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	f023 0304 	bic.w	r3, r3, #4
 8000676:	b2db      	uxtb	r3, r3
 8000678:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800067a:	f107 030f 	add.w	r3, r7, #15
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	201d      	movs	r0, #29
 8000684:	f7ff fd92 	bl	80001ac <nrf24_w_reg>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 80006a0:	2101      	movs	r1, #1
 80006a2:	201c      	movs	r0, #28
 80006a4:	f7ff fdaa 	bl	80001fc <nrf24_r_reg>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d901      	bls.n	80006b6 <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 80006b2:	2305      	movs	r3, #5
 80006b4:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00b      	beq.n	80006d4 <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2201      	movs	r2, #1
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	e00c      	b.n	80006ee <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2201      	movs	r2, #1
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	4013      	ands	r3, r2
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 80006ee:	f107 030f 	add.w	r3, r7, #15
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	201c      	movs	r0, #28
 80006f8:	f7ff fd58 	bl	80001ac <nrf24_w_reg>
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <nrf24_auto_ack>:

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d901      	bls.n	800071e <nrf24_auto_ack+0x1a>
		pipe = 5;
 800071a:	2305      	movs	r3, #5
 800071c:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800071e:	2101      	movs	r1, #1
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff fd6b 	bl	80001fc <nrf24_r_reg>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00b      	beq.n	8000748 <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2201      	movs	r2, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	b25a      	sxtb	r2, r3
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	b25b      	sxtb	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b25b      	sxtb	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e00c      	b.n	8000762 <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2201      	movs	r2, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	b25b      	sxtb	r3, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	b25a      	sxtb	r2, r3
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	b25b      	sxtb	r3, r3
 800075a:	4013      	ands	r3, r2
 800075c:	b25b      	sxtb	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000762:	f107 030f 	add.w	r3, r7, #15
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fd1e 	bl	80001ac <nrf24_w_reg>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <nrf24_auto_ack_all>:

void nrf24_auto_ack_all(uint8_t ack){
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000782:	2101      	movs	r1, #1
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff fd39 	bl	80001fc <nrf24_r_reg>
 800078a:	4603      	mov	r3, r0
 800078c:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <nrf24_auto_ack_all+0x22>
		enaa = 63;
 8000794:	233f      	movs	r3, #63	@ 0x3f
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e001      	b.n	800079e <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 800079e:	f107 030f 	add.w	r3, r7, #15
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fd00 	bl	80001ac <nrf24_w_reg>
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80007be:	2101      	movs	r1, #1
 80007c0:	201d      	movs	r0, #29
 80007c2:	f7ff fd1b 	bl	80001fc <nrf24_r_reg>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73fb      	strb	r3, [r7, #15]

	if(en){
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e004      	b.n	80007e6 <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f023 0302 	bic.w	r3, r3, #2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80007e6:	f107 030f 	add.w	r3, r7, #15
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	201d      	movs	r0, #29
 80007f0:	f7ff fcdc 	bl	80001ac <nrf24_w_reg>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000806:	2101      	movs	r1, #1
 8000808:	201d      	movs	r0, #29
 800080a:	f7ff fcf7 	bl	80001fc <nrf24_r_reg>
 800080e:	4603      	mov	r3, r0
 8000810:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e004      	b.n	800082e <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f023 0301 	bic.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800082e:	f107 030f 	add.w	r3, r7, #15
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	201d      	movs	r0, #29
 8000838:	f7ff fcb8 	bl	80001ac <nrf24_w_reg>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <nrf24_auto_retr_delay>:

void nrf24_auto_retr_delay(uint8_t delay){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 800084e:	2101      	movs	r1, #1
 8000850:	2004      	movs	r0, #4
 8000852:	f7ff fcd3 	bl	80001fc <nrf24_r_reg>
 8000856:	4603      	mov	r3, r0
 8000858:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	f003 030f 	and.w	r3, r3, #15
 8000860:	b2db      	uxtb	r3, r3
 8000862:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	b25a      	sxtb	r2, r3
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	b25b      	sxtb	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8000878:	f107 030f 	add.w	r3, r7, #15
 800087c:	2201      	movs	r2, #1
 800087e:	4619      	mov	r1, r3
 8000880:	2004      	movs	r0, #4
 8000882:	f7ff fc93 	bl	80001ac <nrf24_w_reg>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000898:	2101      	movs	r1, #1
 800089a:	2004      	movs	r0, #4
 800089c:	f7ff fcae 	bl	80001fc <nrf24_r_reg>
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	f023 030f 	bic.w	r3, r3, #15
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80008b8:	f107 030f 	add.w	r3, r7, #15
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	2004      	movs	r0, #4
 80008c2:	f7ff fc73 	bl	80001ac <nrf24_w_reg>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]

	ce_low();
 80008dc:	f7ff fc5a 	bl	8000194 <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 80008e0:	23a0      	movs	r3, #160	@ 0xa0
 80008e2:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80008e4:	f7ff fc3e 	bl	8000164 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80008e8:	f107 010f 	add.w	r1, r7, #15
 80008ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f0:	2201      	movs	r2, #1
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <nrf24_transmit+0x70>)
 80008f4:	f003 fa68 	bl	8003dc8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	480f      	ldr	r0, [pc, #60]	@ (8000940 <nrf24_transmit+0x70>)
 8000904:	f003 fa60 	bl	8003dc8 <HAL_SPI_Transmit>
	csn_high();
 8000908:	f7ff fc20 	bl	800014c <csn_high>

	ce_high();
 800090c:	f7ff fc36 	bl	800017c <ce_high>
	HAL_Delay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f001 f963 	bl	8001bdc <HAL_Delay>
	ce_low();
 8000916:	f7ff fc3d 	bl	8000194 <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 800091a:	f7ff fe17 	bl	800054c <nrf24_r_status>
 800091e:	4603      	mov	r3, r0
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 8000928:	f7ff fe5c 	bl	80005e4 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 800092c:	f7ff fdf8 	bl	8000520 <nrf24_flush_tx>
		return 1;
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <nrf24_transmit+0x66>
	}

	return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000110 	.word	0x20000110

08000944 <nrf24_defaults>:
	csn_high();

	nrf24_clear_rx_dr();
}

void nrf24_defaults(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	ce_low();
 800094a:	f7ff fc23 	bl	8000194 <ce_low>

	nrf24_pwr_dwn();
 800094e:	f7ff fca9 	bl	80002a4 <nrf24_pwr_dwn>
	nrf24_tx_pwr(3);
 8000952:	2003      	movs	r0, #3
 8000954:	f7ff fcc0 	bl	80002d8 <nrf24_tx_pwr>
	nrf24_data_rate(_1mbps);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fce4 	bl	8000326 <nrf24_data_rate>
	nrf24_set_channel(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff fd0f 	bl	8000382 <nrf24_set_channel>
	nrf24_set_crc(no_crc, _1byte);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fd99 	bl	800049e <nrf24_set_crc>
	nrf24_set_addr_width(5);
 800096c:	2005      	movs	r0, #5
 800096e:	f7ff fdc4 	bl	80004fa <nrf24_set_addr_width>
	nrf24_flush_tx();
 8000972:	f7ff fdd5 	bl	8000520 <nrf24_flush_tx>
	nrf24_flush_rx();
 8000976:	f7ff fdde 	bl	8000536 <nrf24_flush_rx>
	nrf24_clear_rx_dr();
 800097a:	f7ff fe03 	bl	8000584 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 800097e:	f7ff fe19 	bl	80005b4 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000982:	f7ff fe2f 	bl	80005e4 <nrf24_clear_max_rt>
	nrf24_stop_listen();
 8000986:	f7ff fe45 	bl	8000614 <nrf24_stop_listen>
	nrf24_dpl(disable);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe5c 	bl	8000648 <nrf24_dpl>
	nrf24_en_ack_pld(disable);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ff0f 	bl	80007b4 <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff30 	bl	80007fc <nrf24_en_dyn_ack>
	nrf24_auto_retr_delay(0);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ff51 	bl	8000844 <nrf24_auto_retr_delay>
	nrf24_auto_retr_limit(3);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f7ff ff73 	bl	800088e <nrf24_auto_retr_limit>


	for(uint8_t i = 0; i < 5; i++){
 80009a8:	2300      	movs	r3, #0
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	e015      	b.n	80009da <nrf24_defaults+0x96>
		nrf24_pipe_pld_size(i, 0);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd02 	bl	80003bc <nrf24_pipe_pld_size>
		nrf24_cls_rx_pipe(i);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fd4c 	bl	8000458 <nrf24_cls_rx_pipe>
		nrf24_set_rx_dpl(i, disable);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe63 	bl	8000690 <nrf24_set_rx_dpl>
		nrf24_auto_ack(i, enable);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe98 	bl	8000704 <nrf24_auto_ack>
	for(uint8_t i = 0; i < 5; i++){
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	3301      	adds	r3, #1
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d9e6      	bls.n	80009ae <nrf24_defaults+0x6a>
	}

	ce_high();
 80009e0:	f7ff fbcc 	bl	800017c <ce_high>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <nrf24_init>:

void nrf24_init(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80009f0:	f7ff fc3e 	bl	8000270 <nrf24_pwr_up>

	nrf24_flush_tx();
 80009f4:	f7ff fd94 	bl	8000520 <nrf24_flush_tx>
	nrf24_flush_rx();
 80009f8:	f7ff fd9d 	bl	8000536 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80009fc:	f7ff fdc2 	bl	8000584 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8000a00:	f7ff fdd8 	bl	80005b4 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000a04:	f7ff fdee 	bl	80005e4 <nrf24_clear_max_rt>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a1e:	4a28      	ldr	r2, [pc, #160]	@ (8000ac0 <MX_ADC1_Init+0xb4>)
 8000a20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a38:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4a:	481c      	ldr	r0, [pc, #112]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a4c:	f001 f8ea 	bl	8001c24 <HAL_ADC_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000a56:	f000 fbcf 	bl	80011f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a62:	2307      	movs	r3, #7
 8000a64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4814      	ldr	r0, [pc, #80]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a6c:	f001 fbae 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 fbbf 	bl	80011f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a88:	f001 fba0 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a92:	f000 fbb1 	bl	80011f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a96:	230c      	movs	r3, #12
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000aa4:	f001 fb92 	bl	80021cc <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000aae:	f000 fba3 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000090 	.word	0x20000090
 8000ac0:	40012400 	.word	0x40012400

08000ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d151      	bne.n	8000b88 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a24      	ldr	r2, [pc, #144]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = X_axis_Pin|Y_axis_Pin|Z_axis_Pin;
 8000b14:	2307      	movs	r3, #7
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	481d      	ldr	r0, [pc, #116]	@ (8000b98 <HAL_ADC_MspInit+0xd4>)
 8000b24:	f002 f9b4 	bl	8002e90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b52:	2220      	movs	r2, #32
 8000b54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b5c:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b5e:	f001 fef5 	bl	800294c <HAL_DMA_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000b68:	f000 fb46 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b70:	621a      	str	r2, [r3, #32]
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f001 feae 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b82:	2012      	movs	r0, #18
 8000b84:	f001 fec7 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40012400 	.word	0x40012400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	200000c0 	.word	0x200000c0
 8000ba0:	40020008 	.word	0x40020008

08000ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200b      	movs	r0, #11
 8000bc8:	f001 fe89 	bl	80028de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bcc:	200b      	movs	r0, #11
 8000bce:	f001 fea2 	bl	8002916 <HAL_NVIC_EnableIRQ>

}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0c:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a27      	ldr	r2, [pc, #156]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c12:	f043 0320 	orr.w	r3, r3, #32
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_Pin_GPIO_Port, CSN_Pin_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5a:	4816      	ldr	r0, [pc, #88]	@ (8000cb4 <MX_GPIO_Init+0xd4>)
 8000c5c:	f002 fa9c 	bl	8003198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_Pin_GPIO_Port, CE_Pin_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c66:	4814      	ldr	r0, [pc, #80]	@ (8000cb8 <MX_GPIO_Init+0xd8>)
 8000c68:	f002 fa96 	bl	8003198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CSN_Pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin;
 8000c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	@ (8000cb4 <MX_GPIO_Init+0xd4>)
 8000c86:	f002 f903 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin_Pin */
  GPIO_InitStruct.Pin = CE_Pin_Pin;
 8000c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_GPIO_Init+0xd8>)
 8000ca4:	f002 f8f4 	bl	8002e90 <HAL_GPIO_Init>

}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40010800 	.word	0x40010800

08000cbc <nrf24_set_payload_size>:
 * Receive data
 */
void nrf24_receive(uint8_t *data, uint8_t size);

static inline void nrf24_set_payload_size(uint8_t size)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
    nrf24_pipe_pld_size(0, size);   // 파이프 0만 사용
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fb76 	bl	80003bc <nrf24_pipe_pld_size>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <iabs_int>:


void nrf24_transmitter_setup(void);
void transmit_sensor_data(void);
static void transmit_triplet(uint16_t x, uint16_t y, uint16_t z);
static inline int  iabs_int(int v) { return v>=0? v : -v; }
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfb8      	it	lt
 8000ce6:	425b      	neglt	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <joystick_is_active>:
static inline bool joystick_is_active(int x,int y,int z){
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b088      	sub	sp, #32
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  int dx = x-ADC_NEU, dy = y-ADC_NEU, dz = z-ADC_NEU;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 8000d14:	617b      	str	r3, [r7, #20]
  return (iabs_int(dx) > ADC_DEAD_ZONE) ||
 8000d16:	69f8      	ldr	r0, [r7, #28]
 8000d18:	f7ff ffde 	bl	8000cd8 <iabs_int>
 8000d1c:	4603      	mov	r3, r0
         (iabs_int(dy) > ADC_DEAD_ZONE) ||
 8000d1e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000d20:	dc0b      	bgt.n	8000d3a <joystick_is_active+0x48>
 8000d22:	69b8      	ldr	r0, [r7, #24]
 8000d24:	f7ff ffd8 	bl	8000cd8 <iabs_int>
 8000d28:	4603      	mov	r3, r0
  return (iabs_int(dx) > ADC_DEAD_ZONE) ||
 8000d2a:	2bc8      	cmp	r3, #200	@ 0xc8
 8000d2c:	dc05      	bgt.n	8000d3a <joystick_is_active+0x48>
         (iabs_int(dz) > ADC_DEAD_ZONE);
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ffd2 	bl	8000cd8 <iabs_int>
 8000d34:	4603      	mov	r3, r0
         (iabs_int(dy) > ADC_DEAD_ZONE) ||
 8000d36:	2bc8      	cmp	r3, #200	@ 0xc8
 8000d38:	dd01      	ble.n	8000d3e <joystick_is_active+0x4c>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <joystick_is_active+0x4e>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	b2db      	uxtb	r3, r3
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	@ 0x30
 8000d54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fedf 	bl	8001b18 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f8ff 	bl	8000f5c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f7ff ff3f 	bl	8000be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d62:	f7ff ff1f 	bl	8000ba4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d66:	f000 fa4d 	bl	8001204 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d6a:	f000 fc67 	bl	800163c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d6e:	f7ff fe4d 	bl	8000a0c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d72:	f000 fbf3 	bl	800155c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000d76:	f000 fc8b 	bl	8001690 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


HAL_ADCEx_Calibration_Start(&hadc1);
 8000d7a:	486a      	ldr	r0, [pc, #424]	@ (8000f24 <main+0x1d4>)
 8000d7c:	f001 fc20 	bl	80025c0 <HAL_ADCEx_Calibration_Start>



nrf24_init();
 8000d80:	f7ff fe34 	bl	80009ec <nrf24_init>
nrf24_transmitter_setup();
 8000d84:	f000 f946 	bl	8001014 <nrf24_transmitter_setup>

// 음성 FSM + UART3 인터럽트 수신 시작
Voice_Init();
 8000d88:	f000 fd84 	bl	8001894 <Voice_Init>
HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4966      	ldr	r1, [pc, #408]	@ (8000f28 <main+0x1d8>)
 8000d90:	4866      	ldr	r0, [pc, #408]	@ (8000f2c <main+0x1dc>)
 8000d92:	f004 f9f6 	bl	8005182 <HAL_UART_Receive_IT>

//타이머 인터럽트 시작 20ms마다
HAL_TIM_Base_Start_IT(&htim2);
 8000d96:	4866      	ldr	r0, [pc, #408]	@ (8000f30 <main+0x1e0>)
 8000d98:	f003 fd76 	bl	8004888 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 // DMA 완료되면 한 번 전송
	    if(adc_conversion_complete){
 8000d9c:	4b65      	ldr	r3, [pc, #404]	@ (8000f34 <main+0x1e4>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 80bc 	beq.w	8000f20 <main+0x1d0>
	      adc_conversion_complete = 0;
 8000da8:	4b62      	ldr	r3, [pc, #392]	@ (8000f34 <main+0x1e4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dae:	b672      	cpsid	i
}
 8000db0:	bf00      	nop

	      // 1) 최신 ADC 로컬 복사 (IRQ 안전)
	      uint16_t x,y,z;
	      __disable_irq();
	      x = adc_buffer[0];
 8000db2:	4b61      	ldr	r3, [pc, #388]	@ (8000f38 <main+0x1e8>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	843b      	strh	r3, [r7, #32]
	      y = adc_buffer[1];
 8000db8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f38 <main+0x1e8>)
 8000dba:	885b      	ldrh	r3, [r3, #2]
 8000dbc:	83fb      	strh	r3, [r7, #30]
	      z = adc_buffer[2];
 8000dbe:	4b5e      	ldr	r3, [pc, #376]	@ (8000f38 <main+0x1e8>)
 8000dc0:	889b      	ldrh	r3, [r3, #4]
 8000dc2:	83bb      	strh	r3, [r7, #28]
  __ASM volatile ("cpsie i" : : : "memory");
 8000dc4:	b662      	cpsie	i
}
 8000dc6:	bf00      	nop
	      __enable_irq();

	      // 2) 조이스틱 활성 판정
	      bool active = joystick_is_active((int)x,(int)y,(int)z);
 8000dc8:	8c3b      	ldrh	r3, [r7, #32]
 8000dca:	8bf9      	ldrh	r1, [r7, #30]
 8000dcc:	8bba      	ldrh	r2, [r7, #28]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff8f 	bl	8000cf2 <joystick_is_active>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	76fb      	strb	r3, [r7, #27]

	      // 3) (조이스틱 중립일 때만) 음성 프레임 소비
	      if (!active && Voice_FrameAvailable()){
 8000dd8:	7efb      	ldrb	r3, [r7, #27]
 8000dda:	f083 0301 	eor.w	r3, r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d01e      	beq.n	8000e22 <main+0xd2>
 8000de4:	f000 fe0c 	bl	8001a00 <Voice_FrameAvailable>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d019      	beq.n	8000e22 <main+0xd2>
  __ASM volatile ("cpsid i" : : : "memory");
 8000dee:	b672      	cpsid	i
}
 8000df0:	bf00      	nop
	        voice_frame_t vf;
	        __disable_irq();
	        bool ok = Voice_TryPopFrame(&vf);
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fe0e 	bl	8001a18 <Voice_TryPopFrame>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	76bb      	strb	r3, [r7, #26]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e00:	b662      	cpsie	i
}
 8000e02:	bf00      	nop
	        __enable_irq();
	        if (ok && vf.cmd >= 0x01 && vf.cmd <= 0x05){
 8000e04:	7ebb      	ldrb	r3, [r7, #26]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00b      	beq.n	8000e22 <main+0xd2>
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d008      	beq.n	8000e22 <main+0xd2>
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	2b05      	cmp	r3, #5
 8000e14:	d805      	bhi.n	8000e22 <main+0xd2>
	          last_cmd = vf.cmd;
 8000e16:	7bba      	ldrb	r2, [r7, #14]
 8000e18:	4b48      	ldr	r3, [pc, #288]	@ (8000f3c <main+0x1ec>)
 8000e1a:	701a      	strb	r2, [r3, #0]
	          g_state  = ST_VOICE;       // 음성 모드 진입
 8000e1c:	4b48      	ldr	r3, [pc, #288]	@ (8000f40 <main+0x1f0>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	701a      	strb	r2, [r3, #0]
	        }
	      }

	      // 4) 상태머신으로 이번 주기 전송값 결정
	      uint16_t tx_x = ADC_NEU, tx_y = ADC_NEU, tx_z = ADC_NEU;
 8000e22:	f240 73da 	movw	r3, #2010	@ 0x7da
 8000e26:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e28:	f240 73da 	movw	r3, #2010	@ 0x7da
 8000e2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e2e:	f240 73da 	movw	r3, #2010	@ 0x7da
 8000e32:	847b      	strh	r3, [r7, #34]	@ 0x22

	      switch (g_state)
 8000e34:	4b42      	ldr	r3, [pc, #264]	@ (8000f40 <main+0x1f0>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <main+0xf4>
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d007      	beq.n	8000e52 <main+0x102>
 8000e42:	e017      	b.n	8000e74 <main+0x124>
	      {
	        case ST_IDLE:
	          if (active) g_state = ST_JOYSTICK;
 8000e44:	7efb      	ldrb	r3, [r7, #27]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d036      	beq.n	8000eb8 <main+0x168>
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <main+0x1f0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
	          // IDLE은 정지값 유지(송신은 해도 되고 안 해도 됨: 여기선 보냄)
	          break;
 8000e50:	e032      	b.n	8000eb8 <main+0x168>

	        case ST_JOYSTICK:
	          if (!active){
 8000e52:	7efb      	ldrb	r3, [r7, #27]
 8000e54:	f083 0301 	eor.w	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <main+0x116>
	            g_state = ST_IDLE;
 8000e5e:	4b38      	ldr	r3, [pc, #224]	@ (8000f40 <main+0x1f0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
	          } else {
	            tx_x = x; tx_y = y; tx_z = z;      // 조이스틱 값 그대로
	          }
	          break;
 8000e64:	e029      	b.n	8000eba <main+0x16a>
	            tx_x = x; tx_y = y; tx_z = z;      // 조이스틱 값 그대로
 8000e66:	8c3b      	ldrh	r3, [r7, #32]
 8000e68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e6a:	8bfb      	ldrh	r3, [r7, #30]
 8000e6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e6e:	8bbb      	ldrh	r3, [r7, #28]
 8000e70:	847b      	strh	r3, [r7, #34]	@ 0x22
	          break;
 8000e72:	e022      	b.n	8000eba <main+0x16a>

	        case ST_VOICE:
	        default:
	          if (active){
 8000e74:	7efb      	ldrb	r3, [r7, #27]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d009      	beq.n	8000e8e <main+0x13e>
	            g_state = ST_JOYSTICK;            // 조이스틱 우선
 8000e7a:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <main+0x1f0>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
	            tx_x = x; tx_y = y; tx_z = z;
 8000e80:	8c3b      	ldrh	r3, [r7, #32]
 8000e82:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e84:	8bfb      	ldrh	r3, [r7, #30]
 8000e86:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e88:	8bbb      	ldrh	r3, [r7, #28]
 8000e8a:	847b      	strh	r3, [r7, #34]	@ 0x22
	          } else {
	            triplet_t t = VOICE_MAP[last_cmd];
	            tx_x = t.x; tx_y = t.y; tx_z = t.z; // 음성 등가값
	          }
	          break;
 8000e8c:	e015      	b.n	8000eba <main+0x16a>
	            triplet_t t = VOICE_MAP[last_cmd];
 8000e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f3c <main+0x1ec>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4619      	mov	r1, r3
 8000e94:	4a2b      	ldr	r2, [pc, #172]	@ (8000f44 <main+0x1f4>)
 8000e96:	460b      	mov	r3, r1
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	440b      	add	r3, r1
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	441a      	add	r2, r3
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	6810      	ldr	r0, [r2, #0]
 8000ea4:	6018      	str	r0, [r3, #0]
 8000ea6:	8892      	ldrh	r2, [r2, #4]
 8000ea8:	809a      	strh	r2, [r3, #4]
	            tx_x = t.x; tx_y = t.y; tx_z = t.z; // 음성 등가값
 8000eaa:	883b      	ldrh	r3, [r7, #0]
 8000eac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	847b      	strh	r3, [r7, #34]	@ 0x22
	          break;
 8000eb6:	e000      	b.n	8000eba <main+0x16a>
	          break;
 8000eb8:	bf00      	nop
	      }

	      // 5) NRF24로 6바이트 전송
	      transmit_triplet(tx_x, tx_y, tx_z);
 8000eba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000ebc:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000ebe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f8f7 	bl	80010b4 <transmit_triplet>

	      // 6) 디버그 로그
	      const char* s = (g_state==ST_JOYSTICK)?"JOY":(g_state==ST_VOICE)?"VOICE":"IDLE";
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <main+0x1f0>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d008      	beq.n	8000ee2 <main+0x192>
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <main+0x1f0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d101      	bne.n	8000ede <main+0x18e>
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <main+0x1f8>)
 8000edc:	e002      	b.n	8000ee4 <main+0x194>
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <main+0x1fc>)
 8000ee0:	e000      	b.n	8000ee4 <main+0x194>
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <main+0x200>)
 8000ee4:	617b      	str	r3, [r7, #20]
	      if (g_state==ST_VOICE) {
 8000ee6:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <main+0x1f0>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d10e      	bne.n	8000f0e <main+0x1be>
	        printf("TX[%s] CMD:0x%02X | X:%u Y:%u Z:%u\r\n", s, last_cmd, tx_x, tx_y, tx_z);
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <main+0x1ec>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8000ef8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000efa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000efc:	9201      	str	r2, [sp, #4]
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	460b      	mov	r3, r1
 8000f02:	4602      	mov	r2, r0
 8000f04:	6979      	ldr	r1, [r7, #20]
 8000f06:	4813      	ldr	r0, [pc, #76]	@ (8000f54 <main+0x204>)
 8000f08:	f004 ff84 	bl	8005e14 <iprintf>
 8000f0c:	e008      	b.n	8000f20 <main+0x1d0>
	      } else {
	        printf("TX[%s] X:%u Y:%u Z:%u\r\n", s, tx_x, tx_y, tx_z);
 8000f0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f10:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000f12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	460b      	mov	r3, r1
 8000f18:	6979      	ldr	r1, [r7, #20]
 8000f1a:	480f      	ldr	r0, [pc, #60]	@ (8000f58 <main+0x208>)
 8000f1c:	f004 ff7a 	bl	8005e14 <iprintf>
	      }
	    }

	    __WFI(); // 저전력 대기(인터럽트가 깨움)
 8000f20:	bf30      	wfi
	    if(adc_conversion_complete){
 8000f22:	e73b      	b.n	8000d9c <main+0x4c>
 8000f24:	20000090 	.word	0x20000090
 8000f28:	2000010b 	.word	0x2000010b
 8000f2c:	200001fc 	.word	0x200001fc
 8000f30:	2000016c 	.word	0x2000016c
 8000f34:	2000010a 	.word	0x2000010a
 8000f38:	20000104 	.word	0x20000104
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	2000010c 	.word	0x2000010c
 8000f44:	08006b84 	.word	0x08006b84
 8000f48:	08006b18 	.word	0x08006b18
 8000f4c:	08006b20 	.word	0x08006b20
 8000f50:	08006b28 	.word	0x08006b28
 8000f54:	08006b2c 	.word	0x08006b2c
 8000f58:	08006b54 	.word	0x08006b54

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	@ 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f66:	2228      	movs	r2, #40	@ 0x28
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 ffa7 	bl	8005ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f90:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fa8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 f908 	bl	80031c8 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fbe:	f000 f91b 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fb74 	bl	80036cc <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fea:	f000 f905 	bl	80011f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ff6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fcf4 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001006:	f000 f8f7 	bl	80011f8 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	@ 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <nrf24_transmitter_setup>:

/* USER CODE BEGIN 4 */

void nrf24_transmitter_setup(void)

{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
nrf24_defaults();
 800101a:	f7ff fc93 	bl	8000944 <nrf24_defaults>
nrf24_pwr_up();
 800101e:	f7ff f927 	bl	8000270 <nrf24_pwr_up>
nrf24_flush_tx();
 8001022:	f7ff fa7d 	bl	8000520 <nrf24_flush_tx>
nrf24_flush_rx();
 8001026:	f7ff fa86 	bl	8000536 <nrf24_flush_rx>
nrf24_clear_rx_dr();
 800102a:	f7ff faab 	bl	8000584 <nrf24_clear_rx_dr>
nrf24_clear_tx_ds();
 800102e:	f7ff fac1 	bl	80005b4 <nrf24_clear_tx_ds>
nrf24_clear_max_rt();
 8001032:	f7ff fad7 	bl	80005e4 <nrf24_clear_max_rt>
nrf24_stop_listen();                        //수신모드 비활성화 하여 송신 전용 모드로 전환
 8001036:	f7ff faed 	bl	8000614 <nrf24_stop_listen>
nrf24_set_channel(40);                      //무선 채널 40번으로 설정
 800103a:	2028      	movs	r0, #40	@ 0x28
 800103c:	f7ff f9a1 	bl	8000382 <nrf24_set_channel>
nrf24_auto_ack_all(disable);                //자동 ack기능 off=>단순 송신만 수행
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff fb99 	bl	8000778 <nrf24_auto_ack_all>
nrf24_set_payload_size(6);                  //한번에 전송할 페이로드 크기 최대 32바이트
 8001046:	2006      	movs	r0, #6
 8001048:	f7ff fe38 	bl	8000cbc <nrf24_set_payload_size>
nrf24_tx_pwr(3);
 800104c:	2003      	movs	r0, #3
 800104e:	f7ff f943 	bl	80002d8 <nrf24_tx_pwr>
nrf24_data_rate(_1mbps);
 8001052:	2000      	movs	r0, #0
 8001054:	f7ff f967 	bl	8000326 <nrf24_data_rate>
nrf24_open_tx_pipe(tx_address);             //파이프 0에 tx_address를 열어 송신 대상 지정
 8001058:	480c      	ldr	r0, [pc, #48]	@ (800108c <nrf24_transmitter_setup+0x78>)
 800105a:	f7ff f9a1 	bl	80003a0 <nrf24_open_tx_pipe>
nrf24_pwr_up();                             //모듈 power up=>송신 준비 완료
 800105e:	f7ff f907 	bl	8000270 <nrf24_pwr_up>

    uint8_t cfg = nrf24_r_reg(CONFIG, 1);
 8001062:	2101      	movs	r1, #1
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff f8c9 	bl	80001fc <nrf24_r_reg>
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
    cfg &= ~((1<<5)|(1<<4));                // MASK_TX_DS=5, MASK_MAX_RT=4 -> 0
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001074:	b2db      	uxtb	r3, r3
 8001076:	71fb      	strb	r3, [r7, #7]
    nrf24_w_reg(CONFIG, &cfg, 1);
 8001078:	1dfb      	adds	r3, r7, #7
 800107a:	2201      	movs	r2, #1
 800107c:	4619      	mov	r1, r3
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff f894 	bl	80001ac <nrf24_w_reg>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000004 	.word	0x20000004

08001090 <__io_putchar>:

int __io_putchar(int ch)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001098:	1d39      	adds	r1, r7, #4
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	2201      	movs	r2, #1
 80010a0:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <__io_putchar+0x20>)
 80010a2:	f003 ffe3 	bl	800506c <HAL_UART_Transmit>
return ch;
 80010a6:	687b      	ldr	r3, [r7, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200001b4 	.word	0x200001b4

080010b4 <transmit_triplet>:

static void transmit_triplet(uint16_t x, uint16_t y, uint16_t z)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
 80010be:	460b      	mov	r3, r1
 80010c0:	80bb      	strh	r3, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	807b      	strh	r3, [r7, #2]
  uint8_t buf[6];
  buf[0] = (uint8_t)(x & 0xFF);
 80010c6:	88fb      	ldrh	r3, [r7, #6]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	723b      	strb	r3, [r7, #8]
  buf[1] = (uint8_t)(x >> 8);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	727b      	strb	r3, [r7, #9]
  buf[2] = (uint8_t)(y & 0xFF);
 80010d6:	88bb      	ldrh	r3, [r7, #4]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	72bb      	strb	r3, [r7, #10]
  buf[3] = (uint8_t)(y >> 8);
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	72fb      	strb	r3, [r7, #11]
  buf[4] = (uint8_t)(z & 0xFF);
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	733b      	strb	r3, [r7, #12]
  buf[5] = (uint8_t)(z >> 8);
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	737b      	strb	r3, [r7, #13]

  nrf24_transmit(buf, 6);
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2106      	movs	r1, #6
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fbe7 	bl	80008d0 <nrf24_transmit>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_TIM_PeriodElapsedCallback>:

}

//타이머가 만료될 때마다 호출되는 콜백함수 20ms주기
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    // 이벤트가 발생한 타이머가 TIM2인지 확인
    if (htim->Instance == TIM2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800111c:	d104      	bne.n	8001128 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
    	//3개의 ADC값을 변환해서 그 결과를 adc_buffer에 DMA로 저장 시작
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 3);
 800111e:	2203      	movs	r2, #3
 8001120:	4903      	ldr	r1, [pc, #12]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001122:	4804      	ldr	r0, [pc, #16]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001124:	f000 fe56 	bl	8001dd4 <HAL_ADC_Start_DMA>
    }
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000104 	.word	0x20000104
 8001134:	20000090 	.word	0x20000090

08001138 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
    // 이벤트가 발생한 ADC가 ADC1인지 확인
    if (hadc->Instance == ADC1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a05      	ldr	r2, [pc, #20]	@ (800115c <HAL_ADC_ConvCpltCallback+0x24>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d102      	bne.n	8001150 <HAL_ADC_ConvCpltCallback+0x18>
    {
        // Main루프의 if문 조건이 참이 되어 transmit_sensor_data함수호출
        adc_conversion_complete = 1;
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x28>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
    }
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40012400 	.word	0x40012400
 8001160:	2000010a 	.word	0x2000010a

08001164 <HAL_ADC_ErrorCallback>:


//ADC변환 중 오류가 발생했을 때 자동으로 호출, DMA전송을 중지
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_ADC_ErrorCallback+0x20>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d102      	bne.n	800117c <HAL_ADC_ErrorCallback+0x18>
    {
        // ADC 오류 발생 시, 진행 중이던 DMA를 안전하게 중지
        // 다음 타이머 주기(20ms 후)에 HAL_ADC_Start_DMA가 다시 호출되며 자동으로 복구를 시도함
        HAL_ADC_Stop_DMA(&hadc1);
 8001176:	4804      	ldr	r0, [pc, #16]	@ (8001188 <HAL_ADC_ErrorCallback+0x24>)
 8001178:	f000 ff0a 	bl	8001f90 <HAL_ADC_Stop_DMA>
    }
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40012400 	.word	0x40012400
 8001188:	20000090 	.word	0x20000090

0800118c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <HAL_UART_RxCpltCallback+0x30>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d109      	bne.n	80011b2 <HAL_UART_RxCpltCallback+0x26>
  {
    Voice_RxByteFromIRQ(rx3_byte);
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_UART_RxCpltCallback+0x34>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fb8c 	bl	80018c0 <Voice_RxByteFromIRQ>
    HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 80011a8:	2201      	movs	r2, #1
 80011aa:	4905      	ldr	r1, [pc, #20]	@ (80011c0 <HAL_UART_RxCpltCallback+0x34>)
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <HAL_UART_RxCpltCallback+0x38>)
 80011ae:	f003 ffe8 	bl	8005182 <HAL_UART_Receive_IT>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40004800 	.word	0x40004800
 80011c0:	2000010b 	.word	0x2000010b
 80011c4:	200001fc 	.word	0x200001fc

080011c8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <HAL_UART_ErrorCallback+0x24>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d104      	bne.n	80011e4 <HAL_UART_ErrorCallback+0x1c>
  {
    HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 80011da:	2201      	movs	r2, #1
 80011dc:	4904      	ldr	r1, [pc, #16]	@ (80011f0 <HAL_UART_ErrorCallback+0x28>)
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <HAL_UART_ErrorCallback+0x2c>)
 80011e0:	f003 ffcf 	bl	8005182 <HAL_UART_Receive_IT>
  }
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40004800 	.word	0x40004800
 80011f0:	2000010b 	.word	0x2000010b
 80011f4:	200001fc 	.word	0x200001fc

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */

	__disable_irq();
	  while (1) { }
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <Error_Handler+0x8>

08001204 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_SPI1_Init+0x64>)
 800120a:	4a18      	ldr	r2, [pc, #96]	@ (800126c <MX_SPI1_Init+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <MX_SPI1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_SPI1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001234:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001238:	2218      	movs	r2, #24
 800123a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <MX_SPI1_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001250:	220a      	movs	r2, #10
 8001252:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <MX_SPI1_Init+0x64>)
 8001256:	f002 fd33 	bl	8003cc0 <HAL_SPI_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001260:	f7ff ffca 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000110 	.word	0x20000110
 800126c:	40013000 	.word	0x40013000

08001270 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <HAL_SPI_MspInit+0x88>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d12f      	bne.n	80012f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001290:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <HAL_SPI_MspInit+0x8c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a19      	ldr	r2, [pc, #100]	@ (80012fc <HAL_SPI_MspInit+0x8c>)
 8001296:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <HAL_SPI_MspInit+0x8c>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <HAL_SPI_MspInit+0x8c>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <HAL_SPI_MspInit+0x8c>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_SPI_MspInit+0x8c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012c0:	23a0      	movs	r3, #160	@ 0xa0
 80012c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	480b      	ldr	r0, [pc, #44]	@ (8001300 <HAL_SPI_MspInit+0x90>)
 80012d4:	f001 fddc 	bl	8002e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012d8:	2340      	movs	r3, #64	@ 0x40
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	@ (8001300 <HAL_SPI_MspInit+0x90>)
 80012ec:	f001 fdd0 	bl	8002e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012f0:	bf00      	nop
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40013000 	.word	0x40013000
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010800 	.word	0x40010800

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_MspInit+0x5c>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a14      	ldr	r2, [pc, #80]	@ (8001360 <HAL_MspInit+0x5c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_MspInit+0x5c>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <HAL_MspInit+0x5c>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <HAL_MspInit+0x5c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <HAL_MspInit+0x5c>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_MspInit+0x60>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <HAL_MspInit+0x60>)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000
 8001364:	40010000 	.word	0x40010000

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <NMI_Handler+0x4>

08001370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <MemManage_Handler+0x4>

08001380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <UsageFault_Handler+0x4>

08001390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b8:	f000 fbf4 	bl	8001ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <DMA1_Channel1_IRQHandler+0x10>)
 80013c6:	f001 fc2f 	bl	8002c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200000c0 	.word	0x200000c0

080013d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <ADC1_2_IRQHandler+0x10>)
 80013da:	f000 fe25 	bl	8002028 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000090 	.word	0x20000090

080013e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <TIM2_IRQHandler+0x10>)
 80013ee:	f003 fa9d 	bl	800492c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000016c 	.word	0x2000016c

080013fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <USART3_IRQHandler+0x10>)
 8001402:	f003 fee3 	bl	80051cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200001fc 	.word	0x200001fc

08001410 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e00a      	b.n	8001438 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001422:	f3af 8000 	nop.w
 8001426:	4601      	mov	r1, r0
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	60ba      	str	r2, [r7, #8]
 800142e:	b2ca      	uxtb	r2, r1
 8001430:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	dbf0      	blt.n	8001422 <_read+0x12>
  }

  return len;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e009      	b.n	8001470 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	60ba      	str	r2, [r7, #8]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fe13 	bl	8001090 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf1      	blt.n	800145c <_write+0x12>
  }
  return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_close>:

int _close(int file)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a8:	605a      	str	r2, [r3, #4]
  return 0;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <_isatty>:

int _isatty(int file)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
	...

080014e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a14      	ldr	r2, [pc, #80]	@ (8001540 <_sbrk+0x5c>)
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <_sbrk+0x60>)
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <_sbrk+0x64>)
 8001502:	4a12      	ldr	r2, [pc, #72]	@ (800154c <_sbrk+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d207      	bcs.n	8001524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001514:	f004 fd22 	bl	8005f5c <__errno>
 8001518:	4603      	mov	r3, r0
 800151a:	220c      	movs	r2, #12
 800151c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e009      	b.n	8001538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <_sbrk+0x64>)
 8001534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20005000 	.word	0x20005000
 8001544:	00000400 	.word	0x00000400
 8001548:	20000168 	.word	0x20000168
 800154c:	200003a8 	.word	0x200003a8

08001550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <MX_TIM2_Init+0x94>)
 800157a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800157e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <MX_TIM2_Init+0x94>)
 8001582:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <MX_TIM2_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <MX_TIM2_Init+0x94>)
 8001590:	22c7      	movs	r2, #199	@ 0xc7
 8001592:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001594:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <MX_TIM2_Init+0x94>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <MX_TIM2_Init+0x94>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a0:	4813      	ldr	r0, [pc, #76]	@ (80015f0 <MX_TIM2_Init+0x94>)
 80015a2:	f003 f922 	bl	80047ea <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015ac:	f7ff fe24 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <MX_TIM2_Init+0x94>)
 80015be:	f003 faa5 	bl	8004b0c <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015c8:	f7ff fe16 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <MX_TIM2_Init+0x94>)
 80015da:	f003 fc87 	bl	8004eec <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015e4:	f7ff fe08 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000016c 	.word	0x2000016c

080015f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001604:	d113      	bne.n	800162e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001606:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <HAL_TIM_Base_MspInit+0x44>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a0b      	ldr	r2, [pc, #44]	@ (8001638 <HAL_TIM_Base_MspInit+0x44>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <HAL_TIM_Base_MspInit+0x44>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	201c      	movs	r0, #28
 8001624:	f001 f95b 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001628:	201c      	movs	r0, #28
 800162a:	f001 f974 	bl	8002916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	@ (800168c <MX_USART2_UART_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_USART2_UART_Init+0x4c>)
 8001674:	f003 fcaa 	bl	8004fcc <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167e:	f7ff fdbb 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200001b4 	.word	0x200001b4
 800168c:	40004400 	.word	0x40004400

08001690 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <MX_USART3_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_USART3_UART_Init+0x4c>)
 80016c8:	f003 fc80 	bl	8004fcc <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f7ff fd91 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200001fc 	.word	0x200001fc
 80016e0:	40004800 	.word	0x40004800

080016e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a3b      	ldr	r2, [pc, #236]	@ (80017ec <HAL_UART_MspInit+0x108>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d130      	bne.n	8001766 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001704:	4b3a      	ldr	r3, [pc, #232]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	4a39      	ldr	r2, [pc, #228]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 800170a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170e:	61d3      	str	r3, [r2, #28]
 8001710:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a33      	ldr	r2, [pc, #204]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001734:	2304      	movs	r3, #4
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	4619      	mov	r1, r3
 8001746:	482b      	ldr	r0, [pc, #172]	@ (80017f4 <HAL_UART_MspInit+0x110>)
 8001748:	f001 fba2 	bl	8002e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800174c:	2308      	movs	r3, #8
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	4619      	mov	r1, r3
 800175e:	4825      	ldr	r0, [pc, #148]	@ (80017f4 <HAL_UART_MspInit+0x110>)
 8001760:	f001 fb96 	bl	8002e90 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001764:	e03e      	b.n	80017e4 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a23      	ldr	r2, [pc, #140]	@ (80017f8 <HAL_UART_MspInit+0x114>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d139      	bne.n	80017e4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001770:	4b1f      	ldr	r3, [pc, #124]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	4a1e      	ldr	r2, [pc, #120]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 8001776:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800177a:	61d3      	str	r3, [r2, #28]
 800177c:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a18      	ldr	r2, [pc, #96]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 800178e:	f043 0308 	orr.w	r3, r3, #8
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <HAL_UART_MspInit+0x10c>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 0318 	add.w	r3, r7, #24
 80017b2:	4619      	mov	r1, r3
 80017b4:	4811      	ldr	r0, [pc, #68]	@ (80017fc <HAL_UART_MspInit+0x118>)
 80017b6:	f001 fb6b 	bl	8002e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 0318 	add.w	r3, r7, #24
 80017cc:	4619      	mov	r1, r3
 80017ce:	480b      	ldr	r0, [pc, #44]	@ (80017fc <HAL_UART_MspInit+0x118>)
 80017d0:	f001 fb5e 	bl	8002e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	2027      	movs	r0, #39	@ 0x27
 80017da:	f001 f880 	bl	80028de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017de:	2027      	movs	r0, #39	@ 0x27
 80017e0:	f001 f899 	bl	8002916 <HAL_NVIC_EnableIRQ>
}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	@ 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40004400 	.word	0x40004400
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010800 	.word	0x40010800
 80017f8:	40004800 	.word	0x40004800
 80017fc:	40010c00 	.word	0x40010c00

08001800 <Voice_CalcChecksum>:

static volatile bool     s_ready = false;
static volatile uint8_t  s_last[6];   // 메인 루프에서 읽을 최종 프레임

uint8_t Voice_CalcChecksum(uint8_t head, uint8_t cmd, uint8_t al, uint8_t ah)
{
 8001800:	b490      	push	{r4, r7}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	4611      	mov	r1, r2
 800180c:	461a      	mov	r2, r3
 800180e:	4623      	mov	r3, r4
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	4603      	mov	r3, r0
 8001814:	71bb      	strb	r3, [r7, #6]
 8001816:	460b      	mov	r3, r1
 8001818:	717b      	strb	r3, [r7, #5]
 800181a:	4613      	mov	r3, r2
 800181c:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((head ^ cmd ^ al ^ ah) & 0xFF);
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	79bb      	ldrb	r3, [r7, #6]
 8001822:	4053      	eors	r3, r2
 8001824:	b2da      	uxtb	r2, r3
 8001826:	797b      	ldrb	r3, [r7, #5]
 8001828:	4053      	eors	r3, r2
 800182a:	b2da      	uxtb	r2, r3
 800182c:	793b      	ldrb	r3, [r7, #4]
 800182e:	4053      	eors	r3, r2
 8001830:	b2db      	uxtb	r3, r3
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bc90      	pop	{r4, r7}
 800183a:	4770      	bx	lr

0800183c <Voice_ValidateRaw6>:

bool Voice_ValidateRaw6(const uint8_t f[6])
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    if (f[0] != 0xAA) return false;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2baa      	cmp	r3, #170	@ 0xaa
 800184a:	d001      	beq.n	8001850 <Voice_ValidateRaw6+0x14>
 800184c:	2300      	movs	r3, #0
 800184e:	e01d      	b.n	800188c <Voice_ValidateRaw6+0x50>
    if (f[5] != 0x55) return false;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3305      	adds	r3, #5
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b55      	cmp	r3, #85	@ 0x55
 8001858:	d001      	beq.n	800185e <Voice_ValidateRaw6+0x22>
 800185a:	2300      	movs	r3, #0
 800185c:	e016      	b.n	800188c <Voice_ValidateRaw6+0x50>
    uint8_t chk = Voice_CalcChecksum(0xAA, f[1], f[2], f[3]);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3301      	adds	r3, #1
 8001862:	7819      	ldrb	r1, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3302      	adds	r3, #2
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3303      	adds	r3, #3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	20aa      	movs	r0, #170	@ 0xaa
 8001872:	f7ff ffc5 	bl	8001800 <Voice_CalcChecksum>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
    return (chk == f[4]);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	429a      	cmp	r2, r3
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	b2db      	uxtb	r3, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <Voice_Init>:

void Voice_Init(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
    s_rx_state = RX_ST_WAIT_HEAD;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <Voice_Init+0x20>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
    s_idx = 0;
 800189e:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <Voice_Init+0x24>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
    s_ready = false;
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <Voice_Init+0x28>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000244 	.word	0x20000244
 80018b8:	20000245 	.word	0x20000245
 80018bc:	2000024e 	.word	0x2000024e

080018c0 <Voice_RxByteFromIRQ>:

void Voice_RxByteFromIRQ(uint8_t b)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
    switch (s_rx_state)
 80018ca:	4b48      	ldr	r3, [pc, #288]	@ (80019ec <Voice_RxByteFromIRQ+0x12c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	f200 8085 	bhi.w	80019e0 <Voice_RxByteFromIRQ+0x120>
 80018d6:	a201      	add	r2, pc, #4	@ (adr r2, 80018dc <Voice_RxByteFromIRQ+0x1c>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	080018f5 	.word	0x080018f5
 80018e0:	0800190f 	.word	0x0800190f
 80018e4:	0800192d 	.word	0x0800192d
 80018e8:	0800194b 	.word	0x0800194b
 80018ec:	08001969 	.word	0x08001969
 80018f0:	08001987 	.word	0x08001987
    {
        case RX_ST_WAIT_HEAD:
            if (b == 0xAA) {
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	2baa      	cmp	r3, #170	@ 0xaa
 80018f8:	d171      	bne.n	80019de <Voice_RxByteFromIRQ+0x11e>
                s_work[0] = 0xAA;
 80018fa:	4b3d      	ldr	r3, [pc, #244]	@ (80019f0 <Voice_RxByteFromIRQ+0x130>)
 80018fc:	22aa      	movs	r2, #170	@ 0xaa
 80018fe:	701a      	strb	r2, [r3, #0]
                s_idx = 1;
 8001900:	4b3c      	ldr	r3, [pc, #240]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
                s_rx_state = RX_ST_GET_CMD;
 8001906:	4b39      	ldr	r3, [pc, #228]	@ (80019ec <Voice_RxByteFromIRQ+0x12c>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800190c:	e067      	b.n	80019de <Voice_RxByteFromIRQ+0x11e>

        case RX_ST_GET_CMD:
            s_work[s_idx++] = b;
 800190e:	4b39      	ldr	r3, [pc, #228]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	b2d1      	uxtb	r1, r2
 8001918:	4a36      	ldr	r2, [pc, #216]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 800191a:	7011      	strb	r1, [r2, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	4a34      	ldr	r2, [pc, #208]	@ (80019f0 <Voice_RxByteFromIRQ+0x130>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_AL;
 8001924:	4b31      	ldr	r3, [pc, #196]	@ (80019ec <Voice_RxByteFromIRQ+0x12c>)
 8001926:	2202      	movs	r2, #2
 8001928:	701a      	strb	r2, [r3, #0]
            break;
 800192a:	e059      	b.n	80019e0 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_AL:
            s_work[s_idx++] = b;
 800192c:	4b31      	ldr	r3, [pc, #196]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	b2d1      	uxtb	r1, r2
 8001936:	4a2f      	ldr	r2, [pc, #188]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 8001938:	7011      	strb	r1, [r2, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	4a2c      	ldr	r2, [pc, #176]	@ (80019f0 <Voice_RxByteFromIRQ+0x130>)
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_AH;
 8001942:	4b2a      	ldr	r3, [pc, #168]	@ (80019ec <Voice_RxByteFromIRQ+0x12c>)
 8001944:	2203      	movs	r2, #3
 8001946:	701a      	strb	r2, [r3, #0]
            break;
 8001948:	e04a      	b.n	80019e0 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_AH:
            s_work[s_idx++] = b;
 800194a:	4b2a      	ldr	r3, [pc, #168]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	4a27      	ldr	r2, [pc, #156]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 8001956:	7011      	strb	r1, [r2, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	4a25      	ldr	r2, [pc, #148]	@ (80019f0 <Voice_RxByteFromIRQ+0x130>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_CHK;
 8001960:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <Voice_RxByteFromIRQ+0x12c>)
 8001962:	2204      	movs	r2, #4
 8001964:	701a      	strb	r2, [r3, #0]
            break;
 8001966:	e03b      	b.n	80019e0 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_CHK:
            s_work[s_idx++] = b;
 8001968:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	b2d1      	uxtb	r1, r2
 8001972:	4a20      	ldr	r2, [pc, #128]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 8001974:	7011      	strb	r1, [r2, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	4a1d      	ldr	r2, [pc, #116]	@ (80019f0 <Voice_RxByteFromIRQ+0x130>)
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_TAIL;
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <Voice_RxByteFromIRQ+0x12c>)
 8001980:	2205      	movs	r2, #5
 8001982:	701a      	strb	r2, [r3, #0]
            break;
 8001984:	e02c      	b.n	80019e0 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_TAIL:
            s_work[s_idx++] = b; // tail
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	b2d1      	uxtb	r1, r2
 8001990:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 8001992:	7011      	strb	r1, [r2, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	4a16      	ldr	r2, [pc, #88]	@ (80019f0 <Voice_RxByteFromIRQ+0x130>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	5453      	strb	r3, [r2, r1]
            if (s_idx == 6) {
 800199c:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d114      	bne.n	80019d0 <Voice_RxByteFromIRQ+0x110>
                for (int i = 0; i < 6; ++i) s_last[i] = s_work[i];
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	e00b      	b.n	80019c4 <Voice_RxByteFromIRQ+0x104>
 80019ac:	4a10      	ldr	r2, [pc, #64]	@ (80019f0 <Voice_RxByteFromIRQ+0x130>)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4413      	add	r3, r2
 80019b2:	7819      	ldrb	r1, [r3, #0]
 80019b4:	4a10      	ldr	r2, [pc, #64]	@ (80019f8 <Voice_RxByteFromIRQ+0x138>)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4413      	add	r3, r2
 80019ba:	460a      	mov	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	ddf0      	ble.n	80019ac <Voice_RxByteFromIRQ+0xec>
                s_ready = true;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <Voice_RxByteFromIRQ+0x13c>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
            }
            s_rx_state = RX_ST_WAIT_HEAD;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <Voice_RxByteFromIRQ+0x12c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
            s_idx = 0;
 80019d6:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <Voice_RxByteFromIRQ+0x134>)
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
            break;
 80019dc:	e000      	b.n	80019e0 <Voice_RxByteFromIRQ+0x120>
            break;
 80019de:	bf00      	nop
    }
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000244 	.word	0x20000244
 80019f0:	20000248 	.word	0x20000248
 80019f4:	20000245 	.word	0x20000245
 80019f8:	20000250 	.word	0x20000250
 80019fc:	2000024e 	.word	0x2000024e

08001a00 <Voice_FrameAvailable>:

bool Voice_FrameAvailable(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
    return s_ready;
 8001a04:	4b03      	ldr	r3, [pc, #12]	@ (8001a14 <Voice_FrameAvailable+0x14>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	2000024e 	.word	0x2000024e

08001a18 <Voice_TryPopFrame>:

bool Voice_TryPopFrame(voice_frame_t* out)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    if (!s_ready) return false;
 8001a20:	4b28      	ldr	r3, [pc, #160]	@ (8001ac4 <Voice_TryPopFrame+0xac>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f083 0301 	eor.w	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <Voice_TryPopFrame+0x1c>
 8001a30:	2300      	movs	r3, #0
 8001a32:	e043      	b.n	8001abc <Voice_TryPopFrame+0xa4>

    uint8_t f[6];
    for (int i = 0; i < 6; ++i) f[i] = s_last[i];
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00d      	b.n	8001a56 <Voice_TryPopFrame+0x3e>
 8001a3a:	4a23      	ldr	r2, [pc, #140]	@ (8001ac8 <Voice_TryPopFrame+0xb0>)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b2d9      	uxtb	r1, r3
 8001a44:	f107 0208 	add.w	r2, r7, #8
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	ddee      	ble.n	8001a3a <Voice_TryPopFrame+0x22>
    s_ready = false;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <Voice_TryPopFrame+0xac>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]

    if (!Voice_ValidateRaw6(f)) return false;
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fee8 	bl	800183c <Voice_ValidateRaw6>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <Voice_TryPopFrame+0x64>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e01f      	b.n	8001abc <Voice_TryPopFrame+0xa4>

    if (out) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01b      	beq.n	8001aba <Voice_TryPopFrame+0xa2>
        for (int i = 0; i < 6; ++i) out->raw[i] = f[i];
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	e00c      	b.n	8001aa2 <Voice_TryPopFrame+0x8a>
 8001a88:	f107 0208 	add.w	r2, r7, #8
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	7819      	ldrb	r1, [r3, #0]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4413      	add	r3, r2
 8001a98:	460a      	mov	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	ddef      	ble.n	8001a88 <Voice_TryPopFrame+0x70>
        out->cmd = f[1];
 8001aa8:	7a7a      	ldrb	r2, [r7, #9]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	719a      	strb	r2, [r3, #6]
        out->al  = f[2];
 8001aae:	7aba      	ldrb	r2, [r7, #10]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	71da      	strb	r2, [r3, #7]
        out->ah  = f[3];
 8001ab4:	7afa      	ldrb	r2, [r7, #11]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	721a      	strb	r2, [r3, #8]
    }
    return true;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000024e 	.word	0x2000024e
 8001ac8:	20000250 	.word	0x20000250

08001acc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001acc:	f7ff fd40 	bl	8001550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad0:	480b      	ldr	r0, [pc, #44]	@ (8001b00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ad2:	490c      	ldr	r1, [pc, #48]	@ (8001b04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad8:	e002      	b.n	8001ae0 <LoopCopyDataInit>

08001ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ade:	3304      	adds	r3, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae4:	d3f9      	bcc.n	8001ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae6:	4a09      	ldr	r2, [pc, #36]	@ (8001b0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ae8:	4c09      	ldr	r4, [pc, #36]	@ (8001b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aec:	e001      	b.n	8001af2 <LoopFillZerobss>

08001aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af0:	3204      	adds	r2, #4

08001af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af4:	d3fb      	bcc.n	8001aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001af6:	f004 fa37 	bl	8005f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afa:	f7ff f929 	bl	8000d50 <main>
  bx lr
 8001afe:	4770      	bx	lr
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b08:	08006c24 	.word	0x08006c24
  ldr r2, =_sbss
 8001b0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b10:	200003a8 	.word	0x200003a8

08001b14 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <CAN1_RX1_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <HAL_Init+0x28>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <HAL_Init+0x28>)
 8001b22:	f043 0310 	orr.w	r3, r3, #16
 8001b26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 fecd 	bl	80028c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f000 f808 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b34:	f7ff fbe6 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40022000 	.word	0x40022000

08001b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <HAL_InitTick+0x54>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x58>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fee5 	bl	8002932 <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00e      	b.n	8001b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d80a      	bhi.n	8001b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f000 fead 	bl	80028de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b84:	4a06      	ldr	r2, [pc, #24]	@ (8001ba0 <HAL_InitTick+0x5c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	20000014 	.word	0x20000014
 8001ba0:	20000010 	.word	0x20000010

08001ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_IncTick+0x1c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_IncTick+0x20>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a03      	ldr	r2, [pc, #12]	@ (8001bc4 <HAL_IncTick+0x20>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	20000014 	.word	0x20000014
 8001bc4:	20000258 	.word	0x20000258

08001bc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b02      	ldr	r3, [pc, #8]	@ (8001bd8 <HAL_GetTick+0x10>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000258 	.word	0x20000258

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff fff0 	bl	8001bc8 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffe0 	bl	8001bc8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000014 	.word	0x20000014

08001c24 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0be      	b.n	8001dc4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe ff2e 	bl	8000ac4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fc01 	bl	8002470 <ADC_ConversionStop_Disable>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 8099 	bne.w	8001db2 <HAL_ADC_Init+0x18e>
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 8095 	bne.w	8001db2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c90:	f023 0302 	bic.w	r3, r3, #2
 8001c94:	f043 0202 	orr.w	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ca4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7b1b      	ldrb	r3, [r3, #12]
 8001caa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cbc:	d003      	beq.n	8001cc6 <HAL_ADC_Init+0xa2>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d102      	bne.n	8001ccc <HAL_ADC_Init+0xa8>
 8001cc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cca:	e000      	b.n	8001cce <HAL_ADC_Init+0xaa>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7d1b      	ldrb	r3, [r3, #20]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d119      	bne.n	8001d10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7b1b      	ldrb	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	035a      	lsls	r2, r3, #13
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	e00b      	b.n	8001d10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	4b28      	ldr	r3, [pc, #160]	@ (8001dcc <HAL_ADC_Init+0x1a8>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d40:	d003      	beq.n	8001d4a <HAL_ADC_Init+0x126>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d104      	bne.n	8001d54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	051b      	lsls	r3, r3, #20
 8001d52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_ADC_Init+0x1ac>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d10b      	bne.n	8001d90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d8e:	e018      	b.n	8001dc2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d94:	f023 0312 	bic.w	r3, r3, #18
 8001d98:	f043 0210 	orr.w	r2, r3, #16
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001db0:	e007      	b.n	8001dc2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	ffe1f7fd 	.word	0xffe1f7fd
 8001dd0:	ff1f0efe 	.word	0xff1f0efe

08001dd4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a64      	ldr	r2, [pc, #400]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d004      	beq.n	8001df8 <HAL_ADC_Start_DMA+0x24>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a63      	ldr	r2, [pc, #396]	@ (8001f80 <HAL_ADC_Start_DMA+0x1ac>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d106      	bne.n	8001e06 <HAL_ADC_Start_DMA+0x32>
 8001df8:	4b60      	ldr	r3, [pc, #384]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 80b3 	bne.w	8001f6c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_Start_DMA+0x40>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e0ae      	b.n	8001f72 <HAL_ADC_Start_DMA+0x19e>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 facd 	bl	80023bc <ADC_Enable>
 8001e22:	4603      	mov	r3, r0
 8001e24:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f040 809a 	bne.w	8001f62 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a4e      	ldr	r2, [pc, #312]	@ (8001f80 <HAL_ADC_Start_DMA+0x1ac>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_Start_DMA+0x84>
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d115      	bne.n	8001e84 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d026      	beq.n	8001ec0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e82:	e01d      	b.n	8001ec0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e88:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a39      	ldr	r2, [pc, #228]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_Start_DMA+0xd0>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a38      	ldr	r2, [pc, #224]	@ (8001f80 <HAL_ADC_Start_DMA+0x1ac>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_ADC_Start_DMA+0xec>
 8001ea4:	4b35      	ldr	r3, [pc, #212]	@ (8001f7c <HAL_ADC_Start_DMA+0x1a8>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001eb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	f023 0206 	bic.w	r2, r3, #6
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ed8:	e002      	b.n	8001ee0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a25      	ldr	r2, [pc, #148]	@ (8001f84 <HAL_ADC_Start_DMA+0x1b0>)
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a24      	ldr	r2, [pc, #144]	@ (8001f88 <HAL_ADC_Start_DMA+0x1b4>)
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a23      	ldr	r2, [pc, #140]	@ (8001f8c <HAL_ADC_Start_DMA+0x1b8>)
 8001efe:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0202 	mvn.w	r2, #2
 8001f08:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f18:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a18      	ldr	r0, [r3, #32]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	334c      	adds	r3, #76	@ 0x4c
 8001f24:	4619      	mov	r1, r3
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f000 fd69 	bl	8002a00 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f38:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f3c:	d108      	bne.n	8001f50 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001f4c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f4e:	e00f      	b.n	8001f70 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f5e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f60:	e006      	b.n	8001f70 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001f6a:	e001      	b.n	8001f70 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40012400 	.word	0x40012400
 8001f80:	40012800 	.word	0x40012800
 8001f84:	080024f3 	.word	0x080024f3
 8001f88:	0800256f 	.word	0x0800256f
 8001f8c:	0800258b 	.word	0x0800258b

08001f90 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_Stop_DMA+0x1a>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e03a      	b.n	8002020 <HAL_ADC_Stop_DMA+0x90>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fa5c 	bl	8002470 <ADC_ConversionStop_Disable>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d129      	bne.n	8002016 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fd0:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d11a      	bne.n	8002016 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fd6b 	bl	8002ac0 <HAL_DMA_Abort>
 8001fea:	4603      	mov	r3, r0
 8001fec:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
 8002008:	e005      	b.n	8002016 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03e      	beq.n	80020c8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d039      	beq.n	80020c8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002076:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800207a:	d11d      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002080:	2b00      	cmp	r3, #0
 8002082:	d119      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0220 	bic.w	r2, r2, #32
 8002092:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff f83d 	bl	8001138 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f06f 0212 	mvn.w	r2, #18
 80020c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d04d      	beq.n	800216e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d048      	beq.n	800216e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80020fe:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002102:	d012      	beq.n	800212a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800210e:	2b00      	cmp	r3, #0
 8002110:	d125      	bne.n	800215e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800211c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002120:	d11d      	bne.n	800215e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002126:	2b00      	cmp	r3, #0
 8002128:	d119      	bne.n	800215e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002138:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fadc 	bl	800271c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 020c 	mvn.w	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d012      	beq.n	800219e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00d      	beq.n	800219e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f812 	bl	80021b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0201 	mvn.w	r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x20>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e0dc      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x1da>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b06      	cmp	r3, #6
 80021fa:	d81c      	bhi.n	8002236 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	3b05      	subs	r3, #5
 800220e:	221f      	movs	r2, #31
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	4019      	ands	r1, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	3b05      	subs	r3, #5
 8002228:	fa00 f203 	lsl.w	r2, r0, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	635a      	str	r2, [r3, #52]	@ 0x34
 8002234:	e03c      	b.n	80022b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d81c      	bhi.n	8002278 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	3b23      	subs	r3, #35	@ 0x23
 8002250:	221f      	movs	r2, #31
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	4019      	ands	r1, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	3b23      	subs	r3, #35	@ 0x23
 800226a:	fa00 f203 	lsl.w	r2, r0, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	631a      	str	r2, [r3, #48]	@ 0x30
 8002276:	e01b      	b.n	80022b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3b41      	subs	r3, #65	@ 0x41
 800228a:	221f      	movs	r2, #31
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	4019      	ands	r1, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b41      	subs	r3, #65	@ 0x41
 80022a4:	fa00 f203 	lsl.w	r2, r0, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	d91c      	bls.n	80022f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68d9      	ldr	r1, [r3, #12]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	3b1e      	subs	r3, #30
 80022ca:	2207      	movs	r2, #7
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4019      	ands	r1, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6898      	ldr	r0, [r3, #8]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	3b1e      	subs	r3, #30
 80022e4:	fa00 f203 	lsl.w	r2, r0, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	e019      	b.n	8002326 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6919      	ldr	r1, [r3, #16]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	2207      	movs	r2, #7
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	4019      	ands	r1, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	6898      	ldr	r0, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	fa00 f203 	lsl.w	r2, r0, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b10      	cmp	r3, #16
 800232c:	d003      	beq.n	8002336 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002332:	2b11      	cmp	r3, #17
 8002334:	d132      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a1d      	ldr	r2, [pc, #116]	@ (80023b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d125      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d126      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800235c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b10      	cmp	r3, #16
 8002364:	d11a      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002366:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a13      	ldr	r2, [pc, #76]	@ (80023b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800236c:	fba2 2303 	umull	r2, r3, r2, r3
 8002370:	0c9a      	lsrs	r2, r3, #18
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800237c:	e002      	b.n	8002384 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3b01      	subs	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f9      	bne.n	800237e <HAL_ADC_ConfigChannel+0x1b2>
 800238a:	e007      	b.n	800239c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	f043 0220 	orr.w	r2, r3, #32
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	40012400 	.word	0x40012400
 80023b4:	2000000c 	.word	0x2000000c
 80023b8:	431bde83 	.word	0x431bde83

080023bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d040      	beq.n	800245c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <ADC_Enable+0xac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1f      	ldr	r2, [pc, #124]	@ (800246c <ADC_Enable+0xb0>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	0c9b      	lsrs	r3, r3, #18
 80023f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023f8:	e002      	b.n	8002400 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f9      	bne.n	80023fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002406:	f7ff fbdf 	bl	8001bc8 <HAL_GetTick>
 800240a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800240c:	e01f      	b.n	800244e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800240e:	f7ff fbdb 	bl	8001bc8 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d918      	bls.n	800244e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d011      	beq.n	800244e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e007      	b.n	800245e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d1d8      	bne.n	800240e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000000c 	.word	0x2000000c
 800246c:	431bde83 	.word	0x431bde83

08002470 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d12e      	bne.n	80024e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800249a:	f7ff fb95 	bl	8001bc8 <HAL_GetTick>
 800249e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024a0:	e01b      	b.n	80024da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024a2:	f7ff fb91 	bl	8001bc8 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d914      	bls.n	80024da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10d      	bne.n	80024da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	f043 0210 	orr.w	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	f043 0201 	orr.w	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e007      	b.n	80024ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d0dc      	beq.n	80024a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002504:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002508:	2b00      	cmp	r3, #0
 800250a:	d127      	bne.n	800255c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002510:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002522:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002526:	d115      	bne.n	8002554 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800252c:	2b00      	cmp	r3, #0
 800252e:	d111      	bne.n	8002554 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002534:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7fe fdef 	bl	8001138 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800255a:	e004      	b.n	8002566 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4798      	blx	r3
}
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7ff fe12 	bl	80021a6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a8:	f043 0204 	orr.w	r2, r3, #4
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7fe fdd7 	bl	8001164 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_ADCEx_Calibration_Start+0x1e>
 80025da:	2302      	movs	r3, #2
 80025dc:	e097      	b.n	800270e <HAL_ADCEx_Calibration_Start+0x14e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff42 	bl	8002470 <ADC_ConversionStop_Disable>
 80025ec:	4603      	mov	r3, r0
 80025ee:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff fee3 	bl	80023bc <ADC_Enable>
 80025f6:	4603      	mov	r3, r0
 80025f8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 8081 	bne.w	8002704 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002606:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800260a:	f023 0302 	bic.w	r3, r3, #2
 800260e:	f043 0202 	orr.w	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002616:	4b40      	ldr	r3, [pc, #256]	@ (8002718 <HAL_ADCEx_Calibration_Start+0x158>)
 8002618:	681c      	ldr	r4, [r3, #0]
 800261a:	2002      	movs	r0, #2
 800261c:	f001 fa9a 	bl	8003b54 <HAL_RCCEx_GetPeriphCLKFreq>
 8002620:	4603      	mov	r3, r0
 8002622:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002626:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002628:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800262a:	e002      	b.n	8002632 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3b01      	subs	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0208 	orr.w	r2, r2, #8
 8002646:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002648:	f7ff fabe 	bl	8001bc8 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800264e:	e01b      	b.n	8002688 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002650:	f7ff faba 	bl	8001bc8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b0a      	cmp	r3, #10
 800265c:	d914      	bls.n	8002688 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00d      	beq.n	8002688 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	f023 0312 	bic.w	r3, r3, #18
 8002674:	f043 0210 	orr.w	r2, r3, #16
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e042      	b.n	800270e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1dc      	bne.n	8002650 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0204 	orr.w	r2, r2, #4
 80026a4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80026a6:	f7ff fa8f 	bl	8001bc8 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026ac:	e01b      	b.n	80026e6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026ae:	f7ff fa8b 	bl	8001bc8 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b0a      	cmp	r3, #10
 80026ba:	d914      	bls.n	80026e6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ce:	f023 0312 	bic.w	r3, r3, #18
 80026d2:	f043 0210 	orr.w	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e013      	b.n	800270e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1dc      	bne.n	80026ae <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	f023 0303 	bic.w	r3, r3, #3
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800270c:	7dfb      	ldrb	r3, [r7, #23]
}
 800270e:	4618      	mov	r0, r3
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd90      	pop	{r4, r7, pc}
 8002716:	bf00      	nop
 8002718:	2000000c 	.word	0x2000000c

0800271c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
	...

08002730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002740:	4b0c      	ldr	r3, [pc, #48]	@ (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800274c:	4013      	ands	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002758:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800275c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002762:	4a04      	ldr	r2, [pc, #16]	@ (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	60d3      	str	r3, [r2, #12]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800277c:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <__NVIC_GetPriorityGrouping+0x18>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	f003 0307 	and.w	r3, r3, #7
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	db0b      	blt.n	80027be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	f003 021f 	and.w	r2, r3, #31
 80027ac:	4906      	ldr	r1, [pc, #24]	@ (80027c8 <__NVIC_EnableIRQ+0x34>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	2001      	movs	r0, #1
 80027b6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	@ (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	@ (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	@ 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	@ 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002894:	d301      	bcc.n	800289a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002896:	2301      	movs	r3, #1
 8002898:	e00f      	b.n	80028ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <SysTick_Config+0x40>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a2:	210f      	movs	r1, #15
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
 80028a8:	f7ff ff90 	bl	80027cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <SysTick_Config+0x40>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <SysTick_Config+0x40>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff2d 	bl	8002730 <__NVIC_SetPriorityGrouping>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f0:	f7ff ff42 	bl	8002778 <__NVIC_GetPriorityGrouping>
 80028f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	6978      	ldr	r0, [r7, #20]
 80028fc:	f7ff ff90 	bl	8002820 <NVIC_EncodePriority>
 8002900:	4602      	mov	r2, r0
 8002902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff5f 	bl	80027cc <__NVIC_SetPriority>
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff35 	bl	8002794 <__NVIC_EnableIRQ>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff ffa2 	bl	8002884 <SysTick_Config>
 8002940:	4603      	mov	r3, r0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e043      	b.n	80029ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	4b22      	ldr	r3, [pc, #136]	@ (80029f4 <HAL_DMA_Init+0xa8>)
 800296a:	4413      	add	r3, r2
 800296c:	4a22      	ldr	r2, [pc, #136]	@ (80029f8 <HAL_DMA_Init+0xac>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	009a      	lsls	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1f      	ldr	r2, [pc, #124]	@ (80029fc <HAL_DMA_Init+0xb0>)
 800297e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002996:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800299a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	bffdfff8 	.word	0xbffdfff8
 80029f8:	cccccccd 	.word	0xcccccccd
 80029fc:	40020000 	.word	0x40020000

08002a00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_DMA_Start_IT+0x20>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e04b      	b.n	8002ab8 <HAL_DMA_Start_IT+0xb8>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d13a      	bne.n	8002aaa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0201 	bic.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f9eb 	bl	8002e34 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d008      	beq.n	8002a78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 020e 	orr.w	r2, r2, #14
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e00f      	b.n	8002a98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0204 	bic.w	r2, r2, #4
 8002a86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 020a 	orr.w	r2, r2, #10
 8002a96:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e005      	b.n	8002ab6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2204      	movs	r2, #4
 8002adc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e020      	b.n	8002b2c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 020e 	bic.w	r2, r2, #14
 8002af8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f202 	lsl.w	r2, r1, r2
 8002b18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d005      	beq.n	8002b5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2204      	movs	r2, #4
 8002b54:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	e051      	b.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 020e 	bic.w	r2, r2, #14
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a22      	ldr	r2, [pc, #136]	@ (8002c0c <HAL_DMA_Abort_IT+0xd4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d029      	beq.n	8002bda <HAL_DMA_Abort_IT+0xa2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a21      	ldr	r2, [pc, #132]	@ (8002c10 <HAL_DMA_Abort_IT+0xd8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d022      	beq.n	8002bd6 <HAL_DMA_Abort_IT+0x9e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1f      	ldr	r2, [pc, #124]	@ (8002c14 <HAL_DMA_Abort_IT+0xdc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d01a      	beq.n	8002bd0 <HAL_DMA_Abort_IT+0x98>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002c18 <HAL_DMA_Abort_IT+0xe0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d012      	beq.n	8002bca <HAL_DMA_Abort_IT+0x92>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c1c <HAL_DMA_Abort_IT+0xe4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00a      	beq.n	8002bc4 <HAL_DMA_Abort_IT+0x8c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c20 <HAL_DMA_Abort_IT+0xe8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d102      	bne.n	8002bbe <HAL_DMA_Abort_IT+0x86>
 8002bb8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bbc:	e00e      	b.n	8002bdc <HAL_DMA_Abort_IT+0xa4>
 8002bbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bc2:	e00b      	b.n	8002bdc <HAL_DMA_Abort_IT+0xa4>
 8002bc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bc8:	e008      	b.n	8002bdc <HAL_DMA_Abort_IT+0xa4>
 8002bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bce:	e005      	b.n	8002bdc <HAL_DMA_Abort_IT+0xa4>
 8002bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bd4:	e002      	b.n	8002bdc <HAL_DMA_Abort_IT+0xa4>
 8002bd6:	2310      	movs	r3, #16
 8002bd8:	e000      	b.n	8002bdc <HAL_DMA_Abort_IT+0xa4>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	4a11      	ldr	r2, [pc, #68]	@ (8002c24 <HAL_DMA_Abort_IT+0xec>)
 8002bde:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
    } 
  }
  return status;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40020008 	.word	0x40020008
 8002c10:	4002001c 	.word	0x4002001c
 8002c14:	40020030 	.word	0x40020030
 8002c18:	40020044 	.word	0x40020044
 8002c1c:	40020058 	.word	0x40020058
 8002c20:	4002006c 	.word	0x4002006c
 8002c24:	40020000 	.word	0x40020000

08002c28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	2204      	movs	r2, #4
 8002c46:	409a      	lsls	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d04f      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc8>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d04a      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d107      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0204 	bic.w	r2, r2, #4
 8002c76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a66      	ldr	r2, [pc, #408]	@ (8002e18 <HAL_DMA_IRQHandler+0x1f0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d029      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xae>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a65      	ldr	r2, [pc, #404]	@ (8002e1c <HAL_DMA_IRQHandler+0x1f4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d022      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0xaa>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a63      	ldr	r2, [pc, #396]	@ (8002e20 <HAL_DMA_IRQHandler+0x1f8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01a      	beq.n	8002ccc <HAL_DMA_IRQHandler+0xa4>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a62      	ldr	r2, [pc, #392]	@ (8002e24 <HAL_DMA_IRQHandler+0x1fc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d012      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x9e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a60      	ldr	r2, [pc, #384]	@ (8002e28 <HAL_DMA_IRQHandler+0x200>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x98>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a5f      	ldr	r2, [pc, #380]	@ (8002e2c <HAL_DMA_IRQHandler+0x204>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d102      	bne.n	8002cba <HAL_DMA_IRQHandler+0x92>
 8002cb4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cb8:	e00e      	b.n	8002cd8 <HAL_DMA_IRQHandler+0xb0>
 8002cba:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002cbe:	e00b      	b.n	8002cd8 <HAL_DMA_IRQHandler+0xb0>
 8002cc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002cc4:	e008      	b.n	8002cd8 <HAL_DMA_IRQHandler+0xb0>
 8002cc6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002cca:	e005      	b.n	8002cd8 <HAL_DMA_IRQHandler+0xb0>
 8002ccc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cd0:	e002      	b.n	8002cd8 <HAL_DMA_IRQHandler+0xb0>
 8002cd2:	2340      	movs	r3, #64	@ 0x40
 8002cd4:	e000      	b.n	8002cd8 <HAL_DMA_IRQHandler+0xb0>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	4a55      	ldr	r2, [pc, #340]	@ (8002e30 <HAL_DMA_IRQHandler+0x208>)
 8002cda:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8094 	beq.w	8002e0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cee:	e08e      	b.n	8002e0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d056      	beq.n	8002dae <HAL_DMA_IRQHandler+0x186>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d051      	beq.n	8002dae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 020a 	bic.w	r2, r2, #10
 8002d26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a38      	ldr	r2, [pc, #224]	@ (8002e18 <HAL_DMA_IRQHandler+0x1f0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d029      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x166>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a37      	ldr	r2, [pc, #220]	@ (8002e1c <HAL_DMA_IRQHandler+0x1f4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x162>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a35      	ldr	r2, [pc, #212]	@ (8002e20 <HAL_DMA_IRQHandler+0x1f8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01a      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x15c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a34      	ldr	r2, [pc, #208]	@ (8002e24 <HAL_DMA_IRQHandler+0x1fc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d012      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x156>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a32      	ldr	r2, [pc, #200]	@ (8002e28 <HAL_DMA_IRQHandler+0x200>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00a      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x150>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a31      	ldr	r2, [pc, #196]	@ (8002e2c <HAL_DMA_IRQHandler+0x204>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d102      	bne.n	8002d72 <HAL_DMA_IRQHandler+0x14a>
 8002d6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d70:	e00e      	b.n	8002d90 <HAL_DMA_IRQHandler+0x168>
 8002d72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d76:	e00b      	b.n	8002d90 <HAL_DMA_IRQHandler+0x168>
 8002d78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d7c:	e008      	b.n	8002d90 <HAL_DMA_IRQHandler+0x168>
 8002d7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d82:	e005      	b.n	8002d90 <HAL_DMA_IRQHandler+0x168>
 8002d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d88:	e002      	b.n	8002d90 <HAL_DMA_IRQHandler+0x168>
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	e000      	b.n	8002d90 <HAL_DMA_IRQHandler+0x168>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	4a27      	ldr	r2, [pc, #156]	@ (8002e30 <HAL_DMA_IRQHandler+0x208>)
 8002d92:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d034      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002dac:	e02f      	b.n	8002e0e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	2208      	movs	r2, #8
 8002db4:	409a      	lsls	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d028      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x1e8>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d023      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 020e 	bic.w	r2, r2, #14
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f202 	lsl.w	r2, r1, r2
 8002de6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
    }
  }
  return;
 8002e0e:	bf00      	nop
 8002e10:	bf00      	nop
}
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40020008 	.word	0x40020008
 8002e1c:	4002001c 	.word	0x4002001c
 8002e20:	40020030 	.word	0x40020030
 8002e24:	40020044 	.word	0x40020044
 8002e28:	40020058 	.word	0x40020058
 8002e2c:	4002006c 	.word	0x4002006c
 8002e30:	40020000 	.word	0x40020000

08002e34 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d108      	bne.n	8002e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e72:	e007      	b.n	8002e84 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b08b      	sub	sp, #44	@ 0x2c
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea2:	e169      	b.n	8003178 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f040 8158 	bne.w	8003172 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4a9a      	ldr	r2, [pc, #616]	@ (8003130 <HAL_GPIO_Init+0x2a0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d05e      	beq.n	8002f8a <HAL_GPIO_Init+0xfa>
 8002ecc:	4a98      	ldr	r2, [pc, #608]	@ (8003130 <HAL_GPIO_Init+0x2a0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d875      	bhi.n	8002fbe <HAL_GPIO_Init+0x12e>
 8002ed2:	4a98      	ldr	r2, [pc, #608]	@ (8003134 <HAL_GPIO_Init+0x2a4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d058      	beq.n	8002f8a <HAL_GPIO_Init+0xfa>
 8002ed8:	4a96      	ldr	r2, [pc, #600]	@ (8003134 <HAL_GPIO_Init+0x2a4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d86f      	bhi.n	8002fbe <HAL_GPIO_Init+0x12e>
 8002ede:	4a96      	ldr	r2, [pc, #600]	@ (8003138 <HAL_GPIO_Init+0x2a8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d052      	beq.n	8002f8a <HAL_GPIO_Init+0xfa>
 8002ee4:	4a94      	ldr	r2, [pc, #592]	@ (8003138 <HAL_GPIO_Init+0x2a8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d869      	bhi.n	8002fbe <HAL_GPIO_Init+0x12e>
 8002eea:	4a94      	ldr	r2, [pc, #592]	@ (800313c <HAL_GPIO_Init+0x2ac>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d04c      	beq.n	8002f8a <HAL_GPIO_Init+0xfa>
 8002ef0:	4a92      	ldr	r2, [pc, #584]	@ (800313c <HAL_GPIO_Init+0x2ac>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d863      	bhi.n	8002fbe <HAL_GPIO_Init+0x12e>
 8002ef6:	4a92      	ldr	r2, [pc, #584]	@ (8003140 <HAL_GPIO_Init+0x2b0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d046      	beq.n	8002f8a <HAL_GPIO_Init+0xfa>
 8002efc:	4a90      	ldr	r2, [pc, #576]	@ (8003140 <HAL_GPIO_Init+0x2b0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d85d      	bhi.n	8002fbe <HAL_GPIO_Init+0x12e>
 8002f02:	2b12      	cmp	r3, #18
 8002f04:	d82a      	bhi.n	8002f5c <HAL_GPIO_Init+0xcc>
 8002f06:	2b12      	cmp	r3, #18
 8002f08:	d859      	bhi.n	8002fbe <HAL_GPIO_Init+0x12e>
 8002f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f10 <HAL_GPIO_Init+0x80>)
 8002f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f10:	08002f8b 	.word	0x08002f8b
 8002f14:	08002f65 	.word	0x08002f65
 8002f18:	08002f77 	.word	0x08002f77
 8002f1c:	08002fb9 	.word	0x08002fb9
 8002f20:	08002fbf 	.word	0x08002fbf
 8002f24:	08002fbf 	.word	0x08002fbf
 8002f28:	08002fbf 	.word	0x08002fbf
 8002f2c:	08002fbf 	.word	0x08002fbf
 8002f30:	08002fbf 	.word	0x08002fbf
 8002f34:	08002fbf 	.word	0x08002fbf
 8002f38:	08002fbf 	.word	0x08002fbf
 8002f3c:	08002fbf 	.word	0x08002fbf
 8002f40:	08002fbf 	.word	0x08002fbf
 8002f44:	08002fbf 	.word	0x08002fbf
 8002f48:	08002fbf 	.word	0x08002fbf
 8002f4c:	08002fbf 	.word	0x08002fbf
 8002f50:	08002fbf 	.word	0x08002fbf
 8002f54:	08002f6d 	.word	0x08002f6d
 8002f58:	08002f81 	.word	0x08002f81
 8002f5c:	4a79      	ldr	r2, [pc, #484]	@ (8003144 <HAL_GPIO_Init+0x2b4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f62:	e02c      	b.n	8002fbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	623b      	str	r3, [r7, #32]
          break;
 8002f6a:	e029      	b.n	8002fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	3304      	adds	r3, #4
 8002f72:	623b      	str	r3, [r7, #32]
          break;
 8002f74:	e024      	b.n	8002fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	623b      	str	r3, [r7, #32]
          break;
 8002f7e:	e01f      	b.n	8002fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	330c      	adds	r3, #12
 8002f86:	623b      	str	r3, [r7, #32]
          break;
 8002f88:	e01a      	b.n	8002fc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f92:	2304      	movs	r3, #4
 8002f94:	623b      	str	r3, [r7, #32]
          break;
 8002f96:	e013      	b.n	8002fc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fa0:	2308      	movs	r3, #8
 8002fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	611a      	str	r2, [r3, #16]
          break;
 8002faa:	e009      	b.n	8002fc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fac:	2308      	movs	r3, #8
 8002fae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69fa      	ldr	r2, [r7, #28]
 8002fb4:	615a      	str	r2, [r3, #20]
          break;
 8002fb6:	e003      	b.n	8002fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	623b      	str	r3, [r7, #32]
          break;
 8002fbc:	e000      	b.n	8002fc0 <HAL_GPIO_Init+0x130>
          break;
 8002fbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2bff      	cmp	r3, #255	@ 0xff
 8002fc4:	d801      	bhi.n	8002fca <HAL_GPIO_Init+0x13a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	e001      	b.n	8002fce <HAL_GPIO_Init+0x13e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2bff      	cmp	r3, #255	@ 0xff
 8002fd4:	d802      	bhi.n	8002fdc <HAL_GPIO_Init+0x14c>
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	e002      	b.n	8002fe2 <HAL_GPIO_Init+0x152>
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	3b08      	subs	r3, #8
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	210f      	movs	r1, #15
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	6a39      	ldr	r1, [r7, #32]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80b1 	beq.w	8003172 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003010:	4b4d      	ldr	r3, [pc, #308]	@ (8003148 <HAL_GPIO_Init+0x2b8>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	4a4c      	ldr	r2, [pc, #304]	@ (8003148 <HAL_GPIO_Init+0x2b8>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6193      	str	r3, [r2, #24]
 800301c:	4b4a      	ldr	r3, [pc, #296]	@ (8003148 <HAL_GPIO_Init+0x2b8>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003028:	4a48      	ldr	r2, [pc, #288]	@ (800314c <HAL_GPIO_Init+0x2bc>)
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	3302      	adds	r3, #2
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003034:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4013      	ands	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a40      	ldr	r2, [pc, #256]	@ (8003150 <HAL_GPIO_Init+0x2c0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_GPIO_Init+0x1ec>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a3f      	ldr	r2, [pc, #252]	@ (8003154 <HAL_GPIO_Init+0x2c4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00d      	beq.n	8003078 <HAL_GPIO_Init+0x1e8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a3e      	ldr	r2, [pc, #248]	@ (8003158 <HAL_GPIO_Init+0x2c8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <HAL_GPIO_Init+0x1e4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a3d      	ldr	r2, [pc, #244]	@ (800315c <HAL_GPIO_Init+0x2cc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_GPIO_Init+0x1e0>
 800306c:	2303      	movs	r3, #3
 800306e:	e006      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 8003070:	2304      	movs	r3, #4
 8003072:	e004      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 8003074:	2302      	movs	r3, #2
 8003076:	e002      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <HAL_GPIO_Init+0x1ee>
 800307c:	2300      	movs	r3, #0
 800307e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003080:	f002 0203 	and.w	r2, r2, #3
 8003084:	0092      	lsls	r2, r2, #2
 8003086:	4093      	lsls	r3, r2
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800308e:	492f      	ldr	r1, [pc, #188]	@ (800314c <HAL_GPIO_Init+0x2bc>)
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	089b      	lsrs	r3, r3, #2
 8003094:	3302      	adds	r3, #2
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	492c      	ldr	r1, [pc, #176]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]
 80030b4:	e006      	b.n	80030c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	43db      	mvns	r3, r3
 80030be:	4928      	ldr	r1, [pc, #160]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030d0:	4b23      	ldr	r3, [pc, #140]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	4922      	ldr	r1, [pc, #136]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60cb      	str	r3, [r1, #12]
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030de:	4b20      	ldr	r3, [pc, #128]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	491e      	ldr	r1, [pc, #120]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d006      	beq.n	8003106 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030f8:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4918      	ldr	r1, [pc, #96]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
 8003104:	e006      	b.n	8003114 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003106:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	43db      	mvns	r3, r3
 800310e:	4914      	ldr	r1, [pc, #80]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 8003110:	4013      	ands	r3, r2
 8003112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d021      	beq.n	8003164 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003120:	4b0f      	ldr	r3, [pc, #60]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	490e      	ldr	r1, [pc, #56]	@ (8003160 <HAL_GPIO_Init+0x2d0>)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]
 800312c:	e021      	b.n	8003172 <HAL_GPIO_Init+0x2e2>
 800312e:	bf00      	nop
 8003130:	10320000 	.word	0x10320000
 8003134:	10310000 	.word	0x10310000
 8003138:	10220000 	.word	0x10220000
 800313c:	10210000 	.word	0x10210000
 8003140:	10120000 	.word	0x10120000
 8003144:	10110000 	.word	0x10110000
 8003148:	40021000 	.word	0x40021000
 800314c:	40010000 	.word	0x40010000
 8003150:	40010800 	.word	0x40010800
 8003154:	40010c00 	.word	0x40010c00
 8003158:	40011000 	.word	0x40011000
 800315c:	40011400 	.word	0x40011400
 8003160:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003164:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <HAL_GPIO_Init+0x304>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	43db      	mvns	r3, r3
 800316c:	4909      	ldr	r1, [pc, #36]	@ (8003194 <HAL_GPIO_Init+0x304>)
 800316e:	4013      	ands	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	3301      	adds	r3, #1
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	f47f ae8e 	bne.w	8002ea4 <HAL_GPIO_Init+0x14>
  }
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	372c      	adds	r7, #44	@ 0x2c
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	40010400 	.word	0x40010400

08003198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	807b      	strh	r3, [r7, #2]
 80031a4:	4613      	mov	r3, r2
 80031a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031a8:	787b      	ldrb	r3, [r7, #1]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ae:	887a      	ldrh	r2, [r7, #2]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031b4:	e003      	b.n	80031be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031b6:	887b      	ldrh	r3, [r7, #2]
 80031b8:	041a      	lsls	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	611a      	str	r2, [r3, #16]
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr

080031c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e272      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8087 	beq.w	80032f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e8:	4b92      	ldr	r3, [pc, #584]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d00c      	beq.n	800320e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d112      	bne.n	8003226 <HAL_RCC_OscConfig+0x5e>
 8003200:	4b8c      	ldr	r3, [pc, #560]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320c:	d10b      	bne.n	8003226 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320e:	4b89      	ldr	r3, [pc, #548]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d06c      	beq.n	80032f4 <HAL_RCC_OscConfig+0x12c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d168      	bne.n	80032f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e24c      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322e:	d106      	bne.n	800323e <HAL_RCC_OscConfig+0x76>
 8003230:	4b80      	ldr	r3, [pc, #512]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a7f      	ldr	r2, [pc, #508]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	e02e      	b.n	800329c <HAL_RCC_OscConfig+0xd4>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x98>
 8003246:	4b7b      	ldr	r3, [pc, #492]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7a      	ldr	r2, [pc, #488]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 800324c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b78      	ldr	r3, [pc, #480]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a77      	ldr	r2, [pc, #476]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003258:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e01d      	b.n	800329c <HAL_RCC_OscConfig+0xd4>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003268:	d10c      	bne.n	8003284 <HAL_RCC_OscConfig+0xbc>
 800326a:	4b72      	ldr	r3, [pc, #456]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a71      	ldr	r2, [pc, #452]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	4b6f      	ldr	r3, [pc, #444]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6e      	ldr	r2, [pc, #440]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0xd4>
 8003284:	4b6b      	ldr	r3, [pc, #428]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6a      	ldr	r2, [pc, #424]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b68      	ldr	r3, [pc, #416]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a67      	ldr	r2, [pc, #412]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800329a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7fe fc90 	bl	8001bc8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fe fc8c 	bl	8001bc8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e200      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b5d      	ldr	r3, [pc, #372]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0xe4>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fe fc7c 	bl	8001bc8 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe fc78 	bl	8001bc8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	@ 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e1ec      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	4b53      	ldr	r3, [pc, #332]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x10c>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d063      	beq.n	80033ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003302:	4b4c      	ldr	r3, [pc, #304]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800330e:	4b49      	ldr	r3, [pc, #292]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b08      	cmp	r3, #8
 8003318:	d11c      	bne.n	8003354 <HAL_RCC_OscConfig+0x18c>
 800331a:	4b46      	ldr	r3, [pc, #280]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d116      	bne.n	8003354 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	4b43      	ldr	r3, [pc, #268]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_RCC_OscConfig+0x176>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d001      	beq.n	800333e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e1c0      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333e:	4b3d      	ldr	r3, [pc, #244]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4939      	ldr	r1, [pc, #228]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	e03a      	b.n	80033ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800335c:	4b36      	ldr	r3, [pc, #216]	@ (8003438 <HAL_RCC_OscConfig+0x270>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe fc31 	bl	8001bc8 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336a:	f7fe fc2d 	bl	8001bc8 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e1a1      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	4b2d      	ldr	r3, [pc, #180]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003388:	4b2a      	ldr	r3, [pc, #168]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4927      	ldr	r1, [pc, #156]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]
 800339c:	e015      	b.n	80033ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339e:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <HAL_RCC_OscConfig+0x270>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe fc10 	bl	8001bc8 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ac:	f7fe fc0c 	bl	8001bc8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e180      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	4b1d      	ldr	r3, [pc, #116]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d03a      	beq.n	800344c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d019      	beq.n	8003412 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033de:	4b17      	ldr	r3, [pc, #92]	@ (800343c <HAL_RCC_OscConfig+0x274>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e4:	f7fe fbf0 	bl	8001bc8 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ec:	f7fe fbec 	bl	8001bc8 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e160      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <HAL_RCC_OscConfig+0x26c>)
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800340a:	2001      	movs	r0, #1
 800340c:	f000 face 	bl	80039ac <RCC_Delay>
 8003410:	e01c      	b.n	800344c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003412:	4b0a      	ldr	r3, [pc, #40]	@ (800343c <HAL_RCC_OscConfig+0x274>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003418:	f7fe fbd6 	bl	8001bc8 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341e:	e00f      	b.n	8003440 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003420:	f7fe fbd2 	bl	8001bc8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d908      	bls.n	8003440 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e146      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	42420000 	.word	0x42420000
 800343c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003440:	4b92      	ldr	r3, [pc, #584]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e9      	bne.n	8003420 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80a6 	beq.w	80035a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345e:	4b8b      	ldr	r3, [pc, #556]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10d      	bne.n	8003486 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346a:	4b88      	ldr	r3, [pc, #544]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	4a87      	ldr	r2, [pc, #540]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003474:	61d3      	str	r3, [r2, #28]
 8003476:	4b85      	ldr	r3, [pc, #532]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003482:	2301      	movs	r3, #1
 8003484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003486:	4b82      	ldr	r3, [pc, #520]	@ (8003690 <HAL_RCC_OscConfig+0x4c8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d118      	bne.n	80034c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003492:	4b7f      	ldr	r3, [pc, #508]	@ (8003690 <HAL_RCC_OscConfig+0x4c8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a7e      	ldr	r2, [pc, #504]	@ (8003690 <HAL_RCC_OscConfig+0x4c8>)
 8003498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349e:	f7fe fb93 	bl	8001bc8 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a6:	f7fe fb8f 	bl	8001bc8 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b64      	cmp	r3, #100	@ 0x64
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e103      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	4b75      	ldr	r3, [pc, #468]	@ (8003690 <HAL_RCC_OscConfig+0x4c8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d106      	bne.n	80034da <HAL_RCC_OscConfig+0x312>
 80034cc:	4b6f      	ldr	r3, [pc, #444]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a6e      	ldr	r2, [pc, #440]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	e02d      	b.n	8003536 <HAL_RCC_OscConfig+0x36e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10c      	bne.n	80034fc <HAL_RCC_OscConfig+0x334>
 80034e2:	4b6a      	ldr	r3, [pc, #424]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4a69      	ldr	r2, [pc, #420]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6213      	str	r3, [r2, #32]
 80034ee:	4b67      	ldr	r3, [pc, #412]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4a66      	ldr	r2, [pc, #408]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	f023 0304 	bic.w	r3, r3, #4
 80034f8:	6213      	str	r3, [r2, #32]
 80034fa:	e01c      	b.n	8003536 <HAL_RCC_OscConfig+0x36e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b05      	cmp	r3, #5
 8003502:	d10c      	bne.n	800351e <HAL_RCC_OscConfig+0x356>
 8003504:	4b61      	ldr	r3, [pc, #388]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4a60      	ldr	r2, [pc, #384]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 800350a:	f043 0304 	orr.w	r3, r3, #4
 800350e:	6213      	str	r3, [r2, #32]
 8003510:	4b5e      	ldr	r3, [pc, #376]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	4a5d      	ldr	r2, [pc, #372]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6213      	str	r3, [r2, #32]
 800351c:	e00b      	b.n	8003536 <HAL_RCC_OscConfig+0x36e>
 800351e:	4b5b      	ldr	r3, [pc, #364]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a5a      	ldr	r2, [pc, #360]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	6213      	str	r3, [r2, #32]
 800352a:	4b58      	ldr	r3, [pc, #352]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a57      	ldr	r2, [pc, #348]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d015      	beq.n	800356a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fe fb43 	bl	8001bc8 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe fb3f 	bl	8001bc8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e0b1      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	4b4b      	ldr	r3, [pc, #300]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ee      	beq.n	8003546 <HAL_RCC_OscConfig+0x37e>
 8003568:	e014      	b.n	8003594 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fe fb2d 	bl	8001bc8 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003570:	e00a      	b.n	8003588 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fe fb29 	bl	8001bc8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e09b      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003588:	4b40      	ldr	r3, [pc, #256]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ee      	bne.n	8003572 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003594:	7dfb      	ldrb	r3, [r7, #23]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d105      	bne.n	80035a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359a:	4b3c      	ldr	r3, [pc, #240]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	4a3b      	ldr	r2, [pc, #236]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8087 	beq.w	80036be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b0:	4b36      	ldr	r3, [pc, #216]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d061      	beq.n	8003680 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d146      	bne.n	8003652 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c4:	4b33      	ldr	r3, [pc, #204]	@ (8003694 <HAL_RCC_OscConfig+0x4cc>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fe fafd 	bl	8001bc8 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fe faf9 	bl	8001bc8 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e06d      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e4:	4b29      	ldr	r3, [pc, #164]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f0      	bne.n	80035d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f8:	d108      	bne.n	800360c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035fa:	4b24      	ldr	r3, [pc, #144]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4921      	ldr	r1, [pc, #132]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360c:	4b1f      	ldr	r3, [pc, #124]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a19      	ldr	r1, [r3, #32]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	430b      	orrs	r3, r1
 800361e:	491b      	ldr	r1, [pc, #108]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003624:	4b1b      	ldr	r3, [pc, #108]	@ (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362a:	f7fe facd 	bl	8001bc8 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003632:	f7fe fac9 	bl	8001bc8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e03d      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003644:	4b11      	ldr	r3, [pc, #68]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x46a>
 8003650:	e035      	b.n	80036be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003652:	4b10      	ldr	r3, [pc, #64]	@ (8003694 <HAL_RCC_OscConfig+0x4cc>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fab6 	bl	8001bc8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003660:	f7fe fab2 	bl	8001bc8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e026      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003672:	4b06      	ldr	r3, [pc, #24]	@ (800368c <HAL_RCC_OscConfig+0x4c4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x498>
 800367e:	e01e      	b.n	80036be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d107      	bne.n	8003698 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e019      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
 800368c:	40021000 	.word	0x40021000
 8003690:	40007000 	.word	0x40007000
 8003694:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003698:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <HAL_RCC_OscConfig+0x500>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d001      	beq.n	80036be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000

080036cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0d0      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b6a      	ldr	r3, [pc, #424]	@ (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d910      	bls.n	8003710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b67      	ldr	r3, [pc, #412]	@ (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 0207 	bic.w	r2, r3, #7
 80036f6:	4965      	ldr	r1, [pc, #404]	@ (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b63      	ldr	r3, [pc, #396]	@ (800388c <HAL_RCC_ClockConfig+0x1c0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0b8      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d020      	beq.n	800375e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003728:	4b59      	ldr	r3, [pc, #356]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a58      	ldr	r2, [pc, #352]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003732:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003740:	4b53      	ldr	r3, [pc, #332]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a52      	ldr	r2, [pc, #328]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800374a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800374c:	4b50      	ldr	r3, [pc, #320]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	494d      	ldr	r1, [pc, #308]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d040      	beq.n	80037ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d107      	bne.n	8003782 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	4b47      	ldr	r3, [pc, #284]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d115      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e07f      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378a:	4b41      	ldr	r3, [pc, #260]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e073      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379a:	4b3d      	ldr	r3, [pc, #244]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e06b      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037aa:	4b39      	ldr	r3, [pc, #228]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f023 0203 	bic.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4936      	ldr	r1, [pc, #216]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037bc:	f7fe fa04 	bl	8001bc8 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	e00a      	b.n	80037da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fe fa00 	bl	8001bc8 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e053      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	4b2d      	ldr	r3, [pc, #180]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 020c 	and.w	r2, r3, #12
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d1eb      	bne.n	80037c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037ec:	4b27      	ldr	r3, [pc, #156]	@ (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d210      	bcs.n	800381c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b24      	ldr	r3, [pc, #144]	@ (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 0207 	bic.w	r2, r3, #7
 8003802:	4922      	ldr	r1, [pc, #136]	@ (800388c <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b20      	ldr	r3, [pc, #128]	@ (800388c <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e032      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003828:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4916      	ldr	r1, [pc, #88]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003846:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	490e      	ldr	r1, [pc, #56]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800385a:	f000 f821 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 800385e:	4602      	mov	r2, r0
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	490a      	ldr	r1, [pc, #40]	@ (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 800386c:	5ccb      	ldrb	r3, [r1, r3]
 800386e:	fa22 f303 	lsr.w	r3, r2, r3
 8003872:	4a09      	ldr	r2, [pc, #36]	@ (8003898 <HAL_RCC_ClockConfig+0x1cc>)
 8003874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003876:	4b09      	ldr	r3, [pc, #36]	@ (800389c <HAL_RCC_ClockConfig+0x1d0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe f962 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40022000 	.word	0x40022000
 8003890:	40021000 	.word	0x40021000
 8003894:	08006ba8 	.word	0x08006ba8
 8003898:	2000000c 	.word	0x2000000c
 800389c:	20000010 	.word	0x20000010

080038a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	2300      	movs	r3, #0
 80038ac:	60bb      	str	r3, [r7, #8]
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x94>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x30>
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x36>
 80038ce:	e027      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x98>)
 80038d2:	613b      	str	r3, [r7, #16]
      break;
 80038d4:	e027      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	0c9b      	lsrs	r3, r3, #18
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	4a17      	ldr	r2, [pc, #92]	@ (800393c <HAL_RCC_GetSysClockFreq+0x9c>)
 80038e0:	5cd3      	ldrb	r3, [r2, r3]
 80038e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ee:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x94>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	0c5b      	lsrs	r3, r3, #17
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	4a11      	ldr	r2, [pc, #68]	@ (8003940 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038fa:	5cd3      	ldrb	r3, [r2, r3]
 80038fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a0d      	ldr	r2, [pc, #52]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x98>)
 8003902:	fb03 f202 	mul.w	r2, r3, r2
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e004      	b.n	800391a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0c      	ldr	r2, [pc, #48]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	613b      	str	r3, [r7, #16]
      break;
 800391e:	e002      	b.n	8003926 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x98>)
 8003922:	613b      	str	r3, [r7, #16]
      break;
 8003924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003926:	693b      	ldr	r3, [r7, #16]
}
 8003928:	4618      	mov	r0, r3
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	007a1200 	.word	0x007a1200
 800393c:	08006bc0 	.word	0x08006bc0
 8003940:	08006bd0 	.word	0x08006bd0
 8003944:	003d0900 	.word	0x003d0900

08003948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800394c:	4b02      	ldr	r3, [pc, #8]	@ (8003958 <HAL_RCC_GetHCLKFreq+0x10>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	2000000c 	.word	0x2000000c

0800395c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003960:	f7ff fff2 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4903      	ldr	r1, [pc, #12]	@ (8003980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000
 8003980:	08006bb8 	.word	0x08006bb8

08003984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003988:	f7ff ffde 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	0adb      	lsrs	r3, r3, #11
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4903      	ldr	r1, [pc, #12]	@ (80039a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000
 80039a8:	08006bb8 	.word	0x08006bb8

080039ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039b4:	4b0a      	ldr	r3, [pc, #40]	@ (80039e0 <RCC_Delay+0x34>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0a      	ldr	r2, [pc, #40]	@ (80039e4 <RCC_Delay+0x38>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0a5b      	lsrs	r3, r3, #9
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039c8:	bf00      	nop
  }
  while (Delay --);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	60fa      	str	r2, [r7, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f9      	bne.n	80039c8 <RCC_Delay+0x1c>
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	2000000c 	.word	0x2000000c
 80039e4:	10624dd3 	.word	0x10624dd3

080039e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d07d      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a04:	2300      	movs	r3, #0
 8003a06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a08:	4b4f      	ldr	r3, [pc, #316]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10d      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b4c      	ldr	r3, [pc, #304]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	4a4b      	ldr	r2, [pc, #300]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	61d3      	str	r3, [r2, #28]
 8003a20:	4b49      	ldr	r3, [pc, #292]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	4b46      	ldr	r3, [pc, #280]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d118      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3c:	4b43      	ldr	r3, [pc, #268]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a42      	ldr	r2, [pc, #264]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a48:	f7fe f8be 	bl	8001bc8 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	e008      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a50:	f7fe f8ba 	bl	8001bc8 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	@ 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e06d      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	4b3a      	ldr	r3, [pc, #232]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a6e:	4b36      	ldr	r3, [pc, #216]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d02e      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d027      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a96:	4b2e      	ldr	r3, [pc, #184]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003aa2:	4a29      	ldr	r2, [pc, #164]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d014      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7fe f889 	bl	8001bc8 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fe f885 	bl	8001bc8 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e036      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ee      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003adc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4917      	ldr	r1, [pc, #92]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af4:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	4a13      	ldr	r2, [pc, #76]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	490b      	ldr	r1, [pc, #44]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b2a:	4b07      	ldr	r3, [pc, #28]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	4904      	ldr	r1, [pc, #16]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	42420440 	.word	0x42420440

08003b54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	f200 808a 	bhi.w	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d045      	beq.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d075      	beq.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b8a:	e082      	b.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b8c:	4b46      	ldr	r3, [pc, #280]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b92:	4b45      	ldr	r3, [pc, #276]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d07b      	beq.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	0c9b      	lsrs	r3, r3, #18
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	4a41      	ldr	r2, [pc, #260]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003ba8:	5cd3      	ldrb	r3, [r2, r3]
 8003baa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d015      	beq.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	0c5b      	lsrs	r3, r3, #17
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00d      	beq.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bd0:	4a38      	ldr	r2, [pc, #224]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	e004      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4a34      	ldr	r2, [pc, #208]	@ (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bec:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bf8:	d102      	bne.n	8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	61bb      	str	r3, [r7, #24]
      break;
 8003bfe:	e04a      	b.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4a2d      	ldr	r2, [pc, #180]	@ (8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	61bb      	str	r3, [r7, #24]
      break;
 8003c0e:	e042      	b.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003c10:	4b25      	ldr	r3, [pc, #148]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c20:	d108      	bne.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e01f      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c3e:	d109      	bne.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c40:	4b19      	ldr	r3, [pc, #100]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003c4c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e00f      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c5e:	d11c      	bne.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c60:	4b11      	ldr	r3, [pc, #68]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d016      	beq.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c6c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003c70:	61bb      	str	r3, [r7, #24]
      break;
 8003c72:	e012      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c74:	e011      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c76:	f7ff fe85 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	0b9b      	lsrs	r3, r3, #14
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8e:	61bb      	str	r3, [r7, #24]
      break;
 8003c90:	e004      	b.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c9a:	bf00      	nop
    }
  }
  return (frequency);
 8003c9c:	69bb      	ldr	r3, [r7, #24]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	08006bd4 	.word	0x08006bd4
 8003cb0:	08006be4 	.word	0x08006be4
 8003cb4:	007a1200 	.word	0x007a1200
 8003cb8:	003d0900 	.word	0x003d0900
 8003cbc:	aaaaaaab 	.word	0xaaaaaaab

08003cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e076      	b.n	8003dc0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d108      	bne.n	8003cec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ce2:	d009      	beq.n	8003cf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	61da      	str	r2, [r3, #28]
 8003cea:	e005      	b.n	8003cf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd faac 	bl	8001270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7c:	ea42 0103 	orr.w	r1, r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	0c1a      	lsrs	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f002 0204 	and.w	r2, r2, #4
 8003d9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dd8:	f7fd fef6 	bl	8001bc8 <HAL_GetTick>
 8003ddc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d001      	beq.n	8003df2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
 8003df0:	e12a      	b.n	8004048 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_SPI_Transmit+0x36>
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e122      	b.n	8004048 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_SPI_Transmit+0x48>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e11b      	b.n	8004048 <HAL_SPI_Transmit+0x280>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e5e:	d10f      	bne.n	8003e80 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8a:	2b40      	cmp	r3, #64	@ 0x40
 8003e8c:	d007      	beq.n	8003e9e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea6:	d152      	bne.n	8003f4e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_SPI_Transmit+0xee>
 8003eb0:	8b7b      	ldrh	r3, [r7, #26]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d145      	bne.n	8003f42 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	881a      	ldrh	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	1c9a      	adds	r2, r3, #2
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eda:	e032      	b.n	8003f42 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d112      	bne.n	8003f10 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eee:	881a      	ldrh	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	1c9a      	adds	r2, r3, #2
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f0e:	e018      	b.n	8003f42 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f10:	f7fd fe5a 	bl	8001bc8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d803      	bhi.n	8003f28 <HAL_SPI_Transmit+0x160>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d102      	bne.n	8003f2e <HAL_SPI_Transmit+0x166>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e082      	b.n	8004048 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1c7      	bne.n	8003edc <HAL_SPI_Transmit+0x114>
 8003f4c:	e053      	b.n	8003ff6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_SPI_Transmit+0x194>
 8003f56:	8b7b      	ldrh	r3, [r7, #26]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d147      	bne.n	8003fec <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	7812      	ldrb	r2, [r2, #0]
 8003f68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f82:	e033      	b.n	8003fec <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d113      	bne.n	8003fba <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fb8:	e018      	b.n	8003fec <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fba:	f7fd fe05 	bl	8001bc8 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d803      	bhi.n	8003fd2 <HAL_SPI_Transmit+0x20a>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd0:	d102      	bne.n	8003fd8 <HAL_SPI_Transmit+0x210>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e02d      	b.n	8004048 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1c6      	bne.n	8003f84 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	6839      	ldr	r1, [r7, #0]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fbc4 	bl	8004788 <SPI_EndRxTxTransaction>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004046:	2300      	movs	r3, #0
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3720      	adds	r7, #32
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d001      	beq.n	8004070 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
 800406e:	e104      	b.n	800427a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004078:	d112      	bne.n	80040a0 <HAL_SPI_Receive+0x50>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10e      	bne.n	80040a0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2204      	movs	r2, #4
 8004086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f8f3 	bl	8004282 <HAL_SPI_TransmitReceive>
 800409c:	4603      	mov	r3, r0
 800409e:	e0ec      	b.n	800427a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040a0:	f7fd fd92 	bl	8001bc8 <HAL_GetTick>
 80040a4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_Receive+0x62>
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e0e1      	b.n	800427a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_SPI_Receive+0x74>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e0da      	b.n	800427a <HAL_SPI_Receive+0x22a>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2204      	movs	r2, #4
 80040d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	88fa      	ldrh	r2, [r7, #6]
 80040e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004112:	d10f      	bne.n	8004134 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004122:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004132:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413e:	2b40      	cmp	r3, #64	@ 0x40
 8004140:	d007      	beq.n	8004152 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004150:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d170      	bne.n	800423c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800415a:	e035      	b.n	80041c8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b01      	cmp	r3, #1
 8004168:	d115      	bne.n	8004196 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f103 020c 	add.w	r2, r3, #12
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004194:	e018      	b.n	80041c8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004196:	f7fd fd17 	bl	8001bc8 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d803      	bhi.n	80041ae <HAL_SPI_Receive+0x15e>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d102      	bne.n	80041b4 <HAL_SPI_Receive+0x164>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e058      	b.n	800427a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1c4      	bne.n	800415c <HAL_SPI_Receive+0x10c>
 80041d2:	e038      	b.n	8004246 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d113      	bne.n	800420a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ec:	b292      	uxth	r2, r2
 80041ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f4:	1c9a      	adds	r2, r3, #2
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004208:	e018      	b.n	800423c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800420a:	f7fd fcdd 	bl	8001bc8 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d803      	bhi.n	8004222 <HAL_SPI_Receive+0x1d2>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d102      	bne.n	8004228 <HAL_SPI_Receive+0x1d8>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e01e      	b.n	800427a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1c6      	bne.n	80041d4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fa4a 	bl	80046e4 <SPI_EndRxTransaction>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004278:	2300      	movs	r3, #0
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b08a      	sub	sp, #40	@ 0x28
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004290:	2301      	movs	r3, #1
 8004292:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004294:	f7fd fc98 	bl	8001bc8 <HAL_GetTick>
 8004298:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042a0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80042a8:	887b      	ldrh	r3, [r7, #2]
 80042aa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042ac:	7ffb      	ldrb	r3, [r7, #31]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d00c      	beq.n	80042cc <HAL_SPI_TransmitReceive+0x4a>
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042b8:	d106      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x46>
 80042c2:	7ffb      	ldrb	r3, [r7, #31]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d001      	beq.n	80042cc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
 80042ca:	e17f      	b.n	80045cc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_SPI_TransmitReceive+0x5c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_SPI_TransmitReceive+0x5c>
 80042d8:	887b      	ldrh	r3, [r7, #2]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e174      	b.n	80045cc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x6e>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e16d      	b.n	80045cc <HAL_SPI_TransmitReceive+0x34a>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b04      	cmp	r3, #4
 8004302:	d003      	beq.n	800430c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2205      	movs	r2, #5
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	887a      	ldrh	r2, [r7, #2]
 800431c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	887a      	ldrh	r2, [r7, #2]
 8004322:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	887a      	ldrh	r2, [r7, #2]
 800432e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434c:	2b40      	cmp	r3, #64	@ 0x40
 800434e:	d007      	beq.n	8004360 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004368:	d17e      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_SPI_TransmitReceive+0xf6>
 8004372:	8afb      	ldrh	r3, [r7, #22]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d16c      	bne.n	8004452 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437c:	881a      	ldrh	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	1c9a      	adds	r2, r3, #2
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800439c:	e059      	b.n	8004452 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d11b      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x162>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_SPI_TransmitReceive+0x162>
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d113      	bne.n	80043e4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	881a      	ldrh	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	1c9a      	adds	r2, r3, #2
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d119      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x1a4>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d014      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004406:	b292      	uxth	r2, r2
 8004408:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440e:	1c9a      	adds	r2, r3, #2
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004422:	2301      	movs	r3, #1
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004426:	f7fd fbcf 	bl	8001bc8 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004432:	429a      	cmp	r2, r3
 8004434:	d80d      	bhi.n	8004452 <HAL_SPI_TransmitReceive+0x1d0>
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d009      	beq.n	8004452 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0bc      	b.n	80045cc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1a0      	bne.n	800439e <HAL_SPI_TransmitReceive+0x11c>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d19b      	bne.n	800439e <HAL_SPI_TransmitReceive+0x11c>
 8004466:	e082      	b.n	800456e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x1f4>
 8004470:	8afb      	ldrh	r3, [r7, #22]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d171      	bne.n	800455a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	330c      	adds	r3, #12
 8004480:	7812      	ldrb	r2, [r2, #0]
 8004482:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800449c:	e05d      	b.n	800455a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d11c      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x264>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d017      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0x264>
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d114      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d119      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x2a6>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d014      	beq.n	8004528 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004524:	2301      	movs	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004528:	f7fd fb4e 	bl	8001bc8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004534:	429a      	cmp	r2, r3
 8004536:	d803      	bhi.n	8004540 <HAL_SPI_TransmitReceive+0x2be>
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d102      	bne.n	8004546 <HAL_SPI_TransmitReceive+0x2c4>
 8004540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e038      	b.n	80045cc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d19c      	bne.n	800449e <HAL_SPI_TransmitReceive+0x21c>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d197      	bne.n	800449e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800456e:	6a3a      	ldr	r2, [r7, #32]
 8004570:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f908 	bl	8004788 <SPI_EndRxTxTransaction>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e01d      	b.n	80045cc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80045ca:	2300      	movs	r3, #0
  }
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3728      	adds	r7, #40	@ 0x28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045e4:	f7fd faf0 	bl	8001bc8 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	4413      	add	r3, r2
 80045f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045f4:	f7fd fae8 	bl	8001bc8 <HAL_GetTick>
 80045f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045fa:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	015b      	lsls	r3, r3, #5
 8004600:	0d1b      	lsrs	r3, r3, #20
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800460a:	e054      	b.n	80046b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d050      	beq.n	80046b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004614:	f7fd fad8 	bl	8001bc8 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	429a      	cmp	r2, r3
 8004622:	d902      	bls.n	800462a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d13d      	bne.n	80046a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004642:	d111      	bne.n	8004668 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800464c:	d004      	beq.n	8004658 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004656:	d107      	bne.n	8004668 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004666:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004670:	d10f      	bne.n	8004692 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e017      	b.n	80046d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4013      	ands	r3, r2
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	bf0c      	ite	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	2300      	movne	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d19b      	bne.n	800460c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2000000c 	.word	0x2000000c

080046e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046f8:	d111      	bne.n	800471e <SPI_EndRxTransaction+0x3a>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004702:	d004      	beq.n	800470e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470c:	d107      	bne.n	800471e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800471c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004726:	d117      	bne.n	8004758 <SPI_EndRxTransaction+0x74>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004730:	d112      	bne.n	8004758 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2200      	movs	r2, #0
 800473a:	2101      	movs	r1, #1
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff ff49 	bl	80045d4 <SPI_WaitFlagStateUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01a      	beq.n	800477e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e013      	b.n	8004780 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2200      	movs	r2, #0
 8004760:	2180      	movs	r1, #128	@ 0x80
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff ff36 	bl	80045d4 <SPI_WaitFlagStateUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e000      	b.n	8004780 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2201      	movs	r2, #1
 800479c:	2102      	movs	r1, #2
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff ff18 	bl	80045d4 <SPI_WaitFlagStateUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e013      	b.n	80047e2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2200      	movs	r2, #0
 80047c2:	2180      	movs	r1, #128	@ 0x80
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7ff ff05 	bl	80045d4 <SPI_WaitFlagStateUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d4:	f043 0220 	orr.w	r2, r3, #32
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e000      	b.n	80047e2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e041      	b.n	8004880 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7fc feef 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3304      	adds	r3, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f000 fa5b 	bl	8004ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d001      	beq.n	80048a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e03a      	b.n	8004916 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a18      	ldr	r2, [pc, #96]	@ (8004920 <HAL_TIM_Base_Start_IT+0x98>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00e      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x58>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ca:	d009      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x58>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a14      	ldr	r2, [pc, #80]	@ (8004924 <HAL_TIM_Base_Start_IT+0x9c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x58>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a13      	ldr	r2, [pc, #76]	@ (8004928 <HAL_TIM_Base_Start_IT+0xa0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d111      	bne.n	8004904 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d010      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	e007      	b.n	8004914 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800

0800492c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0202 	mvn.w	r2, #2
 8004960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f998 	bl	8004cac <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f98b 	bl	8004c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f99a 	bl	8004cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0204 	mvn.w	r2, #4
 80049ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f972 	bl	8004cac <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f965 	bl	8004c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f974 	bl	8004cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0208 	mvn.w	r2, #8
 80049f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2204      	movs	r2, #4
 80049fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f94c 	bl	8004cac <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f93f 	bl	8004c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f94e 	bl	8004cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d020      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01b      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0210 	mvn.w	r2, #16
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f926 	bl	8004cac <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f919 	bl	8004c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f928 	bl	8004cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0201 	mvn.w	r2, #1
 8004a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc fb3a 	bl	800110c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00c      	beq.n	8004abc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa7f 	bl	8004fba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8f8 	bl	8004cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00c      	beq.n	8004b04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d007      	beq.n	8004b04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0220 	mvn.w	r2, #32
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa52 	bl	8004fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_TIM_ConfigClockSource+0x1c>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e0b4      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x186>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b60:	d03e      	beq.n	8004be0 <HAL_TIM_ConfigClockSource+0xd4>
 8004b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b66:	f200 8087 	bhi.w	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b6e:	f000 8086 	beq.w	8004c7e <HAL_TIM_ConfigClockSource+0x172>
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b76:	d87f      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b70      	cmp	r3, #112	@ 0x70
 8004b7a:	d01a      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0xa6>
 8004b7c:	2b70      	cmp	r3, #112	@ 0x70
 8004b7e:	d87b      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b60      	cmp	r3, #96	@ 0x60
 8004b82:	d050      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0x11a>
 8004b84:	2b60      	cmp	r3, #96	@ 0x60
 8004b86:	d877      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b50      	cmp	r3, #80	@ 0x50
 8004b8a:	d03c      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0xfa>
 8004b8c:	2b50      	cmp	r3, #80	@ 0x50
 8004b8e:	d873      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b40      	cmp	r3, #64	@ 0x40
 8004b92:	d058      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x13a>
 8004b94:	2b40      	cmp	r3, #64	@ 0x40
 8004b96:	d86f      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b30      	cmp	r3, #48	@ 0x30
 8004b9a:	d064      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15a>
 8004b9c:	2b30      	cmp	r3, #48	@ 0x30
 8004b9e:	d86b      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d060      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15a>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d867      	bhi.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d05c      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15a>
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d05a      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	e062      	b.n	8004c78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc2:	f000 f974 	bl	8004eae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	609a      	str	r2, [r3, #8]
      break;
 8004bde:	e04f      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bf0:	f000 f95d 	bl	8004eae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c02:	609a      	str	r2, [r3, #8]
      break;
 8004c04:	e03c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	461a      	mov	r2, r3
 8004c14:	f000 f8d4 	bl	8004dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2150      	movs	r1, #80	@ 0x50
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f92b 	bl	8004e7a <TIM_ITRx_SetConfig>
      break;
 8004c24:	e02c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 f8f2 	bl	8004e1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2160      	movs	r1, #96	@ 0x60
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 f91b 	bl	8004e7a <TIM_ITRx_SetConfig>
      break;
 8004c44:	e01c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 f8b4 	bl	8004dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2140      	movs	r1, #64	@ 0x40
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f90b 	bl	8004e7a <TIM_ITRx_SetConfig>
      break;
 8004c64:	e00c      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f000 f902 	bl	8004e7a <TIM_ITRx_SetConfig>
      break;
 8004c76:	e003      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	e000      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
	...

08004ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a2f      	ldr	r2, [pc, #188]	@ (8004db4 <TIM_Base_SetConfig+0xd0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00b      	beq.n	8004d14 <TIM_Base_SetConfig+0x30>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d02:	d007      	beq.n	8004d14 <TIM_Base_SetConfig+0x30>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <TIM_Base_SetConfig+0xd4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d003      	beq.n	8004d14 <TIM_Base_SetConfig+0x30>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004dbc <TIM_Base_SetConfig+0xd8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d108      	bne.n	8004d26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a22      	ldr	r2, [pc, #136]	@ (8004db4 <TIM_Base_SetConfig+0xd0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <TIM_Base_SetConfig+0x62>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d34:	d007      	beq.n	8004d46 <TIM_Base_SetConfig+0x62>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a1f      	ldr	r2, [pc, #124]	@ (8004db8 <TIM_Base_SetConfig+0xd4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_Base_SetConfig+0x62>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a1e      	ldr	r2, [pc, #120]	@ (8004dbc <TIM_Base_SetConfig+0xd8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d108      	bne.n	8004d58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004db4 <TIM_Base_SetConfig+0xd0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d103      	bne.n	8004d8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f023 0201 	bic.w	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	611a      	str	r2, [r3, #16]
  }
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	40012c00 	.word	0x40012c00
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800

08004dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f023 0201 	bic.w	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f023 030a 	bic.w	r3, r3, #10
 8004dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f023 0210 	bic.w	r2, r3, #16
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	031b      	lsls	r3, r3, #12
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	621a      	str	r2, [r3, #32]
}
 8004e70:	bf00      	nop
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr

08004e7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f043 0307 	orr.w	r3, r3, #7
 8004e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	609a      	str	r2, [r3, #8]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b087      	sub	sp, #28
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	021a      	lsls	r2, r3, #8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	609a      	str	r2, [r3, #8]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e046      	b.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a16      	ldr	r2, [pc, #88]	@ (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f50:	d009      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a12      	ldr	r2, [pc, #72]	@ (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a10      	ldr	r2, [pc, #64]	@ (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10c      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	40012c00 	.word	0x40012c00
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800

08004fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr

08004fba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e042      	b.n	8005064 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fc fb76 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2224      	movs	r2, #36	@ 0x24
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800500e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fdaf 	bl	8005b74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695a      	ldr	r2, [r3, #20]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	@ 0x28
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b20      	cmp	r3, #32
 800508a:	d175      	bne.n	8005178 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_UART_Transmit+0x2c>
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e06e      	b.n	800517a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2221      	movs	r2, #33	@ 0x21
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050aa:	f7fc fd8d 	bl	8001bc8 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	88fa      	ldrh	r2, [r7, #6]
 80050ba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c4:	d108      	bne.n	80050d8 <HAL_UART_Transmit+0x6c>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	e003      	b.n	80050e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050e0:	e02e      	b.n	8005140 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2180      	movs	r1, #128	@ 0x80
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fb13 	bl	8005718 <UART_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e03a      	b.n	800517a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10b      	bne.n	8005122 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005118:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	3302      	adds	r3, #2
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e007      	b.n	8005132 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	3301      	adds	r3, #1
 8005130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1cb      	bne.n	80050e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2200      	movs	r2, #0
 8005152:	2140      	movs	r1, #64	@ 0x40
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f000 fadf 	bl	8005718 <UART_WaitOnFlagUntilTimeout>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e006      	b.n	800517a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e000      	b.n	800517a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005178:	2302      	movs	r3, #2
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	4613      	mov	r3, r2
 800518e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b20      	cmp	r3, #32
 800519a:	d112      	bne.n	80051c2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_UART_Receive_IT+0x26>
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e00b      	b.n	80051c4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	461a      	mov	r2, r3
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 fb06 	bl	80057ca <UART_Start_Receive_IT>
 80051be:	4603      	mov	r3, r0
 80051c0:	e000      	b.n	80051c4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80051c2:	2302      	movs	r3, #2
  }
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b0ba      	sub	sp, #232	@ 0xe8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800520a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10f      	bne.n	8005232 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_UART_IRQHandler+0x66>
 800521e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fbe3 	bl	80059f6 <UART_Receive_IT>
      return;
 8005230:	e25b      	b.n	80056ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80de 	beq.w	80053f8 <HAL_UART_IRQHandler+0x22c>
 800523c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800524c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80d1 	beq.w	80053f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <HAL_UART_IRQHandler+0xae>
 8005262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	f043 0201 	orr.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800527a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <HAL_UART_IRQHandler+0xd2>
 8005286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005296:	f043 0202 	orr.w	r2, r3, #2
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800529e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <HAL_UART_IRQHandler+0xf6>
 80052aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	f043 0204 	orr.w	r2, r3, #4
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d011      	beq.n	80052f2 <HAL_UART_IRQHandler+0x126>
 80052ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d105      	bne.n	80052e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ea:	f043 0208 	orr.w	r2, r3, #8
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 81f2 	beq.w	80056e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_UART_IRQHandler+0x14e>
 8005308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fb6e 	bl	80059f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <HAL_UART_IRQHandler+0x17a>
 800533e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d04f      	beq.n	80053e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa78 	bl	800583c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d041      	beq.n	80053de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3314      	adds	r3, #20
 8005360:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005370:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005378:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005386:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800538a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800539e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1d9      	bne.n	800535a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d013      	beq.n	80053d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b2:	4a7e      	ldr	r2, [pc, #504]	@ (80055ac <HAL_UART_IRQHandler+0x3e0>)
 80053b4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fd fbbc 	bl	8002b38 <HAL_DMA_Abort_IT>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d016      	beq.n	80053f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053d0:	4610      	mov	r0, r2
 80053d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d4:	e00e      	b.n	80053f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fb fef6 	bl	80011c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	e00a      	b.n	80053f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fb fef2 	bl	80011c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	e006      	b.n	80053f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fb feee 	bl	80011c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80053f2:	e175      	b.n	80056e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	bf00      	nop
    return;
 80053f6:	e173      	b.n	80056e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	f040 814f 	bne.w	80056a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8148 	beq.w	80056a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8141 	beq.w	80056a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80b6 	beq.w	80055b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005450:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8145 	beq.w	80056e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800545e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005462:	429a      	cmp	r2, r3
 8005464:	f080 813e 	bcs.w	80056e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800546e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b20      	cmp	r3, #32
 8005478:	f000 8088 	beq.w	800558c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005492:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005496:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800549a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80054a8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80054b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80054c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1d9      	bne.n	800547c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3314      	adds	r3, #20
 80054ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80054d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3314      	adds	r3, #20
 80054e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80054f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80054f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80054fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e1      	bne.n	80054c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3314      	adds	r3, #20
 800550a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005514:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800551a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3314      	adds	r3, #20
 8005524:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005528:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800552a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800552e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005530:	e841 2300 	strex	r3, r2, [r1]
 8005534:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005536:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e3      	bne.n	8005504 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800555a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800555c:	f023 0310 	bic.w	r3, r3, #16
 8005560:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800556e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005570:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005574:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800557c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e3      	bne.n	800554a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005586:	4618      	mov	r0, r3
 8005588:	f7fd fa9a 	bl	8002ac0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800559a:	b29b      	uxth	r3, r3
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	b29b      	uxth	r3, r3
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8ad 	bl	8005702 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055a8:	e09c      	b.n	80056e4 <HAL_UART_IRQHandler+0x518>
 80055aa:	bf00      	nop
 80055ac:	08005901 	.word	0x08005901
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 808e 	beq.w	80056e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80055cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8089 	beq.w	80056e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80055fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80055fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005600:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e3      	bne.n	80055d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3314      	adds	r3, #20
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	623b      	str	r3, [r7, #32]
   return(result);
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3314      	adds	r3, #20
 800562e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005632:	633a      	str	r2, [r7, #48]	@ 0x30
 8005634:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e3      	bne.n	800560e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	330c      	adds	r3, #12
 800565a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	60fb      	str	r3, [r7, #12]
   return(result);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0310 	bic.w	r3, r3, #16
 800566a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005678:	61fa      	str	r2, [r7, #28]
 800567a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	69b9      	ldr	r1, [r7, #24]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	617b      	str	r3, [r7, #20]
   return(result);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e3      	bne.n	8005654 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005692:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f832 	bl	8005702 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800569e:	e023      	b.n	80056e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <HAL_UART_IRQHandler+0x4f4>
 80056ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f935 	bl	8005928 <UART_Transmit_IT>
    return;
 80056be:	e014      	b.n	80056ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00e      	beq.n	80056ea <HAL_UART_IRQHandler+0x51e>
 80056cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f974 	bl	80059c6 <UART_EndTransmit_IT>
    return;
 80056de:	e004      	b.n	80056ea <HAL_UART_IRQHandler+0x51e>
    return;
 80056e0:	bf00      	nop
 80056e2:	e002      	b.n	80056ea <HAL_UART_IRQHandler+0x51e>
      return;
 80056e4:	bf00      	nop
 80056e6:	e000      	b.n	80056ea <HAL_UART_IRQHandler+0x51e>
      return;
 80056e8:	bf00      	nop
  }
}
 80056ea:	37e8      	adds	r7, #232	@ 0xe8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr

08005702 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	460b      	mov	r3, r1
 800570c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005728:	e03b      	b.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d037      	beq.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fc fa49 	bl	8001bc8 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	6a3a      	ldr	r2, [r7, #32]
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <UART_WaitOnFlagUntilTimeout+0x30>
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e03a      	b.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d023      	beq.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b80      	cmp	r3, #128	@ 0x80
 800575e:	d020      	beq.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b40      	cmp	r3, #64	@ 0x40
 8005764:	d01d      	beq.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d116      	bne.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f856 	bl	800583c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2208      	movs	r2, #8
 8005794:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e00f      	b.n	80057c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	bf0c      	ite	eq
 80057b2:	2301      	moveq	r3, #1
 80057b4:	2300      	movne	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d0b4      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b085      	sub	sp, #20
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	4613      	mov	r3, r2
 80057d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	88fa      	ldrh	r2, [r7, #6]
 80057e2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2222      	movs	r2, #34	@ 0x22
 80057f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d007      	beq.n	8005810 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800580e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0220 	orr.w	r2, r2, #32
 800582e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr

0800583c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b095      	sub	sp, #84	@ 0x54
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	330c      	adds	r3, #12
 800584a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800585a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005864:	643a      	str	r2, [r7, #64]	@ 0x40
 8005866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800586a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e5      	bne.n	8005844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3314      	adds	r3, #20
 800587e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	61fb      	str	r3, [r7, #28]
   return(result);
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f023 0301 	bic.w	r3, r3, #1
 800588e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3314      	adds	r3, #20
 8005896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005898:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800589a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800589e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e5      	bne.n	8005878 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d119      	bne.n	80058e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f023 0310 	bic.w	r3, r3, #16
 80058ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	330c      	adds	r3, #12
 80058d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058d4:	61ba      	str	r2, [r7, #24]
 80058d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6979      	ldr	r1, [r7, #20]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	613b      	str	r3, [r7, #16]
   return(result);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e5      	bne.n	80058b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058f6:	bf00      	nop
 80058f8:	3754      	adds	r7, #84	@ 0x54
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7fb fc54 	bl	80011c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b21      	cmp	r3, #33	@ 0x21
 800593a:	d13e      	bne.n	80059ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005944:	d114      	bne.n	8005970 <UART_Transmit_IT+0x48>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d110      	bne.n	8005970 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005962:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	1c9a      	adds	r2, r3, #2
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	621a      	str	r2, [r3, #32]
 800596e:	e008      	b.n	8005982 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	1c59      	adds	r1, r3, #1
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6211      	str	r1, [r2, #32]
 800597a:	781a      	ldrb	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29b      	uxth	r3, r3
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	4619      	mov	r1, r3
 8005990:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10f      	bne.n	80059b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e000      	b.n	80059bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059ba:	2302      	movs	r3, #2
  }
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff fe82 	bl	80056f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b08c      	sub	sp, #48	@ 0x30
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b22      	cmp	r3, #34	@ 0x22
 8005a08:	f040 80ae 	bne.w	8005b68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a14:	d117      	bne.n	8005a46 <UART_Receive_IT+0x50>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d113      	bne.n	8005a46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3e:	1c9a      	adds	r2, r3, #2
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a44:	e026      	b.n	8005a94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a58:	d007      	beq.n	8005a6a <UART_Receive_IT+0x74>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <UART_Receive_IT+0x82>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e008      	b.n	8005a8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d15d      	bne.n	8005b64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0220 	bic.w	r2, r2, #32
 8005ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d135      	bne.n	8005b5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	613b      	str	r3, [r7, #16]
   return(result);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f023 0310 	bic.w	r3, r3, #16
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b14:	623a      	str	r2, [r7, #32]
 8005b16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	69f9      	ldr	r1, [r7, #28]
 8005b1a:	6a3a      	ldr	r2, [r7, #32]
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e5      	bne.n	8005af4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	2b10      	cmp	r3, #16
 8005b34:	d10a      	bne.n	8005b4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fdd5 	bl	8005702 <HAL_UARTEx_RxEventCallback>
 8005b58:	e002      	b.n	8005b60 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fb fb16 	bl	800118c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	e002      	b.n	8005b6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e000      	b.n	8005b6a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b68:	2302      	movs	r3, #2
  }
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3730      	adds	r7, #48	@ 0x30
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005bae:	f023 030c 	bic.w	r3, r3, #12
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8005c88 <UART_SetConfig+0x114>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d103      	bne.n	8005be4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005bdc:	f7fd fed2 	bl	8003984 <HAL_RCC_GetPCLK2Freq>
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	e002      	b.n	8005bea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005be4:	f7fd feba 	bl	800395c <HAL_RCC_GetPCLK1Freq>
 8005be8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009a      	lsls	r2, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	4a22      	ldr	r2, [pc, #136]	@ (8005c8c <UART_SetConfig+0x118>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	0119      	lsls	r1, r3, #4
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009a      	lsls	r2, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c20:	4b1a      	ldr	r3, [pc, #104]	@ (8005c8c <UART_SetConfig+0x118>)
 8005c22:	fba3 0302 	umull	r0, r3, r3, r2
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	2064      	movs	r0, #100	@ 0x64
 8005c2a:	fb00 f303 	mul.w	r3, r0, r3
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	3332      	adds	r3, #50	@ 0x32
 8005c34:	4a15      	ldr	r2, [pc, #84]	@ (8005c8c <UART_SetConfig+0x118>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c40:	4419      	add	r1, r3
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	009a      	lsls	r2, r3, #2
 8005c4c:	441a      	add	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c58:	4b0c      	ldr	r3, [pc, #48]	@ (8005c8c <UART_SetConfig+0x118>)
 8005c5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	2064      	movs	r0, #100	@ 0x64
 8005c62:	fb00 f303 	mul.w	r3, r0, r3
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	3332      	adds	r3, #50	@ 0x32
 8005c6c:	4a07      	ldr	r2, [pc, #28]	@ (8005c8c <UART_SetConfig+0x118>)
 8005c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	f003 020f 	and.w	r2, r3, #15
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40013800 	.word	0x40013800
 8005c8c:	51eb851f 	.word	0x51eb851f

08005c90 <std>:
 8005c90:	2300      	movs	r3, #0
 8005c92:	b510      	push	{r4, lr}
 8005c94:	4604      	mov	r4, r0
 8005c96:	e9c0 3300 	strd	r3, r3, [r0]
 8005c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c9e:	6083      	str	r3, [r0, #8]
 8005ca0:	8181      	strh	r1, [r0, #12]
 8005ca2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ca4:	81c2      	strh	r2, [r0, #14]
 8005ca6:	6183      	str	r3, [r0, #24]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	2208      	movs	r2, #8
 8005cac:	305c      	adds	r0, #92	@ 0x5c
 8005cae:	f000 f906 	bl	8005ebe <memset>
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <std+0x58>)
 8005cb4:	6224      	str	r4, [r4, #32]
 8005cb6:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <std+0x5c>)
 8005cba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <std+0x60>)
 8005cbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf4 <std+0x64>)
 8005cc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf8 <std+0x68>)
 8005cc6:	429c      	cmp	r4, r3
 8005cc8:	d006      	beq.n	8005cd8 <std+0x48>
 8005cca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cce:	4294      	cmp	r4, r2
 8005cd0:	d002      	beq.n	8005cd8 <std+0x48>
 8005cd2:	33d0      	adds	r3, #208	@ 0xd0
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	d105      	bne.n	8005ce4 <std+0x54>
 8005cd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce0:	f000 b966 	b.w	8005fb0 <__retarget_lock_init_recursive>
 8005ce4:	bd10      	pop	{r4, pc}
 8005ce6:	bf00      	nop
 8005ce8:	08005e39 	.word	0x08005e39
 8005cec:	08005e5b 	.word	0x08005e5b
 8005cf0:	08005e93 	.word	0x08005e93
 8005cf4:	08005eb7 	.word	0x08005eb7
 8005cf8:	2000025c 	.word	0x2000025c

08005cfc <stdio_exit_handler>:
 8005cfc:	4a02      	ldr	r2, [pc, #8]	@ (8005d08 <stdio_exit_handler+0xc>)
 8005cfe:	4903      	ldr	r1, [pc, #12]	@ (8005d0c <stdio_exit_handler+0x10>)
 8005d00:	4803      	ldr	r0, [pc, #12]	@ (8005d10 <stdio_exit_handler+0x14>)
 8005d02:	f000 b869 	b.w	8005dd8 <_fwalk_sglue>
 8005d06:	bf00      	nop
 8005d08:	20000018 	.word	0x20000018
 8005d0c:	08006845 	.word	0x08006845
 8005d10:	20000028 	.word	0x20000028

08005d14 <cleanup_stdio>:
 8005d14:	6841      	ldr	r1, [r0, #4]
 8005d16:	4b0c      	ldr	r3, [pc, #48]	@ (8005d48 <cleanup_stdio+0x34>)
 8005d18:	b510      	push	{r4, lr}
 8005d1a:	4299      	cmp	r1, r3
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	d001      	beq.n	8005d24 <cleanup_stdio+0x10>
 8005d20:	f000 fd90 	bl	8006844 <_fflush_r>
 8005d24:	68a1      	ldr	r1, [r4, #8]
 8005d26:	4b09      	ldr	r3, [pc, #36]	@ (8005d4c <cleanup_stdio+0x38>)
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	d002      	beq.n	8005d32 <cleanup_stdio+0x1e>
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 fd89 	bl	8006844 <_fflush_r>
 8005d32:	68e1      	ldr	r1, [r4, #12]
 8005d34:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <cleanup_stdio+0x3c>)
 8005d36:	4299      	cmp	r1, r3
 8005d38:	d004      	beq.n	8005d44 <cleanup_stdio+0x30>
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d40:	f000 bd80 	b.w	8006844 <_fflush_r>
 8005d44:	bd10      	pop	{r4, pc}
 8005d46:	bf00      	nop
 8005d48:	2000025c 	.word	0x2000025c
 8005d4c:	200002c4 	.word	0x200002c4
 8005d50:	2000032c 	.word	0x2000032c

08005d54 <global_stdio_init.part.0>:
 8005d54:	b510      	push	{r4, lr}
 8005d56:	4b0b      	ldr	r3, [pc, #44]	@ (8005d84 <global_stdio_init.part.0+0x30>)
 8005d58:	4c0b      	ldr	r4, [pc, #44]	@ (8005d88 <global_stdio_init.part.0+0x34>)
 8005d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d8c <global_stdio_init.part.0+0x38>)
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	2104      	movs	r1, #4
 8005d62:	2200      	movs	r2, #0
 8005d64:	f7ff ff94 	bl	8005c90 <std>
 8005d68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	2109      	movs	r1, #9
 8005d70:	f7ff ff8e 	bl	8005c90 <std>
 8005d74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d78:	2202      	movs	r2, #2
 8005d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d7e:	2112      	movs	r1, #18
 8005d80:	f7ff bf86 	b.w	8005c90 <std>
 8005d84:	20000394 	.word	0x20000394
 8005d88:	2000025c 	.word	0x2000025c
 8005d8c:	08005cfd 	.word	0x08005cfd

08005d90 <__sfp_lock_acquire>:
 8005d90:	4801      	ldr	r0, [pc, #4]	@ (8005d98 <__sfp_lock_acquire+0x8>)
 8005d92:	f000 b90e 	b.w	8005fb2 <__retarget_lock_acquire_recursive>
 8005d96:	bf00      	nop
 8005d98:	2000039d 	.word	0x2000039d

08005d9c <__sfp_lock_release>:
 8005d9c:	4801      	ldr	r0, [pc, #4]	@ (8005da4 <__sfp_lock_release+0x8>)
 8005d9e:	f000 b909 	b.w	8005fb4 <__retarget_lock_release_recursive>
 8005da2:	bf00      	nop
 8005da4:	2000039d 	.word	0x2000039d

08005da8 <__sinit>:
 8005da8:	b510      	push	{r4, lr}
 8005daa:	4604      	mov	r4, r0
 8005dac:	f7ff fff0 	bl	8005d90 <__sfp_lock_acquire>
 8005db0:	6a23      	ldr	r3, [r4, #32]
 8005db2:	b11b      	cbz	r3, 8005dbc <__sinit+0x14>
 8005db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db8:	f7ff bff0 	b.w	8005d9c <__sfp_lock_release>
 8005dbc:	4b04      	ldr	r3, [pc, #16]	@ (8005dd0 <__sinit+0x28>)
 8005dbe:	6223      	str	r3, [r4, #32]
 8005dc0:	4b04      	ldr	r3, [pc, #16]	@ (8005dd4 <__sinit+0x2c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1f5      	bne.n	8005db4 <__sinit+0xc>
 8005dc8:	f7ff ffc4 	bl	8005d54 <global_stdio_init.part.0>
 8005dcc:	e7f2      	b.n	8005db4 <__sinit+0xc>
 8005dce:	bf00      	nop
 8005dd0:	08005d15 	.word	0x08005d15
 8005dd4:	20000394 	.word	0x20000394

08005dd8 <_fwalk_sglue>:
 8005dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ddc:	4607      	mov	r7, r0
 8005dde:	4688      	mov	r8, r1
 8005de0:	4614      	mov	r4, r2
 8005de2:	2600      	movs	r6, #0
 8005de4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005de8:	f1b9 0901 	subs.w	r9, r9, #1
 8005dec:	d505      	bpl.n	8005dfa <_fwalk_sglue+0x22>
 8005dee:	6824      	ldr	r4, [r4, #0]
 8005df0:	2c00      	cmp	r4, #0
 8005df2:	d1f7      	bne.n	8005de4 <_fwalk_sglue+0xc>
 8005df4:	4630      	mov	r0, r6
 8005df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dfa:	89ab      	ldrh	r3, [r5, #12]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d907      	bls.n	8005e10 <_fwalk_sglue+0x38>
 8005e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e04:	3301      	adds	r3, #1
 8005e06:	d003      	beq.n	8005e10 <_fwalk_sglue+0x38>
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	47c0      	blx	r8
 8005e0e:	4306      	orrs	r6, r0
 8005e10:	3568      	adds	r5, #104	@ 0x68
 8005e12:	e7e9      	b.n	8005de8 <_fwalk_sglue+0x10>

08005e14 <iprintf>:
 8005e14:	b40f      	push	{r0, r1, r2, r3}
 8005e16:	b507      	push	{r0, r1, r2, lr}
 8005e18:	4906      	ldr	r1, [pc, #24]	@ (8005e34 <iprintf+0x20>)
 8005e1a:	ab04      	add	r3, sp, #16
 8005e1c:	6808      	ldr	r0, [r1, #0]
 8005e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e22:	6881      	ldr	r1, [r0, #8]
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	f000 f9e5 	bl	80061f4 <_vfiprintf_r>
 8005e2a:	b003      	add	sp, #12
 8005e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e30:	b004      	add	sp, #16
 8005e32:	4770      	bx	lr
 8005e34:	20000024 	.word	0x20000024

08005e38 <__sread>:
 8005e38:	b510      	push	{r4, lr}
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e40:	f000 f868 	bl	8005f14 <_read_r>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	bfab      	itete	ge
 8005e48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e4c:	181b      	addge	r3, r3, r0
 8005e4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e52:	bfac      	ite	ge
 8005e54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e56:	81a3      	strhlt	r3, [r4, #12]
 8005e58:	bd10      	pop	{r4, pc}

08005e5a <__swrite>:
 8005e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e5e:	461f      	mov	r7, r3
 8005e60:	898b      	ldrh	r3, [r1, #12]
 8005e62:	4605      	mov	r5, r0
 8005e64:	05db      	lsls	r3, r3, #23
 8005e66:	460c      	mov	r4, r1
 8005e68:	4616      	mov	r6, r2
 8005e6a:	d505      	bpl.n	8005e78 <__swrite+0x1e>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e74:	f000 f83c 	bl	8005ef0 <_lseek_r>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e80:	81a3      	strh	r3, [r4, #12]
 8005e82:	4628      	mov	r0, r5
 8005e84:	463b      	mov	r3, r7
 8005e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8e:	f000 b853 	b.w	8005f38 <_write_r>

08005e92 <__sseek>:
 8005e92:	b510      	push	{r4, lr}
 8005e94:	460c      	mov	r4, r1
 8005e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9a:	f000 f829 	bl	8005ef0 <_lseek_r>
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	bf15      	itete	ne
 8005ea4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ea6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005eaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005eae:	81a3      	strheq	r3, [r4, #12]
 8005eb0:	bf18      	it	ne
 8005eb2:	81a3      	strhne	r3, [r4, #12]
 8005eb4:	bd10      	pop	{r4, pc}

08005eb6 <__sclose>:
 8005eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eba:	f000 b809 	b.w	8005ed0 <_close_r>

08005ebe <memset>:
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4402      	add	r2, r0
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d100      	bne.n	8005ec8 <memset+0xa>
 8005ec6:	4770      	bx	lr
 8005ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8005ecc:	e7f9      	b.n	8005ec2 <memset+0x4>
	...

08005ed0 <_close_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4d05      	ldr	r5, [pc, #20]	@ (8005eec <_close_r+0x1c>)
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	f7fb fad1 	bl	8001482 <_close>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d102      	bne.n	8005eea <_close_r+0x1a>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	b103      	cbz	r3, 8005eea <_close_r+0x1a>
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	20000398 	.word	0x20000398

08005ef0 <_lseek_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	4608      	mov	r0, r1
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	2200      	movs	r2, #0
 8005efa:	4d05      	ldr	r5, [pc, #20]	@ (8005f10 <_lseek_r+0x20>)
 8005efc:	602a      	str	r2, [r5, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	f7fb fae3 	bl	80014ca <_lseek>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d102      	bne.n	8005f0e <_lseek_r+0x1e>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	b103      	cbz	r3, 8005f0e <_lseek_r+0x1e>
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	20000398 	.word	0x20000398

08005f14 <_read_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4d05      	ldr	r5, [pc, #20]	@ (8005f34 <_read_r+0x20>)
 8005f20:	602a      	str	r2, [r5, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f7fb fa74 	bl	8001410 <_read>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_read_r+0x1e>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_read_r+0x1e>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	20000398 	.word	0x20000398

08005f38 <_write_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	4611      	mov	r1, r2
 8005f40:	2200      	movs	r2, #0
 8005f42:	4d05      	ldr	r5, [pc, #20]	@ (8005f58 <_write_r+0x20>)
 8005f44:	602a      	str	r2, [r5, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	f7fb fa7f 	bl	800144a <_write>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_write_r+0x1e>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_write_r+0x1e>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	20000398 	.word	0x20000398

08005f5c <__errno>:
 8005f5c:	4b01      	ldr	r3, [pc, #4]	@ (8005f64 <__errno+0x8>)
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20000024 	.word	0x20000024

08005f68 <__libc_init_array>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	2600      	movs	r6, #0
 8005f6c:	4d0c      	ldr	r5, [pc, #48]	@ (8005fa0 <__libc_init_array+0x38>)
 8005f6e:	4c0d      	ldr	r4, [pc, #52]	@ (8005fa4 <__libc_init_array+0x3c>)
 8005f70:	1b64      	subs	r4, r4, r5
 8005f72:	10a4      	asrs	r4, r4, #2
 8005f74:	42a6      	cmp	r6, r4
 8005f76:	d109      	bne.n	8005f8c <__libc_init_array+0x24>
 8005f78:	f000 fdc2 	bl	8006b00 <_init>
 8005f7c:	2600      	movs	r6, #0
 8005f7e:	4d0a      	ldr	r5, [pc, #40]	@ (8005fa8 <__libc_init_array+0x40>)
 8005f80:	4c0a      	ldr	r4, [pc, #40]	@ (8005fac <__libc_init_array+0x44>)
 8005f82:	1b64      	subs	r4, r4, r5
 8005f84:	10a4      	asrs	r4, r4, #2
 8005f86:	42a6      	cmp	r6, r4
 8005f88:	d105      	bne.n	8005f96 <__libc_init_array+0x2e>
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f90:	4798      	blx	r3
 8005f92:	3601      	adds	r6, #1
 8005f94:	e7ee      	b.n	8005f74 <__libc_init_array+0xc>
 8005f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9a:	4798      	blx	r3
 8005f9c:	3601      	adds	r6, #1
 8005f9e:	e7f2      	b.n	8005f86 <__libc_init_array+0x1e>
 8005fa0:	08006c1c 	.word	0x08006c1c
 8005fa4:	08006c1c 	.word	0x08006c1c
 8005fa8:	08006c1c 	.word	0x08006c1c
 8005fac:	08006c20 	.word	0x08006c20

08005fb0 <__retarget_lock_init_recursive>:
 8005fb0:	4770      	bx	lr

08005fb2 <__retarget_lock_acquire_recursive>:
 8005fb2:	4770      	bx	lr

08005fb4 <__retarget_lock_release_recursive>:
 8005fb4:	4770      	bx	lr
	...

08005fb8 <_free_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4605      	mov	r5, r0
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d040      	beq.n	8006042 <_free_r+0x8a>
 8005fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc4:	1f0c      	subs	r4, r1, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bfb8      	it	lt
 8005fca:	18e4      	addlt	r4, r4, r3
 8005fcc:	f000 f8de 	bl	800618c <__malloc_lock>
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006044 <_free_r+0x8c>)
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	b933      	cbnz	r3, 8005fe4 <_free_r+0x2c>
 8005fd6:	6063      	str	r3, [r4, #4]
 8005fd8:	6014      	str	r4, [r2, #0]
 8005fda:	4628      	mov	r0, r5
 8005fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe0:	f000 b8da 	b.w	8006198 <__malloc_unlock>
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	d908      	bls.n	8005ffa <_free_r+0x42>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	1821      	adds	r1, r4, r0
 8005fec:	428b      	cmp	r3, r1
 8005fee:	bf01      	itttt	eq
 8005ff0:	6819      	ldreq	r1, [r3, #0]
 8005ff2:	685b      	ldreq	r3, [r3, #4]
 8005ff4:	1809      	addeq	r1, r1, r0
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	e7ed      	b.n	8005fd6 <_free_r+0x1e>
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	b10b      	cbz	r3, 8006004 <_free_r+0x4c>
 8006000:	42a3      	cmp	r3, r4
 8006002:	d9fa      	bls.n	8005ffa <_free_r+0x42>
 8006004:	6811      	ldr	r1, [r2, #0]
 8006006:	1850      	adds	r0, r2, r1
 8006008:	42a0      	cmp	r0, r4
 800600a:	d10b      	bne.n	8006024 <_free_r+0x6c>
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	4401      	add	r1, r0
 8006010:	1850      	adds	r0, r2, r1
 8006012:	4283      	cmp	r3, r0
 8006014:	6011      	str	r1, [r2, #0]
 8006016:	d1e0      	bne.n	8005fda <_free_r+0x22>
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4408      	add	r0, r1
 800601e:	6010      	str	r0, [r2, #0]
 8006020:	6053      	str	r3, [r2, #4]
 8006022:	e7da      	b.n	8005fda <_free_r+0x22>
 8006024:	d902      	bls.n	800602c <_free_r+0x74>
 8006026:	230c      	movs	r3, #12
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	e7d6      	b.n	8005fda <_free_r+0x22>
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	1821      	adds	r1, r4, r0
 8006030:	428b      	cmp	r3, r1
 8006032:	bf01      	itttt	eq
 8006034:	6819      	ldreq	r1, [r3, #0]
 8006036:	685b      	ldreq	r3, [r3, #4]
 8006038:	1809      	addeq	r1, r1, r0
 800603a:	6021      	streq	r1, [r4, #0]
 800603c:	6063      	str	r3, [r4, #4]
 800603e:	6054      	str	r4, [r2, #4]
 8006040:	e7cb      	b.n	8005fda <_free_r+0x22>
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	200003a4 	.word	0x200003a4

08006048 <sbrk_aligned>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	4e0f      	ldr	r6, [pc, #60]	@ (8006088 <sbrk_aligned+0x40>)
 800604c:	460c      	mov	r4, r1
 800604e:	6831      	ldr	r1, [r6, #0]
 8006050:	4605      	mov	r5, r0
 8006052:	b911      	cbnz	r1, 800605a <sbrk_aligned+0x12>
 8006054:	f000 fcb2 	bl	80069bc <_sbrk_r>
 8006058:	6030      	str	r0, [r6, #0]
 800605a:	4621      	mov	r1, r4
 800605c:	4628      	mov	r0, r5
 800605e:	f000 fcad 	bl	80069bc <_sbrk_r>
 8006062:	1c43      	adds	r3, r0, #1
 8006064:	d103      	bne.n	800606e <sbrk_aligned+0x26>
 8006066:	f04f 34ff 	mov.w	r4, #4294967295
 800606a:	4620      	mov	r0, r4
 800606c:	bd70      	pop	{r4, r5, r6, pc}
 800606e:	1cc4      	adds	r4, r0, #3
 8006070:	f024 0403 	bic.w	r4, r4, #3
 8006074:	42a0      	cmp	r0, r4
 8006076:	d0f8      	beq.n	800606a <sbrk_aligned+0x22>
 8006078:	1a21      	subs	r1, r4, r0
 800607a:	4628      	mov	r0, r5
 800607c:	f000 fc9e 	bl	80069bc <_sbrk_r>
 8006080:	3001      	adds	r0, #1
 8006082:	d1f2      	bne.n	800606a <sbrk_aligned+0x22>
 8006084:	e7ef      	b.n	8006066 <sbrk_aligned+0x1e>
 8006086:	bf00      	nop
 8006088:	200003a0 	.word	0x200003a0

0800608c <_malloc_r>:
 800608c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006090:	1ccd      	adds	r5, r1, #3
 8006092:	f025 0503 	bic.w	r5, r5, #3
 8006096:	3508      	adds	r5, #8
 8006098:	2d0c      	cmp	r5, #12
 800609a:	bf38      	it	cc
 800609c:	250c      	movcc	r5, #12
 800609e:	2d00      	cmp	r5, #0
 80060a0:	4606      	mov	r6, r0
 80060a2:	db01      	blt.n	80060a8 <_malloc_r+0x1c>
 80060a4:	42a9      	cmp	r1, r5
 80060a6:	d904      	bls.n	80060b2 <_malloc_r+0x26>
 80060a8:	230c      	movs	r3, #12
 80060aa:	6033      	str	r3, [r6, #0]
 80060ac:	2000      	movs	r0, #0
 80060ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006188 <_malloc_r+0xfc>
 80060b6:	f000 f869 	bl	800618c <__malloc_lock>
 80060ba:	f8d8 3000 	ldr.w	r3, [r8]
 80060be:	461c      	mov	r4, r3
 80060c0:	bb44      	cbnz	r4, 8006114 <_malloc_r+0x88>
 80060c2:	4629      	mov	r1, r5
 80060c4:	4630      	mov	r0, r6
 80060c6:	f7ff ffbf 	bl	8006048 <sbrk_aligned>
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	4604      	mov	r4, r0
 80060ce:	d158      	bne.n	8006182 <_malloc_r+0xf6>
 80060d0:	f8d8 4000 	ldr.w	r4, [r8]
 80060d4:	4627      	mov	r7, r4
 80060d6:	2f00      	cmp	r7, #0
 80060d8:	d143      	bne.n	8006162 <_malloc_r+0xd6>
 80060da:	2c00      	cmp	r4, #0
 80060dc:	d04b      	beq.n	8006176 <_malloc_r+0xea>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	4639      	mov	r1, r7
 80060e2:	4630      	mov	r0, r6
 80060e4:	eb04 0903 	add.w	r9, r4, r3
 80060e8:	f000 fc68 	bl	80069bc <_sbrk_r>
 80060ec:	4581      	cmp	r9, r0
 80060ee:	d142      	bne.n	8006176 <_malloc_r+0xea>
 80060f0:	6821      	ldr	r1, [r4, #0]
 80060f2:	4630      	mov	r0, r6
 80060f4:	1a6d      	subs	r5, r5, r1
 80060f6:	4629      	mov	r1, r5
 80060f8:	f7ff ffa6 	bl	8006048 <sbrk_aligned>
 80060fc:	3001      	adds	r0, #1
 80060fe:	d03a      	beq.n	8006176 <_malloc_r+0xea>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	442b      	add	r3, r5
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	f8d8 3000 	ldr.w	r3, [r8]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	bb62      	cbnz	r2, 8006168 <_malloc_r+0xdc>
 800610e:	f8c8 7000 	str.w	r7, [r8]
 8006112:	e00f      	b.n	8006134 <_malloc_r+0xa8>
 8006114:	6822      	ldr	r2, [r4, #0]
 8006116:	1b52      	subs	r2, r2, r5
 8006118:	d420      	bmi.n	800615c <_malloc_r+0xd0>
 800611a:	2a0b      	cmp	r2, #11
 800611c:	d917      	bls.n	800614e <_malloc_r+0xc2>
 800611e:	1961      	adds	r1, r4, r5
 8006120:	42a3      	cmp	r3, r4
 8006122:	6025      	str	r5, [r4, #0]
 8006124:	bf18      	it	ne
 8006126:	6059      	strne	r1, [r3, #4]
 8006128:	6863      	ldr	r3, [r4, #4]
 800612a:	bf08      	it	eq
 800612c:	f8c8 1000 	streq.w	r1, [r8]
 8006130:	5162      	str	r2, [r4, r5]
 8006132:	604b      	str	r3, [r1, #4]
 8006134:	4630      	mov	r0, r6
 8006136:	f000 f82f 	bl	8006198 <__malloc_unlock>
 800613a:	f104 000b 	add.w	r0, r4, #11
 800613e:	1d23      	adds	r3, r4, #4
 8006140:	f020 0007 	bic.w	r0, r0, #7
 8006144:	1ac2      	subs	r2, r0, r3
 8006146:	bf1c      	itt	ne
 8006148:	1a1b      	subne	r3, r3, r0
 800614a:	50a3      	strne	r3, [r4, r2]
 800614c:	e7af      	b.n	80060ae <_malloc_r+0x22>
 800614e:	6862      	ldr	r2, [r4, #4]
 8006150:	42a3      	cmp	r3, r4
 8006152:	bf0c      	ite	eq
 8006154:	f8c8 2000 	streq.w	r2, [r8]
 8006158:	605a      	strne	r2, [r3, #4]
 800615a:	e7eb      	b.n	8006134 <_malloc_r+0xa8>
 800615c:	4623      	mov	r3, r4
 800615e:	6864      	ldr	r4, [r4, #4]
 8006160:	e7ae      	b.n	80060c0 <_malloc_r+0x34>
 8006162:	463c      	mov	r4, r7
 8006164:	687f      	ldr	r7, [r7, #4]
 8006166:	e7b6      	b.n	80060d6 <_malloc_r+0x4a>
 8006168:	461a      	mov	r2, r3
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	42a3      	cmp	r3, r4
 800616e:	d1fb      	bne.n	8006168 <_malloc_r+0xdc>
 8006170:	2300      	movs	r3, #0
 8006172:	6053      	str	r3, [r2, #4]
 8006174:	e7de      	b.n	8006134 <_malloc_r+0xa8>
 8006176:	230c      	movs	r3, #12
 8006178:	4630      	mov	r0, r6
 800617a:	6033      	str	r3, [r6, #0]
 800617c:	f000 f80c 	bl	8006198 <__malloc_unlock>
 8006180:	e794      	b.n	80060ac <_malloc_r+0x20>
 8006182:	6005      	str	r5, [r0, #0]
 8006184:	e7d6      	b.n	8006134 <_malloc_r+0xa8>
 8006186:	bf00      	nop
 8006188:	200003a4 	.word	0x200003a4

0800618c <__malloc_lock>:
 800618c:	4801      	ldr	r0, [pc, #4]	@ (8006194 <__malloc_lock+0x8>)
 800618e:	f7ff bf10 	b.w	8005fb2 <__retarget_lock_acquire_recursive>
 8006192:	bf00      	nop
 8006194:	2000039c 	.word	0x2000039c

08006198 <__malloc_unlock>:
 8006198:	4801      	ldr	r0, [pc, #4]	@ (80061a0 <__malloc_unlock+0x8>)
 800619a:	f7ff bf0b 	b.w	8005fb4 <__retarget_lock_release_recursive>
 800619e:	bf00      	nop
 80061a0:	2000039c 	.word	0x2000039c

080061a4 <__sfputc_r>:
 80061a4:	6893      	ldr	r3, [r2, #8]
 80061a6:	b410      	push	{r4}
 80061a8:	3b01      	subs	r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	6093      	str	r3, [r2, #8]
 80061ae:	da07      	bge.n	80061c0 <__sfputc_r+0x1c>
 80061b0:	6994      	ldr	r4, [r2, #24]
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	db01      	blt.n	80061ba <__sfputc_r+0x16>
 80061b6:	290a      	cmp	r1, #10
 80061b8:	d102      	bne.n	80061c0 <__sfputc_r+0x1c>
 80061ba:	bc10      	pop	{r4}
 80061bc:	f000 bb6a 	b.w	8006894 <__swbuf_r>
 80061c0:	6813      	ldr	r3, [r2, #0]
 80061c2:	1c58      	adds	r0, r3, #1
 80061c4:	6010      	str	r0, [r2, #0]
 80061c6:	7019      	strb	r1, [r3, #0]
 80061c8:	4608      	mov	r0, r1
 80061ca:	bc10      	pop	{r4}
 80061cc:	4770      	bx	lr

080061ce <__sfputs_r>:
 80061ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d0:	4606      	mov	r6, r0
 80061d2:	460f      	mov	r7, r1
 80061d4:	4614      	mov	r4, r2
 80061d6:	18d5      	adds	r5, r2, r3
 80061d8:	42ac      	cmp	r4, r5
 80061da:	d101      	bne.n	80061e0 <__sfputs_r+0x12>
 80061dc:	2000      	movs	r0, #0
 80061de:	e007      	b.n	80061f0 <__sfputs_r+0x22>
 80061e0:	463a      	mov	r2, r7
 80061e2:	4630      	mov	r0, r6
 80061e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e8:	f7ff ffdc 	bl	80061a4 <__sfputc_r>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d1f3      	bne.n	80061d8 <__sfputs_r+0xa>
 80061f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061f4 <_vfiprintf_r>:
 80061f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f8:	460d      	mov	r5, r1
 80061fa:	4614      	mov	r4, r2
 80061fc:	4698      	mov	r8, r3
 80061fe:	4606      	mov	r6, r0
 8006200:	b09d      	sub	sp, #116	@ 0x74
 8006202:	b118      	cbz	r0, 800620c <_vfiprintf_r+0x18>
 8006204:	6a03      	ldr	r3, [r0, #32]
 8006206:	b90b      	cbnz	r3, 800620c <_vfiprintf_r+0x18>
 8006208:	f7ff fdce 	bl	8005da8 <__sinit>
 800620c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800620e:	07d9      	lsls	r1, r3, #31
 8006210:	d405      	bmi.n	800621e <_vfiprintf_r+0x2a>
 8006212:	89ab      	ldrh	r3, [r5, #12]
 8006214:	059a      	lsls	r2, r3, #22
 8006216:	d402      	bmi.n	800621e <_vfiprintf_r+0x2a>
 8006218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800621a:	f7ff feca 	bl	8005fb2 <__retarget_lock_acquire_recursive>
 800621e:	89ab      	ldrh	r3, [r5, #12]
 8006220:	071b      	lsls	r3, r3, #28
 8006222:	d501      	bpl.n	8006228 <_vfiprintf_r+0x34>
 8006224:	692b      	ldr	r3, [r5, #16]
 8006226:	b99b      	cbnz	r3, 8006250 <_vfiprintf_r+0x5c>
 8006228:	4629      	mov	r1, r5
 800622a:	4630      	mov	r0, r6
 800622c:	f000 fb70 	bl	8006910 <__swsetup_r>
 8006230:	b170      	cbz	r0, 8006250 <_vfiprintf_r+0x5c>
 8006232:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006234:	07dc      	lsls	r4, r3, #31
 8006236:	d504      	bpl.n	8006242 <_vfiprintf_r+0x4e>
 8006238:	f04f 30ff 	mov.w	r0, #4294967295
 800623c:	b01d      	add	sp, #116	@ 0x74
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	89ab      	ldrh	r3, [r5, #12]
 8006244:	0598      	lsls	r0, r3, #22
 8006246:	d4f7      	bmi.n	8006238 <_vfiprintf_r+0x44>
 8006248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800624a:	f7ff feb3 	bl	8005fb4 <__retarget_lock_release_recursive>
 800624e:	e7f3      	b.n	8006238 <_vfiprintf_r+0x44>
 8006250:	2300      	movs	r3, #0
 8006252:	9309      	str	r3, [sp, #36]	@ 0x24
 8006254:	2320      	movs	r3, #32
 8006256:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800625a:	2330      	movs	r3, #48	@ 0x30
 800625c:	f04f 0901 	mov.w	r9, #1
 8006260:	f8cd 800c 	str.w	r8, [sp, #12]
 8006264:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006410 <_vfiprintf_r+0x21c>
 8006268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800626c:	4623      	mov	r3, r4
 800626e:	469a      	mov	sl, r3
 8006270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006274:	b10a      	cbz	r2, 800627a <_vfiprintf_r+0x86>
 8006276:	2a25      	cmp	r2, #37	@ 0x25
 8006278:	d1f9      	bne.n	800626e <_vfiprintf_r+0x7a>
 800627a:	ebba 0b04 	subs.w	fp, sl, r4
 800627e:	d00b      	beq.n	8006298 <_vfiprintf_r+0xa4>
 8006280:	465b      	mov	r3, fp
 8006282:	4622      	mov	r2, r4
 8006284:	4629      	mov	r1, r5
 8006286:	4630      	mov	r0, r6
 8006288:	f7ff ffa1 	bl	80061ce <__sfputs_r>
 800628c:	3001      	adds	r0, #1
 800628e:	f000 80a7 	beq.w	80063e0 <_vfiprintf_r+0x1ec>
 8006292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006294:	445a      	add	r2, fp
 8006296:	9209      	str	r2, [sp, #36]	@ 0x24
 8006298:	f89a 3000 	ldrb.w	r3, [sl]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 809f 	beq.w	80063e0 <_vfiprintf_r+0x1ec>
 80062a2:	2300      	movs	r3, #0
 80062a4:	f04f 32ff 	mov.w	r2, #4294967295
 80062a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ac:	f10a 0a01 	add.w	sl, sl, #1
 80062b0:	9304      	str	r3, [sp, #16]
 80062b2:	9307      	str	r3, [sp, #28]
 80062b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80062ba:	4654      	mov	r4, sl
 80062bc:	2205      	movs	r2, #5
 80062be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c2:	4853      	ldr	r0, [pc, #332]	@ (8006410 <_vfiprintf_r+0x21c>)
 80062c4:	f000 fb8a 	bl	80069dc <memchr>
 80062c8:	9a04      	ldr	r2, [sp, #16]
 80062ca:	b9d8      	cbnz	r0, 8006304 <_vfiprintf_r+0x110>
 80062cc:	06d1      	lsls	r1, r2, #27
 80062ce:	bf44      	itt	mi
 80062d0:	2320      	movmi	r3, #32
 80062d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062d6:	0713      	lsls	r3, r2, #28
 80062d8:	bf44      	itt	mi
 80062da:	232b      	movmi	r3, #43	@ 0x2b
 80062dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062e0:	f89a 3000 	ldrb.w	r3, [sl]
 80062e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80062e6:	d015      	beq.n	8006314 <_vfiprintf_r+0x120>
 80062e8:	4654      	mov	r4, sl
 80062ea:	2000      	movs	r0, #0
 80062ec:	f04f 0c0a 	mov.w	ip, #10
 80062f0:	9a07      	ldr	r2, [sp, #28]
 80062f2:	4621      	mov	r1, r4
 80062f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062f8:	3b30      	subs	r3, #48	@ 0x30
 80062fa:	2b09      	cmp	r3, #9
 80062fc:	d94b      	bls.n	8006396 <_vfiprintf_r+0x1a2>
 80062fe:	b1b0      	cbz	r0, 800632e <_vfiprintf_r+0x13a>
 8006300:	9207      	str	r2, [sp, #28]
 8006302:	e014      	b.n	800632e <_vfiprintf_r+0x13a>
 8006304:	eba0 0308 	sub.w	r3, r0, r8
 8006308:	fa09 f303 	lsl.w	r3, r9, r3
 800630c:	4313      	orrs	r3, r2
 800630e:	46a2      	mov	sl, r4
 8006310:	9304      	str	r3, [sp, #16]
 8006312:	e7d2      	b.n	80062ba <_vfiprintf_r+0xc6>
 8006314:	9b03      	ldr	r3, [sp, #12]
 8006316:	1d19      	adds	r1, r3, #4
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	9103      	str	r1, [sp, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	bfbb      	ittet	lt
 8006320:	425b      	neglt	r3, r3
 8006322:	f042 0202 	orrlt.w	r2, r2, #2
 8006326:	9307      	strge	r3, [sp, #28]
 8006328:	9307      	strlt	r3, [sp, #28]
 800632a:	bfb8      	it	lt
 800632c:	9204      	strlt	r2, [sp, #16]
 800632e:	7823      	ldrb	r3, [r4, #0]
 8006330:	2b2e      	cmp	r3, #46	@ 0x2e
 8006332:	d10a      	bne.n	800634a <_vfiprintf_r+0x156>
 8006334:	7863      	ldrb	r3, [r4, #1]
 8006336:	2b2a      	cmp	r3, #42	@ 0x2a
 8006338:	d132      	bne.n	80063a0 <_vfiprintf_r+0x1ac>
 800633a:	9b03      	ldr	r3, [sp, #12]
 800633c:	3402      	adds	r4, #2
 800633e:	1d1a      	adds	r2, r3, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	9203      	str	r2, [sp, #12]
 8006344:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006348:	9305      	str	r3, [sp, #20]
 800634a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006414 <_vfiprintf_r+0x220>
 800634e:	2203      	movs	r2, #3
 8006350:	4650      	mov	r0, sl
 8006352:	7821      	ldrb	r1, [r4, #0]
 8006354:	f000 fb42 	bl	80069dc <memchr>
 8006358:	b138      	cbz	r0, 800636a <_vfiprintf_r+0x176>
 800635a:	2240      	movs	r2, #64	@ 0x40
 800635c:	9b04      	ldr	r3, [sp, #16]
 800635e:	eba0 000a 	sub.w	r0, r0, sl
 8006362:	4082      	lsls	r2, r0
 8006364:	4313      	orrs	r3, r2
 8006366:	3401      	adds	r4, #1
 8006368:	9304      	str	r3, [sp, #16]
 800636a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636e:	2206      	movs	r2, #6
 8006370:	4829      	ldr	r0, [pc, #164]	@ (8006418 <_vfiprintf_r+0x224>)
 8006372:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006376:	f000 fb31 	bl	80069dc <memchr>
 800637a:	2800      	cmp	r0, #0
 800637c:	d03f      	beq.n	80063fe <_vfiprintf_r+0x20a>
 800637e:	4b27      	ldr	r3, [pc, #156]	@ (800641c <_vfiprintf_r+0x228>)
 8006380:	bb1b      	cbnz	r3, 80063ca <_vfiprintf_r+0x1d6>
 8006382:	9b03      	ldr	r3, [sp, #12]
 8006384:	3307      	adds	r3, #7
 8006386:	f023 0307 	bic.w	r3, r3, #7
 800638a:	3308      	adds	r3, #8
 800638c:	9303      	str	r3, [sp, #12]
 800638e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006390:	443b      	add	r3, r7
 8006392:	9309      	str	r3, [sp, #36]	@ 0x24
 8006394:	e76a      	b.n	800626c <_vfiprintf_r+0x78>
 8006396:	460c      	mov	r4, r1
 8006398:	2001      	movs	r0, #1
 800639a:	fb0c 3202 	mla	r2, ip, r2, r3
 800639e:	e7a8      	b.n	80062f2 <_vfiprintf_r+0xfe>
 80063a0:	2300      	movs	r3, #0
 80063a2:	f04f 0c0a 	mov.w	ip, #10
 80063a6:	4619      	mov	r1, r3
 80063a8:	3401      	adds	r4, #1
 80063aa:	9305      	str	r3, [sp, #20]
 80063ac:	4620      	mov	r0, r4
 80063ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b2:	3a30      	subs	r2, #48	@ 0x30
 80063b4:	2a09      	cmp	r2, #9
 80063b6:	d903      	bls.n	80063c0 <_vfiprintf_r+0x1cc>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0c6      	beq.n	800634a <_vfiprintf_r+0x156>
 80063bc:	9105      	str	r1, [sp, #20]
 80063be:	e7c4      	b.n	800634a <_vfiprintf_r+0x156>
 80063c0:	4604      	mov	r4, r0
 80063c2:	2301      	movs	r3, #1
 80063c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c8:	e7f0      	b.n	80063ac <_vfiprintf_r+0x1b8>
 80063ca:	ab03      	add	r3, sp, #12
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	462a      	mov	r2, r5
 80063d0:	4630      	mov	r0, r6
 80063d2:	4b13      	ldr	r3, [pc, #76]	@ (8006420 <_vfiprintf_r+0x22c>)
 80063d4:	a904      	add	r1, sp, #16
 80063d6:	f3af 8000 	nop.w
 80063da:	4607      	mov	r7, r0
 80063dc:	1c78      	adds	r0, r7, #1
 80063de:	d1d6      	bne.n	800638e <_vfiprintf_r+0x19a>
 80063e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063e2:	07d9      	lsls	r1, r3, #31
 80063e4:	d405      	bmi.n	80063f2 <_vfiprintf_r+0x1fe>
 80063e6:	89ab      	ldrh	r3, [r5, #12]
 80063e8:	059a      	lsls	r2, r3, #22
 80063ea:	d402      	bmi.n	80063f2 <_vfiprintf_r+0x1fe>
 80063ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063ee:	f7ff fde1 	bl	8005fb4 <__retarget_lock_release_recursive>
 80063f2:	89ab      	ldrh	r3, [r5, #12]
 80063f4:	065b      	lsls	r3, r3, #25
 80063f6:	f53f af1f 	bmi.w	8006238 <_vfiprintf_r+0x44>
 80063fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063fc:	e71e      	b.n	800623c <_vfiprintf_r+0x48>
 80063fe:	ab03      	add	r3, sp, #12
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	462a      	mov	r2, r5
 8006404:	4630      	mov	r0, r6
 8006406:	4b06      	ldr	r3, [pc, #24]	@ (8006420 <_vfiprintf_r+0x22c>)
 8006408:	a904      	add	r1, sp, #16
 800640a:	f000 f87d 	bl	8006508 <_printf_i>
 800640e:	e7e4      	b.n	80063da <_vfiprintf_r+0x1e6>
 8006410:	08006be6 	.word	0x08006be6
 8006414:	08006bec 	.word	0x08006bec
 8006418:	08006bf0 	.word	0x08006bf0
 800641c:	00000000 	.word	0x00000000
 8006420:	080061cf 	.word	0x080061cf

08006424 <_printf_common>:
 8006424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	4616      	mov	r6, r2
 800642a:	4698      	mov	r8, r3
 800642c:	688a      	ldr	r2, [r1, #8]
 800642e:	690b      	ldr	r3, [r1, #16]
 8006430:	4607      	mov	r7, r0
 8006432:	4293      	cmp	r3, r2
 8006434:	bfb8      	it	lt
 8006436:	4613      	movlt	r3, r2
 8006438:	6033      	str	r3, [r6, #0]
 800643a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800643e:	460c      	mov	r4, r1
 8006440:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006444:	b10a      	cbz	r2, 800644a <_printf_common+0x26>
 8006446:	3301      	adds	r3, #1
 8006448:	6033      	str	r3, [r6, #0]
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	0699      	lsls	r1, r3, #26
 800644e:	bf42      	ittt	mi
 8006450:	6833      	ldrmi	r3, [r6, #0]
 8006452:	3302      	addmi	r3, #2
 8006454:	6033      	strmi	r3, [r6, #0]
 8006456:	6825      	ldr	r5, [r4, #0]
 8006458:	f015 0506 	ands.w	r5, r5, #6
 800645c:	d106      	bne.n	800646c <_printf_common+0x48>
 800645e:	f104 0a19 	add.w	sl, r4, #25
 8006462:	68e3      	ldr	r3, [r4, #12]
 8006464:	6832      	ldr	r2, [r6, #0]
 8006466:	1a9b      	subs	r3, r3, r2
 8006468:	42ab      	cmp	r3, r5
 800646a:	dc2b      	bgt.n	80064c4 <_printf_common+0xa0>
 800646c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006470:	6822      	ldr	r2, [r4, #0]
 8006472:	3b00      	subs	r3, #0
 8006474:	bf18      	it	ne
 8006476:	2301      	movne	r3, #1
 8006478:	0692      	lsls	r2, r2, #26
 800647a:	d430      	bmi.n	80064de <_printf_common+0xba>
 800647c:	4641      	mov	r1, r8
 800647e:	4638      	mov	r0, r7
 8006480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006484:	47c8      	blx	r9
 8006486:	3001      	adds	r0, #1
 8006488:	d023      	beq.n	80064d2 <_printf_common+0xae>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	6922      	ldr	r2, [r4, #16]
 800648e:	f003 0306 	and.w	r3, r3, #6
 8006492:	2b04      	cmp	r3, #4
 8006494:	bf14      	ite	ne
 8006496:	2500      	movne	r5, #0
 8006498:	6833      	ldreq	r3, [r6, #0]
 800649a:	f04f 0600 	mov.w	r6, #0
 800649e:	bf08      	it	eq
 80064a0:	68e5      	ldreq	r5, [r4, #12]
 80064a2:	f104 041a 	add.w	r4, r4, #26
 80064a6:	bf08      	it	eq
 80064a8:	1aed      	subeq	r5, r5, r3
 80064aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80064ae:	bf08      	it	eq
 80064b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b4:	4293      	cmp	r3, r2
 80064b6:	bfc4      	itt	gt
 80064b8:	1a9b      	subgt	r3, r3, r2
 80064ba:	18ed      	addgt	r5, r5, r3
 80064bc:	42b5      	cmp	r5, r6
 80064be:	d11a      	bne.n	80064f6 <_printf_common+0xd2>
 80064c0:	2000      	movs	r0, #0
 80064c2:	e008      	b.n	80064d6 <_printf_common+0xb2>
 80064c4:	2301      	movs	r3, #1
 80064c6:	4652      	mov	r2, sl
 80064c8:	4641      	mov	r1, r8
 80064ca:	4638      	mov	r0, r7
 80064cc:	47c8      	blx	r9
 80064ce:	3001      	adds	r0, #1
 80064d0:	d103      	bne.n	80064da <_printf_common+0xb6>
 80064d2:	f04f 30ff 	mov.w	r0, #4294967295
 80064d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064da:	3501      	adds	r5, #1
 80064dc:	e7c1      	b.n	8006462 <_printf_common+0x3e>
 80064de:	2030      	movs	r0, #48	@ 0x30
 80064e0:	18e1      	adds	r1, r4, r3
 80064e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064ec:	4422      	add	r2, r4
 80064ee:	3302      	adds	r3, #2
 80064f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064f4:	e7c2      	b.n	800647c <_printf_common+0x58>
 80064f6:	2301      	movs	r3, #1
 80064f8:	4622      	mov	r2, r4
 80064fa:	4641      	mov	r1, r8
 80064fc:	4638      	mov	r0, r7
 80064fe:	47c8      	blx	r9
 8006500:	3001      	adds	r0, #1
 8006502:	d0e6      	beq.n	80064d2 <_printf_common+0xae>
 8006504:	3601      	adds	r6, #1
 8006506:	e7d9      	b.n	80064bc <_printf_common+0x98>

08006508 <_printf_i>:
 8006508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800650c:	7e0f      	ldrb	r7, [r1, #24]
 800650e:	4691      	mov	r9, r2
 8006510:	2f78      	cmp	r7, #120	@ 0x78
 8006512:	4680      	mov	r8, r0
 8006514:	460c      	mov	r4, r1
 8006516:	469a      	mov	sl, r3
 8006518:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800651a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800651e:	d807      	bhi.n	8006530 <_printf_i+0x28>
 8006520:	2f62      	cmp	r7, #98	@ 0x62
 8006522:	d80a      	bhi.n	800653a <_printf_i+0x32>
 8006524:	2f00      	cmp	r7, #0
 8006526:	f000 80d1 	beq.w	80066cc <_printf_i+0x1c4>
 800652a:	2f58      	cmp	r7, #88	@ 0x58
 800652c:	f000 80b8 	beq.w	80066a0 <_printf_i+0x198>
 8006530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006534:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006538:	e03a      	b.n	80065b0 <_printf_i+0xa8>
 800653a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800653e:	2b15      	cmp	r3, #21
 8006540:	d8f6      	bhi.n	8006530 <_printf_i+0x28>
 8006542:	a101      	add	r1, pc, #4	@ (adr r1, 8006548 <_printf_i+0x40>)
 8006544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006548:	080065a1 	.word	0x080065a1
 800654c:	080065b5 	.word	0x080065b5
 8006550:	08006531 	.word	0x08006531
 8006554:	08006531 	.word	0x08006531
 8006558:	08006531 	.word	0x08006531
 800655c:	08006531 	.word	0x08006531
 8006560:	080065b5 	.word	0x080065b5
 8006564:	08006531 	.word	0x08006531
 8006568:	08006531 	.word	0x08006531
 800656c:	08006531 	.word	0x08006531
 8006570:	08006531 	.word	0x08006531
 8006574:	080066b3 	.word	0x080066b3
 8006578:	080065df 	.word	0x080065df
 800657c:	0800666d 	.word	0x0800666d
 8006580:	08006531 	.word	0x08006531
 8006584:	08006531 	.word	0x08006531
 8006588:	080066d5 	.word	0x080066d5
 800658c:	08006531 	.word	0x08006531
 8006590:	080065df 	.word	0x080065df
 8006594:	08006531 	.word	0x08006531
 8006598:	08006531 	.word	0x08006531
 800659c:	08006675 	.word	0x08006675
 80065a0:	6833      	ldr	r3, [r6, #0]
 80065a2:	1d1a      	adds	r2, r3, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6032      	str	r2, [r6, #0]
 80065a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065b0:	2301      	movs	r3, #1
 80065b2:	e09c      	b.n	80066ee <_printf_i+0x1e6>
 80065b4:	6833      	ldr	r3, [r6, #0]
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	1d19      	adds	r1, r3, #4
 80065ba:	6031      	str	r1, [r6, #0]
 80065bc:	0606      	lsls	r6, r0, #24
 80065be:	d501      	bpl.n	80065c4 <_printf_i+0xbc>
 80065c0:	681d      	ldr	r5, [r3, #0]
 80065c2:	e003      	b.n	80065cc <_printf_i+0xc4>
 80065c4:	0645      	lsls	r5, r0, #25
 80065c6:	d5fb      	bpl.n	80065c0 <_printf_i+0xb8>
 80065c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065cc:	2d00      	cmp	r5, #0
 80065ce:	da03      	bge.n	80065d8 <_printf_i+0xd0>
 80065d0:	232d      	movs	r3, #45	@ 0x2d
 80065d2:	426d      	negs	r5, r5
 80065d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065d8:	230a      	movs	r3, #10
 80065da:	4858      	ldr	r0, [pc, #352]	@ (800673c <_printf_i+0x234>)
 80065dc:	e011      	b.n	8006602 <_printf_i+0xfa>
 80065de:	6821      	ldr	r1, [r4, #0]
 80065e0:	6833      	ldr	r3, [r6, #0]
 80065e2:	0608      	lsls	r0, r1, #24
 80065e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80065e8:	d402      	bmi.n	80065f0 <_printf_i+0xe8>
 80065ea:	0649      	lsls	r1, r1, #25
 80065ec:	bf48      	it	mi
 80065ee:	b2ad      	uxthmi	r5, r5
 80065f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80065f2:	6033      	str	r3, [r6, #0]
 80065f4:	bf14      	ite	ne
 80065f6:	230a      	movne	r3, #10
 80065f8:	2308      	moveq	r3, #8
 80065fa:	4850      	ldr	r0, [pc, #320]	@ (800673c <_printf_i+0x234>)
 80065fc:	2100      	movs	r1, #0
 80065fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006602:	6866      	ldr	r6, [r4, #4]
 8006604:	2e00      	cmp	r6, #0
 8006606:	60a6      	str	r6, [r4, #8]
 8006608:	db05      	blt.n	8006616 <_printf_i+0x10e>
 800660a:	6821      	ldr	r1, [r4, #0]
 800660c:	432e      	orrs	r6, r5
 800660e:	f021 0104 	bic.w	r1, r1, #4
 8006612:	6021      	str	r1, [r4, #0]
 8006614:	d04b      	beq.n	80066ae <_printf_i+0x1a6>
 8006616:	4616      	mov	r6, r2
 8006618:	fbb5 f1f3 	udiv	r1, r5, r3
 800661c:	fb03 5711 	mls	r7, r3, r1, r5
 8006620:	5dc7      	ldrb	r7, [r0, r7]
 8006622:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006626:	462f      	mov	r7, r5
 8006628:	42bb      	cmp	r3, r7
 800662a:	460d      	mov	r5, r1
 800662c:	d9f4      	bls.n	8006618 <_printf_i+0x110>
 800662e:	2b08      	cmp	r3, #8
 8006630:	d10b      	bne.n	800664a <_printf_i+0x142>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	07df      	lsls	r7, r3, #31
 8006636:	d508      	bpl.n	800664a <_printf_i+0x142>
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	6861      	ldr	r1, [r4, #4]
 800663c:	4299      	cmp	r1, r3
 800663e:	bfde      	ittt	le
 8006640:	2330      	movle	r3, #48	@ 0x30
 8006642:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006646:	f106 36ff 	addle.w	r6, r6, #4294967295
 800664a:	1b92      	subs	r2, r2, r6
 800664c:	6122      	str	r2, [r4, #16]
 800664e:	464b      	mov	r3, r9
 8006650:	4621      	mov	r1, r4
 8006652:	4640      	mov	r0, r8
 8006654:	f8cd a000 	str.w	sl, [sp]
 8006658:	aa03      	add	r2, sp, #12
 800665a:	f7ff fee3 	bl	8006424 <_printf_common>
 800665e:	3001      	adds	r0, #1
 8006660:	d14a      	bne.n	80066f8 <_printf_i+0x1f0>
 8006662:	f04f 30ff 	mov.w	r0, #4294967295
 8006666:	b004      	add	sp, #16
 8006668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	f043 0320 	orr.w	r3, r3, #32
 8006672:	6023      	str	r3, [r4, #0]
 8006674:	2778      	movs	r7, #120	@ 0x78
 8006676:	4832      	ldr	r0, [pc, #200]	@ (8006740 <_printf_i+0x238>)
 8006678:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	6831      	ldr	r1, [r6, #0]
 8006680:	061f      	lsls	r7, r3, #24
 8006682:	f851 5b04 	ldr.w	r5, [r1], #4
 8006686:	d402      	bmi.n	800668e <_printf_i+0x186>
 8006688:	065f      	lsls	r7, r3, #25
 800668a:	bf48      	it	mi
 800668c:	b2ad      	uxthmi	r5, r5
 800668e:	6031      	str	r1, [r6, #0]
 8006690:	07d9      	lsls	r1, r3, #31
 8006692:	bf44      	itt	mi
 8006694:	f043 0320 	orrmi.w	r3, r3, #32
 8006698:	6023      	strmi	r3, [r4, #0]
 800669a:	b11d      	cbz	r5, 80066a4 <_printf_i+0x19c>
 800669c:	2310      	movs	r3, #16
 800669e:	e7ad      	b.n	80065fc <_printf_i+0xf4>
 80066a0:	4826      	ldr	r0, [pc, #152]	@ (800673c <_printf_i+0x234>)
 80066a2:	e7e9      	b.n	8006678 <_printf_i+0x170>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	f023 0320 	bic.w	r3, r3, #32
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	e7f6      	b.n	800669c <_printf_i+0x194>
 80066ae:	4616      	mov	r6, r2
 80066b0:	e7bd      	b.n	800662e <_printf_i+0x126>
 80066b2:	6833      	ldr	r3, [r6, #0]
 80066b4:	6825      	ldr	r5, [r4, #0]
 80066b6:	1d18      	adds	r0, r3, #4
 80066b8:	6961      	ldr	r1, [r4, #20]
 80066ba:	6030      	str	r0, [r6, #0]
 80066bc:	062e      	lsls	r6, r5, #24
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	d501      	bpl.n	80066c6 <_printf_i+0x1be>
 80066c2:	6019      	str	r1, [r3, #0]
 80066c4:	e002      	b.n	80066cc <_printf_i+0x1c4>
 80066c6:	0668      	lsls	r0, r5, #25
 80066c8:	d5fb      	bpl.n	80066c2 <_printf_i+0x1ba>
 80066ca:	8019      	strh	r1, [r3, #0]
 80066cc:	2300      	movs	r3, #0
 80066ce:	4616      	mov	r6, r2
 80066d0:	6123      	str	r3, [r4, #16]
 80066d2:	e7bc      	b.n	800664e <_printf_i+0x146>
 80066d4:	6833      	ldr	r3, [r6, #0]
 80066d6:	2100      	movs	r1, #0
 80066d8:	1d1a      	adds	r2, r3, #4
 80066da:	6032      	str	r2, [r6, #0]
 80066dc:	681e      	ldr	r6, [r3, #0]
 80066de:	6862      	ldr	r2, [r4, #4]
 80066e0:	4630      	mov	r0, r6
 80066e2:	f000 f97b 	bl	80069dc <memchr>
 80066e6:	b108      	cbz	r0, 80066ec <_printf_i+0x1e4>
 80066e8:	1b80      	subs	r0, r0, r6
 80066ea:	6060      	str	r0, [r4, #4]
 80066ec:	6863      	ldr	r3, [r4, #4]
 80066ee:	6123      	str	r3, [r4, #16]
 80066f0:	2300      	movs	r3, #0
 80066f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066f6:	e7aa      	b.n	800664e <_printf_i+0x146>
 80066f8:	4632      	mov	r2, r6
 80066fa:	4649      	mov	r1, r9
 80066fc:	4640      	mov	r0, r8
 80066fe:	6923      	ldr	r3, [r4, #16]
 8006700:	47d0      	blx	sl
 8006702:	3001      	adds	r0, #1
 8006704:	d0ad      	beq.n	8006662 <_printf_i+0x15a>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	079b      	lsls	r3, r3, #30
 800670a:	d413      	bmi.n	8006734 <_printf_i+0x22c>
 800670c:	68e0      	ldr	r0, [r4, #12]
 800670e:	9b03      	ldr	r3, [sp, #12]
 8006710:	4298      	cmp	r0, r3
 8006712:	bfb8      	it	lt
 8006714:	4618      	movlt	r0, r3
 8006716:	e7a6      	b.n	8006666 <_printf_i+0x15e>
 8006718:	2301      	movs	r3, #1
 800671a:	4632      	mov	r2, r6
 800671c:	4649      	mov	r1, r9
 800671e:	4640      	mov	r0, r8
 8006720:	47d0      	blx	sl
 8006722:	3001      	adds	r0, #1
 8006724:	d09d      	beq.n	8006662 <_printf_i+0x15a>
 8006726:	3501      	adds	r5, #1
 8006728:	68e3      	ldr	r3, [r4, #12]
 800672a:	9903      	ldr	r1, [sp, #12]
 800672c:	1a5b      	subs	r3, r3, r1
 800672e:	42ab      	cmp	r3, r5
 8006730:	dcf2      	bgt.n	8006718 <_printf_i+0x210>
 8006732:	e7eb      	b.n	800670c <_printf_i+0x204>
 8006734:	2500      	movs	r5, #0
 8006736:	f104 0619 	add.w	r6, r4, #25
 800673a:	e7f5      	b.n	8006728 <_printf_i+0x220>
 800673c:	08006bf7 	.word	0x08006bf7
 8006740:	08006c08 	.word	0x08006c08

08006744 <__sflush_r>:
 8006744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	0716      	lsls	r6, r2, #28
 800674c:	4605      	mov	r5, r0
 800674e:	460c      	mov	r4, r1
 8006750:	d454      	bmi.n	80067fc <__sflush_r+0xb8>
 8006752:	684b      	ldr	r3, [r1, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	dc02      	bgt.n	800675e <__sflush_r+0x1a>
 8006758:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	dd48      	ble.n	80067f0 <__sflush_r+0xac>
 800675e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006760:	2e00      	cmp	r6, #0
 8006762:	d045      	beq.n	80067f0 <__sflush_r+0xac>
 8006764:	2300      	movs	r3, #0
 8006766:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800676a:	682f      	ldr	r7, [r5, #0]
 800676c:	6a21      	ldr	r1, [r4, #32]
 800676e:	602b      	str	r3, [r5, #0]
 8006770:	d030      	beq.n	80067d4 <__sflush_r+0x90>
 8006772:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	0759      	lsls	r1, r3, #29
 8006778:	d505      	bpl.n	8006786 <__sflush_r+0x42>
 800677a:	6863      	ldr	r3, [r4, #4]
 800677c:	1ad2      	subs	r2, r2, r3
 800677e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006780:	b10b      	cbz	r3, 8006786 <__sflush_r+0x42>
 8006782:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006784:	1ad2      	subs	r2, r2, r3
 8006786:	2300      	movs	r3, #0
 8006788:	4628      	mov	r0, r5
 800678a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800678c:	6a21      	ldr	r1, [r4, #32]
 800678e:	47b0      	blx	r6
 8006790:	1c43      	adds	r3, r0, #1
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	d106      	bne.n	80067a4 <__sflush_r+0x60>
 8006796:	6829      	ldr	r1, [r5, #0]
 8006798:	291d      	cmp	r1, #29
 800679a:	d82b      	bhi.n	80067f4 <__sflush_r+0xb0>
 800679c:	4a28      	ldr	r2, [pc, #160]	@ (8006840 <__sflush_r+0xfc>)
 800679e:	40ca      	lsrs	r2, r1
 80067a0:	07d6      	lsls	r6, r2, #31
 80067a2:	d527      	bpl.n	80067f4 <__sflush_r+0xb0>
 80067a4:	2200      	movs	r2, #0
 80067a6:	6062      	str	r2, [r4, #4]
 80067a8:	6922      	ldr	r2, [r4, #16]
 80067aa:	04d9      	lsls	r1, r3, #19
 80067ac:	6022      	str	r2, [r4, #0]
 80067ae:	d504      	bpl.n	80067ba <__sflush_r+0x76>
 80067b0:	1c42      	adds	r2, r0, #1
 80067b2:	d101      	bne.n	80067b8 <__sflush_r+0x74>
 80067b4:	682b      	ldr	r3, [r5, #0]
 80067b6:	b903      	cbnz	r3, 80067ba <__sflush_r+0x76>
 80067b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80067ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067bc:	602f      	str	r7, [r5, #0]
 80067be:	b1b9      	cbz	r1, 80067f0 <__sflush_r+0xac>
 80067c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067c4:	4299      	cmp	r1, r3
 80067c6:	d002      	beq.n	80067ce <__sflush_r+0x8a>
 80067c8:	4628      	mov	r0, r5
 80067ca:	f7ff fbf5 	bl	8005fb8 <_free_r>
 80067ce:	2300      	movs	r3, #0
 80067d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80067d2:	e00d      	b.n	80067f0 <__sflush_r+0xac>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b0      	blx	r6
 80067da:	4602      	mov	r2, r0
 80067dc:	1c50      	adds	r0, r2, #1
 80067de:	d1c9      	bne.n	8006774 <__sflush_r+0x30>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0c6      	beq.n	8006774 <__sflush_r+0x30>
 80067e6:	2b1d      	cmp	r3, #29
 80067e8:	d001      	beq.n	80067ee <__sflush_r+0xaa>
 80067ea:	2b16      	cmp	r3, #22
 80067ec:	d11d      	bne.n	800682a <__sflush_r+0xe6>
 80067ee:	602f      	str	r7, [r5, #0]
 80067f0:	2000      	movs	r0, #0
 80067f2:	e021      	b.n	8006838 <__sflush_r+0xf4>
 80067f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067f8:	b21b      	sxth	r3, r3
 80067fa:	e01a      	b.n	8006832 <__sflush_r+0xee>
 80067fc:	690f      	ldr	r7, [r1, #16]
 80067fe:	2f00      	cmp	r7, #0
 8006800:	d0f6      	beq.n	80067f0 <__sflush_r+0xac>
 8006802:	0793      	lsls	r3, r2, #30
 8006804:	bf18      	it	ne
 8006806:	2300      	movne	r3, #0
 8006808:	680e      	ldr	r6, [r1, #0]
 800680a:	bf08      	it	eq
 800680c:	694b      	ldreq	r3, [r1, #20]
 800680e:	1bf6      	subs	r6, r6, r7
 8006810:	600f      	str	r7, [r1, #0]
 8006812:	608b      	str	r3, [r1, #8]
 8006814:	2e00      	cmp	r6, #0
 8006816:	ddeb      	ble.n	80067f0 <__sflush_r+0xac>
 8006818:	4633      	mov	r3, r6
 800681a:	463a      	mov	r2, r7
 800681c:	4628      	mov	r0, r5
 800681e:	6a21      	ldr	r1, [r4, #32]
 8006820:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006824:	47e0      	blx	ip
 8006826:	2800      	cmp	r0, #0
 8006828:	dc07      	bgt.n	800683a <__sflush_r+0xf6>
 800682a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800682e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006832:	f04f 30ff 	mov.w	r0, #4294967295
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683a:	4407      	add	r7, r0
 800683c:	1a36      	subs	r6, r6, r0
 800683e:	e7e9      	b.n	8006814 <__sflush_r+0xd0>
 8006840:	20400001 	.word	0x20400001

08006844 <_fflush_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	690b      	ldr	r3, [r1, #16]
 8006848:	4605      	mov	r5, r0
 800684a:	460c      	mov	r4, r1
 800684c:	b913      	cbnz	r3, 8006854 <_fflush_r+0x10>
 800684e:	2500      	movs	r5, #0
 8006850:	4628      	mov	r0, r5
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	b118      	cbz	r0, 800685e <_fflush_r+0x1a>
 8006856:	6a03      	ldr	r3, [r0, #32]
 8006858:	b90b      	cbnz	r3, 800685e <_fflush_r+0x1a>
 800685a:	f7ff faa5 	bl	8005da8 <__sinit>
 800685e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f3      	beq.n	800684e <_fflush_r+0xa>
 8006866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006868:	07d0      	lsls	r0, r2, #31
 800686a:	d404      	bmi.n	8006876 <_fflush_r+0x32>
 800686c:	0599      	lsls	r1, r3, #22
 800686e:	d402      	bmi.n	8006876 <_fflush_r+0x32>
 8006870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006872:	f7ff fb9e 	bl	8005fb2 <__retarget_lock_acquire_recursive>
 8006876:	4628      	mov	r0, r5
 8006878:	4621      	mov	r1, r4
 800687a:	f7ff ff63 	bl	8006744 <__sflush_r>
 800687e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006880:	4605      	mov	r5, r0
 8006882:	07da      	lsls	r2, r3, #31
 8006884:	d4e4      	bmi.n	8006850 <_fflush_r+0xc>
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	059b      	lsls	r3, r3, #22
 800688a:	d4e1      	bmi.n	8006850 <_fflush_r+0xc>
 800688c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800688e:	f7ff fb91 	bl	8005fb4 <__retarget_lock_release_recursive>
 8006892:	e7dd      	b.n	8006850 <_fflush_r+0xc>

08006894 <__swbuf_r>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	460e      	mov	r6, r1
 8006898:	4614      	mov	r4, r2
 800689a:	4605      	mov	r5, r0
 800689c:	b118      	cbz	r0, 80068a6 <__swbuf_r+0x12>
 800689e:	6a03      	ldr	r3, [r0, #32]
 80068a0:	b90b      	cbnz	r3, 80068a6 <__swbuf_r+0x12>
 80068a2:	f7ff fa81 	bl	8005da8 <__sinit>
 80068a6:	69a3      	ldr	r3, [r4, #24]
 80068a8:	60a3      	str	r3, [r4, #8]
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	071a      	lsls	r2, r3, #28
 80068ae:	d501      	bpl.n	80068b4 <__swbuf_r+0x20>
 80068b0:	6923      	ldr	r3, [r4, #16]
 80068b2:	b943      	cbnz	r3, 80068c6 <__swbuf_r+0x32>
 80068b4:	4621      	mov	r1, r4
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 f82a 	bl	8006910 <__swsetup_r>
 80068bc:	b118      	cbz	r0, 80068c6 <__swbuf_r+0x32>
 80068be:	f04f 37ff 	mov.w	r7, #4294967295
 80068c2:	4638      	mov	r0, r7
 80068c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	6922      	ldr	r2, [r4, #16]
 80068ca:	b2f6      	uxtb	r6, r6
 80068cc:	1a98      	subs	r0, r3, r2
 80068ce:	6963      	ldr	r3, [r4, #20]
 80068d0:	4637      	mov	r7, r6
 80068d2:	4283      	cmp	r3, r0
 80068d4:	dc05      	bgt.n	80068e2 <__swbuf_r+0x4e>
 80068d6:	4621      	mov	r1, r4
 80068d8:	4628      	mov	r0, r5
 80068da:	f7ff ffb3 	bl	8006844 <_fflush_r>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d1ed      	bne.n	80068be <__swbuf_r+0x2a>
 80068e2:	68a3      	ldr	r3, [r4, #8]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	60a3      	str	r3, [r4, #8]
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	6022      	str	r2, [r4, #0]
 80068ee:	701e      	strb	r6, [r3, #0]
 80068f0:	6962      	ldr	r2, [r4, #20]
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d004      	beq.n	8006902 <__swbuf_r+0x6e>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	07db      	lsls	r3, r3, #31
 80068fc:	d5e1      	bpl.n	80068c2 <__swbuf_r+0x2e>
 80068fe:	2e0a      	cmp	r6, #10
 8006900:	d1df      	bne.n	80068c2 <__swbuf_r+0x2e>
 8006902:	4621      	mov	r1, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f7ff ff9d 	bl	8006844 <_fflush_r>
 800690a:	2800      	cmp	r0, #0
 800690c:	d0d9      	beq.n	80068c2 <__swbuf_r+0x2e>
 800690e:	e7d6      	b.n	80068be <__swbuf_r+0x2a>

08006910 <__swsetup_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4b29      	ldr	r3, [pc, #164]	@ (80069b8 <__swsetup_r+0xa8>)
 8006914:	4605      	mov	r5, r0
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	460c      	mov	r4, r1
 800691a:	b118      	cbz	r0, 8006924 <__swsetup_r+0x14>
 800691c:	6a03      	ldr	r3, [r0, #32]
 800691e:	b90b      	cbnz	r3, 8006924 <__swsetup_r+0x14>
 8006920:	f7ff fa42 	bl	8005da8 <__sinit>
 8006924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006928:	0719      	lsls	r1, r3, #28
 800692a:	d422      	bmi.n	8006972 <__swsetup_r+0x62>
 800692c:	06da      	lsls	r2, r3, #27
 800692e:	d407      	bmi.n	8006940 <__swsetup_r+0x30>
 8006930:	2209      	movs	r2, #9
 8006932:	602a      	str	r2, [r5, #0]
 8006934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006938:	f04f 30ff 	mov.w	r0, #4294967295
 800693c:	81a3      	strh	r3, [r4, #12]
 800693e:	e033      	b.n	80069a8 <__swsetup_r+0x98>
 8006940:	0758      	lsls	r0, r3, #29
 8006942:	d512      	bpl.n	800696a <__swsetup_r+0x5a>
 8006944:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006946:	b141      	cbz	r1, 800695a <__swsetup_r+0x4a>
 8006948:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800694c:	4299      	cmp	r1, r3
 800694e:	d002      	beq.n	8006956 <__swsetup_r+0x46>
 8006950:	4628      	mov	r0, r5
 8006952:	f7ff fb31 	bl	8005fb8 <_free_r>
 8006956:	2300      	movs	r3, #0
 8006958:	6363      	str	r3, [r4, #52]	@ 0x34
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006960:	81a3      	strh	r3, [r4, #12]
 8006962:	2300      	movs	r3, #0
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	f043 0308 	orr.w	r3, r3, #8
 8006970:	81a3      	strh	r3, [r4, #12]
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	b94b      	cbnz	r3, 800698a <__swsetup_r+0x7a>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800697c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006980:	d003      	beq.n	800698a <__swsetup_r+0x7a>
 8006982:	4621      	mov	r1, r4
 8006984:	4628      	mov	r0, r5
 8006986:	f000 f85c 	bl	8006a42 <__smakebuf_r>
 800698a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800698e:	f013 0201 	ands.w	r2, r3, #1
 8006992:	d00a      	beq.n	80069aa <__swsetup_r+0x9a>
 8006994:	2200      	movs	r2, #0
 8006996:	60a2      	str	r2, [r4, #8]
 8006998:	6962      	ldr	r2, [r4, #20]
 800699a:	4252      	negs	r2, r2
 800699c:	61a2      	str	r2, [r4, #24]
 800699e:	6922      	ldr	r2, [r4, #16]
 80069a0:	b942      	cbnz	r2, 80069b4 <__swsetup_r+0xa4>
 80069a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069a6:	d1c5      	bne.n	8006934 <__swsetup_r+0x24>
 80069a8:	bd38      	pop	{r3, r4, r5, pc}
 80069aa:	0799      	lsls	r1, r3, #30
 80069ac:	bf58      	it	pl
 80069ae:	6962      	ldrpl	r2, [r4, #20]
 80069b0:	60a2      	str	r2, [r4, #8]
 80069b2:	e7f4      	b.n	800699e <__swsetup_r+0x8e>
 80069b4:	2000      	movs	r0, #0
 80069b6:	e7f7      	b.n	80069a8 <__swsetup_r+0x98>
 80069b8:	20000024 	.word	0x20000024

080069bc <_sbrk_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	2300      	movs	r3, #0
 80069c0:	4d05      	ldr	r5, [pc, #20]	@ (80069d8 <_sbrk_r+0x1c>)
 80069c2:	4604      	mov	r4, r0
 80069c4:	4608      	mov	r0, r1
 80069c6:	602b      	str	r3, [r5, #0]
 80069c8:	f7fa fd8c 	bl	80014e4 <_sbrk>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	d102      	bne.n	80069d6 <_sbrk_r+0x1a>
 80069d0:	682b      	ldr	r3, [r5, #0]
 80069d2:	b103      	cbz	r3, 80069d6 <_sbrk_r+0x1a>
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	bd38      	pop	{r3, r4, r5, pc}
 80069d8:	20000398 	.word	0x20000398

080069dc <memchr>:
 80069dc:	4603      	mov	r3, r0
 80069de:	b510      	push	{r4, lr}
 80069e0:	b2c9      	uxtb	r1, r1
 80069e2:	4402      	add	r2, r0
 80069e4:	4293      	cmp	r3, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	d101      	bne.n	80069ee <memchr+0x12>
 80069ea:	2000      	movs	r0, #0
 80069ec:	e003      	b.n	80069f6 <memchr+0x1a>
 80069ee:	7804      	ldrb	r4, [r0, #0]
 80069f0:	3301      	adds	r3, #1
 80069f2:	428c      	cmp	r4, r1
 80069f4:	d1f6      	bne.n	80069e4 <memchr+0x8>
 80069f6:	bd10      	pop	{r4, pc}

080069f8 <__swhatbuf_r>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	460c      	mov	r4, r1
 80069fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a00:	4615      	mov	r5, r2
 8006a02:	2900      	cmp	r1, #0
 8006a04:	461e      	mov	r6, r3
 8006a06:	b096      	sub	sp, #88	@ 0x58
 8006a08:	da0c      	bge.n	8006a24 <__swhatbuf_r+0x2c>
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a12:	bf14      	ite	ne
 8006a14:	2340      	movne	r3, #64	@ 0x40
 8006a16:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	6031      	str	r1, [r6, #0]
 8006a1e:	602b      	str	r3, [r5, #0]
 8006a20:	b016      	add	sp, #88	@ 0x58
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	466a      	mov	r2, sp
 8006a26:	f000 f849 	bl	8006abc <_fstat_r>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	dbed      	blt.n	8006a0a <__swhatbuf_r+0x12>
 8006a2e:	9901      	ldr	r1, [sp, #4]
 8006a30:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a34:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a38:	4259      	negs	r1, r3
 8006a3a:	4159      	adcs	r1, r3
 8006a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a40:	e7eb      	b.n	8006a1a <__swhatbuf_r+0x22>

08006a42 <__smakebuf_r>:
 8006a42:	898b      	ldrh	r3, [r1, #12]
 8006a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a46:	079d      	lsls	r5, r3, #30
 8006a48:	4606      	mov	r6, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	d507      	bpl.n	8006a5e <__smakebuf_r+0x1c>
 8006a4e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a52:	6023      	str	r3, [r4, #0]
 8006a54:	6123      	str	r3, [r4, #16]
 8006a56:	2301      	movs	r3, #1
 8006a58:	6163      	str	r3, [r4, #20]
 8006a5a:	b003      	add	sp, #12
 8006a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a5e:	466a      	mov	r2, sp
 8006a60:	ab01      	add	r3, sp, #4
 8006a62:	f7ff ffc9 	bl	80069f8 <__swhatbuf_r>
 8006a66:	9f00      	ldr	r7, [sp, #0]
 8006a68:	4605      	mov	r5, r0
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f7ff fb0d 	bl	800608c <_malloc_r>
 8006a72:	b948      	cbnz	r0, 8006a88 <__smakebuf_r+0x46>
 8006a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a78:	059a      	lsls	r2, r3, #22
 8006a7a:	d4ee      	bmi.n	8006a5a <__smakebuf_r+0x18>
 8006a7c:	f023 0303 	bic.w	r3, r3, #3
 8006a80:	f043 0302 	orr.w	r3, r3, #2
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	e7e2      	b.n	8006a4e <__smakebuf_r+0xc>
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a92:	81a3      	strh	r3, [r4, #12]
 8006a94:	9b01      	ldr	r3, [sp, #4]
 8006a96:	6020      	str	r0, [r4, #0]
 8006a98:	b15b      	cbz	r3, 8006ab2 <__smakebuf_r+0x70>
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa0:	f000 f81e 	bl	8006ae0 <_isatty_r>
 8006aa4:	b128      	cbz	r0, 8006ab2 <__smakebuf_r+0x70>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	f023 0303 	bic.w	r3, r3, #3
 8006aac:	f043 0301 	orr.w	r3, r3, #1
 8006ab0:	81a3      	strh	r3, [r4, #12]
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	431d      	orrs	r5, r3
 8006ab6:	81a5      	strh	r5, [r4, #12]
 8006ab8:	e7cf      	b.n	8006a5a <__smakebuf_r+0x18>
	...

08006abc <_fstat_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	2300      	movs	r3, #0
 8006ac0:	4d06      	ldr	r5, [pc, #24]	@ (8006adc <_fstat_r+0x20>)
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	602b      	str	r3, [r5, #0]
 8006aca:	f7fa fce5 	bl	8001498 <_fstat>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d102      	bne.n	8006ad8 <_fstat_r+0x1c>
 8006ad2:	682b      	ldr	r3, [r5, #0]
 8006ad4:	b103      	cbz	r3, 8006ad8 <_fstat_r+0x1c>
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	bd38      	pop	{r3, r4, r5, pc}
 8006ada:	bf00      	nop
 8006adc:	20000398 	.word	0x20000398

08006ae0 <_isatty_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	4d05      	ldr	r5, [pc, #20]	@ (8006afc <_isatty_r+0x1c>)
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	602b      	str	r3, [r5, #0]
 8006aec:	f7fa fce3 	bl	80014b6 <_isatty>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d102      	bne.n	8006afa <_isatty_r+0x1a>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	b103      	cbz	r3, 8006afa <_isatty_r+0x1a>
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	20000398 	.word	0x20000398

08006b00 <_init>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	bf00      	nop
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr

08006b0c <_fini>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr
