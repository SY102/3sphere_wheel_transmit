
Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a10  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006b1c  08006b1c  00007b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c20  08006c20  00008074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006c20  08006c20  00008074  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006c20  08006c20  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c20  08006c20  00007c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c24  08006c24  00007c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006c28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000074  08006c9c  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08006c9c  000083a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c02  00000000  00000000  0000809d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d7  00000000  00000000  0001ac9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0001e178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecc  00000000  00000000  0001f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac07  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a1b  00000000  00000000  0003af83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d34  00000000  00000000  0005199e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e56d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d8  00000000  00000000  000e5718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000eacf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b04 	.word	0x08006b04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08006b04 	.word	0x08006b04

0800014c <csn_high>:
uint8_t nrf24_get_status(void)
{
    return nrf24_r_reg(STATUS, 1);  // ★ 'STATUS' 사용 (NRF_STATUS 아님)
}

void csn_high(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000156:	4802      	ldr	r0, [pc, #8]	@ (8000160 <csn_high+0x14>)
 8000158:	f003 f820 	bl	800319c <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 시작 표시
	   // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
	}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40011000 	.word	0x40011000

08000164 <csn_low>:



void csn_low(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, GPIO_PIN_RESET);
 8000168:	2200      	movs	r2, #0
 800016a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800016e:	4802      	ldr	r0, [pc, #8]	@ (8000178 <csn_low+0x14>)
 8000170:	f003 f814 	bl	800319c <HAL_GPIO_WritePin>

	    // ← LED 토글: SPI 명령 종료 표시
	    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40011000 	.word	0x40011000

0800017c <ce_high>:

void ce_high(void){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000186:	4802      	ldr	r0, [pc, #8]	@ (8000190 <ce_high+0x14>)
 8000188:	f003 f808 	bl	800319c <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010800 	.word	0x40010800

08000194 <ce_low>:

void ce_low(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, GPIO_PIN_RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019e:	4802      	ldr	r0, [pc, #8]	@ (80001a8 <ce_low+0x14>)
 80001a0:	f002 fffc 	bl	800319c <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	6039      	str	r1, [r7, #0]
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	4613      	mov	r3, r2
 80001ba:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	f043 0320 	orr.w	r3, r3, #32
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001c6:	f7ff ffcd 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001ca:	f107 010f 	add.w	r1, r7, #15
 80001ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d2:	2201      	movs	r2, #1
 80001d4:	4808      	ldr	r0, [pc, #32]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001d6:	f003 fdf9 	bl	8003dcc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001da:	79bb      	ldrb	r3, [r7, #6]
 80001dc:	b29a      	uxth	r2, r3
 80001de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e2:	6839      	ldr	r1, [r7, #0]
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <nrf24_w_reg+0x4c>)
 80001e6:	f003 fdf1 	bl	8003dcc <HAL_SPI_Transmit>

	csn_high();
 80001ea:	f7ff ffaf 	bl	800014c <csn_high>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000110 	.word	0x20000110

080001fc <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	4613      	mov	r3, r2
 800020a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000210:	2300      	movs	r3, #0
 8000212:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000214:	f7ff ffa6 	bl	8000164 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000218:	f107 010f 	add.w	r1, r7, #15
 800021c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000220:	2201      	movs	r2, #1
 8000222:	4809      	ldr	r0, [pc, #36]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000224:	f003 fdd2 	bl	8003dcc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000228:	79bb      	ldrb	r3, [r7, #6]
 800022a:	b29a      	uxth	r2, r3
 800022c:	f107 010e 	add.w	r1, r7, #14
 8000230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000234:	4804      	ldr	r0, [pc, #16]	@ (8000248 <nrf24_r_reg+0x4c>)
 8000236:	f003 ff0d 	bl	8004054 <HAL_SPI_Receive>

	csn_high();
 800023a:	f7ff ff87 	bl	800014c <csn_high>

	return data;
 800023e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000110 	.word	0x20000110

0800024c <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000256:	1df9      	adds	r1, r7, #7
 8000258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800025c:	2201      	movs	r2, #1
 800025e:	4803      	ldr	r0, [pc, #12]	@ (800026c <nrf24_w_spec_cmd+0x20>)
 8000260:	f003 fdb4 	bl	8003dcc <HAL_SPI_Transmit>
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000110 	.word	0x20000110

08000270 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800027a:	2101      	movs	r1, #1
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ffbd 	bl	80001fc <nrf24_r_reg>
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f043 0302 	orr.w	r3, r3, #2
 800028c:	b2db      	uxtb	r3, r3
 800028e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	2201      	movs	r2, #1
 8000294:	4619      	mov	r1, r3
 8000296:	2000      	movs	r0, #0
 8000298:	f7ff ff88 	bl	80001ac <nrf24_w_reg>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <nrf24_pwr_dwn>:

void nrf24_pwr_dwn(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 80002ae:	2101      	movs	r1, #1
 80002b0:	2000      	movs	r0, #0
 80002b2:	f7ff ffa3 	bl	80001fc <nrf24_r_reg>
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PWR_UP);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f023 0302 	bic.w	r3, r3, #2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002c4:	1dfb      	adds	r3, r7, #7
 80002c6:	2201      	movs	r2, #1
 80002c8:	4619      	mov	r1, r3
 80002ca:	2000      	movs	r0, #0
 80002cc:	f7ff ff6e 	bl	80001ac <nrf24_w_reg>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <nrf24_tx_pwr>:

void nrf24_tx_pwr(uint8_t pwr){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80002e6:	2101      	movs	r1, #1
 80002e8:	2006      	movs	r0, #6
 80002ea:	f7ff ff87 	bl	80001fc <nrf24_r_reg>
 80002ee:	4603      	mov	r3, r0
 80002f0:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	b25a      	sxtb	r2, r3
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	b25b      	sxtb	r3, r3
 8000308:	4313      	orrs	r3, r2
 800030a:	b25b      	sxtb	r3, r3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 8000310:	f107 030f 	add.w	r3, r7, #15
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	2006      	movs	r0, #6
 800031a:	f7ff ff47 	bl	80001ac <nrf24_w_reg>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	4603      	mov	r3, r0
 800032e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8000334:	2101      	movs	r1, #1
 8000336:	2006      	movs	r0, #6
 8000338:	f7ff ff60 	bl	80001fc <nrf24_r_reg>
 800033c:	4603      	mov	r3, r0
 800033e:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000346:	b2db      	uxtb	r3, r3
 8000348:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d105      	bne.n	800035c <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	b2db      	uxtb	r3, r3
 8000358:	73fb      	strb	r3, [r7, #15]
 800035a:	e007      	b.n	800036c <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d104      	bne.n	800036c <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	f043 0320 	orr.w	r3, r3, #32
 8000368:	b2db      	uxtb	r3, r3
 800036a:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 800036c:	f107 030f 	add.w	r3, r7, #15
 8000370:	2201      	movs	r2, #1
 8000372:	4619      	mov	r1, r3
 8000374:	2006      	movs	r0, #6
 8000376:	f7ff ff19 	bl	80001ac <nrf24_w_reg>
}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000382:	b580      	push	{r7, lr}
 8000384:	b082      	sub	sp, #8
 8000386:	af00      	add	r7, sp, #0
 8000388:	4603      	mov	r3, r0
 800038a:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	2005      	movs	r0, #5
 8000394:	f7ff ff0a 	bl	80001ac <nrf24_w_reg>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 80003a8:	2205      	movs	r2, #5
 80003aa:	6879      	ldr	r1, [r7, #4]
 80003ac:	2010      	movs	r0, #16
 80003ae:	f7ff fefd 	bl	80001ac <nrf24_w_reg>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	460a      	mov	r2, r1
 80003c6:	71fb      	strb	r3, [r7, #7]
 80003c8:	4613      	mov	r3, r2
 80003ca:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 80003cc:	79bb      	ldrb	r3, [r7, #6]
 80003ce:	2b20      	cmp	r3, #32
 80003d0:	d901      	bls.n	80003d6 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 80003d2:	2320      	movs	r3, #32
 80003d4:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2b05      	cmp	r3, #5
 80003da:	d839      	bhi.n	8000450 <nrf24_pipe_pld_size+0x94>
 80003dc:	a201      	add	r2, pc, #4	@ (adr r2, 80003e4 <nrf24_pipe_pld_size+0x28>)
 80003de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e2:	bf00      	nop
 80003e4:	080003fd 	.word	0x080003fd
 80003e8:	0800040b 	.word	0x0800040b
 80003ec:	08000419 	.word	0x08000419
 80003f0:	08000427 	.word	0x08000427
 80003f4:	08000435 	.word	0x08000435
 80003f8:	08000443 	.word	0x08000443
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 80003fc:	1dbb      	adds	r3, r7, #6
 80003fe:	2201      	movs	r2, #1
 8000400:	4619      	mov	r1, r3
 8000402:	2011      	movs	r0, #17
 8000404:	f7ff fed2 	bl	80001ac <nrf24_w_reg>

		break;
 8000408:	e022      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800040a:	1dbb      	adds	r3, r7, #6
 800040c:	2201      	movs	r2, #1
 800040e:	4619      	mov	r1, r3
 8000410:	2012      	movs	r0, #18
 8000412:	f7ff fecb 	bl	80001ac <nrf24_w_reg>

		break;
 8000416:	e01b      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 8000418:	1dbb      	adds	r3, r7, #6
 800041a:	2201      	movs	r2, #1
 800041c:	4619      	mov	r1, r3
 800041e:	2013      	movs	r0, #19
 8000420:	f7ff fec4 	bl	80001ac <nrf24_w_reg>

		break;
 8000424:	e014      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	2014      	movs	r0, #20
 800042e:	f7ff febd 	bl	80001ac <nrf24_w_reg>

		break;
 8000432:	e00d      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 8000434:	1dbb      	adds	r3, r7, #6
 8000436:	2201      	movs	r2, #1
 8000438:	4619      	mov	r1, r3
 800043a:	2015      	movs	r0, #21
 800043c:	f7ff feb6 	bl	80001ac <nrf24_w_reg>

		break;
 8000440:	e006      	b.n	8000450 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	2201      	movs	r2, #1
 8000446:	4619      	mov	r1, r3
 8000448:	2016      	movs	r0, #22
 800044a:	f7ff feaf 	bl	80001ac <nrf24_w_reg>

		break;
 800044e:	bf00      	nop
	}
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <nrf24_cls_rx_pipe>:
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_cls_rx_pipe(uint8_t pipe){
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(EN_RXADDR, 1);
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fec9 	bl	80001fc <nrf24_r_reg>
 800046a:	4603      	mov	r3, r0
 800046c:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << pipe);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2201      	movs	r2, #1
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	b25b      	sxtb	r3, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	b25a      	sxtb	r2, r3
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	b25b      	sxtb	r3, r3
 8000480:	4013      	ands	r3, r2
 8000482:	b25b      	sxtb	r3, r3
 8000484:	b2db      	uxtb	r3, r3
 8000486:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000488:	f107 030f 	add.w	r3, r7, #15
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	2002      	movs	r0, #2
 8000492:	f7ff fe8b 	bl	80001ac <nrf24_w_reg>
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <nrf24_set_crc>:

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 800049e:	b580      	push	{r7, lr}
 80004a0:	b084      	sub	sp, #16
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	460a      	mov	r2, r1
 80004a8:	71fb      	strb	r3, [r7, #7]
 80004aa:	4613      	mov	r3, r2
 80004ac:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80004ae:	2101      	movs	r1, #1
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fea3 	bl	80001fc <nrf24_r_reg>
 80004b6:	4603      	mov	r3, r0
 80004b8:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	f023 030c 	bic.w	r3, r3, #12
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	b25a      	sxtb	r2, r3
 80004cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	4313      	orrs	r3, r2
 80004de:	b25b      	sxtb	r3, r3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80004e4:	f107 030f 	add.w	r3, r7, #15
 80004e8:	2201      	movs	r2, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fe5d 	bl	80001ac <nrf24_w_reg>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4603      	mov	r3, r0
 8000502:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	3b02      	subs	r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	2201      	movs	r2, #1
 8000510:	4619      	mov	r1, r3
 8000512:	2003      	movs	r0, #3
 8000514:	f7ff fe4a 	bl	80001ac <nrf24_w_reg>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	csn_low();
 8000524:	f7ff fe1e 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000528:	20e1      	movs	r0, #225	@ 0xe1
 800052a:	f7ff fe8f 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 800052e:	f7ff fe0d 	bl	800014c <csn_high>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}

08000536 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8000536:	b580      	push	{r7, lr}
 8000538:	af00      	add	r7, sp, #0
	csn_low();
 800053a:	f7ff fe13 	bl	8000164 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 800053e:	20e2      	movs	r0, #226	@ 0xe2
 8000540:	f7ff fe84 	bl	800024c <nrf24_w_spec_cmd>
	csn_high();
 8000544:	f7ff fe02 	bl	800014c <csn_high>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8000556:	23ff      	movs	r3, #255	@ 0xff
 8000558:	71bb      	strb	r3, [r7, #6]

	csn_low();
 800055a:	f7ff fe03 	bl	8000164 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 800055e:	1dfa      	adds	r2, r7, #7
 8000560:	1db9      	adds	r1, r7, #6
 8000562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2301      	movs	r3, #1
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <nrf24_r_status+0x34>)
 800056c:	f003 fe8b 	bl	8004286 <HAL_SPI_TransmitReceive>
	csn_high();
 8000570:	f7ff fdec 	bl	800014c <csn_high>

	return data;
 8000574:	79fb      	ldrb	r3, [r7, #7]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000110 	.word	0x20000110

08000584 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800058e:	f7ff ffdd 	bl	800054c <nrf24_r_status>
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800059c:	b2db      	uxtb	r3, r3
 800059e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	2007      	movs	r0, #7
 80005a8:	f7ff fe00 	bl	80001ac <nrf24_w_reg>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005be:	f7ff ffc5 	bl	800054c <nrf24_r_status>
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f043 0320 	orr.w	r3, r3, #32
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	2201      	movs	r2, #1
 80005d4:	4619      	mov	r1, r3
 80005d6:	2007      	movs	r0, #7
 80005d8:	f7ff fde8 	bl	80001ac <nrf24_w_reg>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005ee:	f7ff ffad 	bl	800054c <nrf24_r_status>
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f043 0310 	orr.w	r3, r3, #16
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8000600:	1dfb      	adds	r3, r7, #7
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	2007      	movs	r0, #7
 8000608:	f7ff fdd0 	bl	80001ac <nrf24_w_reg>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <nrf24_stop_listen>:
	nrf24_w_reg(CONFIG, &data, 1);

	ce_high();
}

void nrf24_stop_listen(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800061e:	2101      	movs	r1, #1
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fdeb 	bl	80001fc <nrf24_r_reg>
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]

	data &= ~(1 << PRIM_RX);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fdb6 	bl	80001ac <nrf24_w_reg>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <nrf24_dpl>:

void nrf24_dpl(uint8_t en){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000652:	2101      	movs	r1, #1
 8000654:	201d      	movs	r0, #29
 8000656:	f7ff fdd1 	bl	80001fc <nrf24_r_reg>
 800065a:	4603      	mov	r3, r0
 800065c:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d105      	bne.n	8000670 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	b2db      	uxtb	r3, r3
 800066c:	73fb      	strb	r3, [r7, #15]
 800066e:	e004      	b.n	800067a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	f023 0304 	bic.w	r3, r3, #4
 8000676:	b2db      	uxtb	r3, r3
 8000678:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800067a:	f107 030f 	add.w	r3, r7, #15
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	201d      	movs	r0, #29
 8000684:	f7ff fd92 	bl	80001ac <nrf24_w_reg>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <nrf24_set_rx_dpl>:

void nrf24_set_rx_dpl(uint8_t pipe, uint8_t en){
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]

	uint8_t dynpd = nrf24_r_reg(DYNPD, 1);
 80006a0:	2101      	movs	r1, #1
 80006a2:	201c      	movs	r0, #28
 80006a4:	f7ff fdaa 	bl	80001fc <nrf24_r_reg>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]

	if(pipe > 5){
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b05      	cmp	r3, #5
 80006b0:	d901      	bls.n	80006b6 <nrf24_set_rx_dpl+0x26>
		pipe = 5;
 80006b2:	2305      	movs	r3, #5
 80006b4:	71fb      	strb	r3, [r7, #7]
	}

	if(en){
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00b      	beq.n	80006d4 <nrf24_set_rx_dpl+0x44>
		dynpd |= (1 << pipe);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2201      	movs	r2, #1
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	b25a      	sxtb	r2, r3
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	e00c      	b.n	80006ee <nrf24_set_rx_dpl+0x5e>
	}else{
		dynpd &= ~(1 << pipe);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2201      	movs	r2, #1
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	43db      	mvns	r3, r3
 80006e0:	b25a      	sxtb	r2, r3
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	4013      	ands	r3, r2
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(DYNPD, &dynpd, 1);
 80006ee:	f107 030f 	add.w	r3, r7, #15
 80006f2:	2201      	movs	r2, #1
 80006f4:	4619      	mov	r1, r3
 80006f6:	201c      	movs	r0, #28
 80006f8:	f7ff fd58 	bl	80001ac <nrf24_w_reg>
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <nrf24_auto_ack>:

void nrf24_auto_ack(uint8_t pipe, uint8_t ack){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	71bb      	strb	r3, [r7, #6]

	if(pipe > 5){
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d901      	bls.n	800071e <nrf24_auto_ack+0x1a>
		pipe = 5;
 800071a:	2305      	movs	r3, #5
 800071c:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800071e:	2101      	movs	r1, #1
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff fd6b 	bl	80001fc <nrf24_r_reg>
 8000726:	4603      	mov	r3, r0
 8000728:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00b      	beq.n	8000748 <nrf24_auto_ack+0x44>
		enaa |= (1 << pipe);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2201      	movs	r2, #1
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	b25a      	sxtb	r2, r3
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	b25b      	sxtb	r3, r3
 800073e:	4313      	orrs	r3, r2
 8000740:	b25b      	sxtb	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e00c      	b.n	8000762 <nrf24_auto_ack+0x5e>
	}else{
		enaa &= ~(1 << pipe);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2201      	movs	r2, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	b25b      	sxtb	r3, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	b25a      	sxtb	r2, r3
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	b25b      	sxtb	r3, r3
 800075a:	4013      	ands	r3, r2
 800075c:	b25b      	sxtb	r3, r3
 800075e:	b2db      	uxtb	r3, r3
 8000760:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000762:	f107 030f 	add.w	r3, r7, #15
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fd1e 	bl	80001ac <nrf24_w_reg>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <nrf24_auto_ack_all>:

void nrf24_auto_ack_all(uint8_t ack){
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 8000782:	2101      	movs	r1, #1
 8000784:	2001      	movs	r0, #1
 8000786:	f7ff fd39 	bl	80001fc <nrf24_r_reg>
 800078a:	4603      	mov	r3, r0
 800078c:	73fb      	strb	r3, [r7, #15]

	if(ack){
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <nrf24_auto_ack_all+0x22>
		enaa = 63;
 8000794:	233f      	movs	r3, #63	@ 0x3f
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e001      	b.n	800079e <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 800079e:	f107 030f 	add.w	r3, r7, #15
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fd00 	bl	80001ac <nrf24_w_reg>
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80007be:	2101      	movs	r1, #1
 80007c0:	201d      	movs	r0, #29
 80007c2:	f7ff fd1b 	bl	80001fc <nrf24_r_reg>
 80007c6:	4603      	mov	r3, r0
 80007c8:	73fb      	strb	r3, [r7, #15]

	if(en){
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d005      	beq.n	80007dc <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	73fb      	strb	r3, [r7, #15]
 80007da:	e004      	b.n	80007e6 <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	f023 0302 	bic.w	r3, r3, #2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80007e6:	f107 030f 	add.w	r3, r7, #15
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	201d      	movs	r0, #29
 80007f0:	f7ff fcdc 	bl	80001ac <nrf24_w_reg>
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000806:	2101      	movs	r1, #1
 8000808:	201d      	movs	r0, #29
 800080a:	f7ff fcf7 	bl	80001fc <nrf24_r_reg>
 800080e:	4603      	mov	r3, r0
 8000810:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	e004      	b.n	800082e <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	f023 0301 	bic.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800082e:	f107 030f 	add.w	r3, r7, #15
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	201d      	movs	r0, #29
 8000838:	f7ff fcb8 	bl	80001ac <nrf24_w_reg>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <nrf24_auto_retr_delay>:

void nrf24_auto_retr_delay(uint8_t delay){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 800084e:	2101      	movs	r1, #1
 8000850:	2004      	movs	r0, #4
 8000852:	f7ff fcd3 	bl	80001fc <nrf24_r_reg>
 8000856:	4603      	mov	r3, r0
 8000858:	73fb      	strb	r3, [r7, #15]

	data &= 15;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	f003 030f 	and.w	r3, r3, #15
 8000860:	b2db      	uxtb	r3, r3
 8000862:	73fb      	strb	r3, [r7, #15]

	data |= (delay << ARD);
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	b25a      	sxtb	r2, r3
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	b25b      	sxtb	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 8000878:	f107 030f 	add.w	r3, r7, #15
 800087c:	2201      	movs	r2, #1
 800087e:	4619      	mov	r1, r3
 8000880:	2004      	movs	r0, #4
 8000882:	f7ff fc93 	bl	80001ac <nrf24_w_reg>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <nrf24_auto_retr_limit>:

void nrf24_auto_retr_limit(uint8_t limit){
 800088e:	b580      	push	{r7, lr}
 8000890:	b084      	sub	sp, #16
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
	uint8_t data = nrf24_r_reg(SETUP_RETR, 1);
 8000898:	2101      	movs	r1, #1
 800089a:	2004      	movs	r0, #4
 800089c:	f7ff fcae 	bl	80001fc <nrf24_r_reg>
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]

	data &= 240;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	f023 030f 	bic.w	r3, r3, #15
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	73fb      	strb	r3, [r7, #15]

	data |= (limit << ARC);
 80008ae:	7bfa      	ldrb	r2, [r7, #15]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(SETUP_RETR, &data, 1);
 80008b8:	f107 030f 	add.w	r3, r7, #15
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	2004      	movs	r0, #4
 80008c2:	f7ff fc73 	bl	80001ac <nrf24_w_reg>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <nrf24_transmit>:

	return out;
}


uint8_t nrf24_transmit(uint8_t *data, uint8_t size){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]

	ce_low();
 80008dc:	f7ff fc5a 	bl	8000194 <ce_low>

	uint8_t cmd = W_TX_PAYLOAD;
 80008e0:	23a0      	movs	r3, #160	@ 0xa0
 80008e2:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80008e4:	f7ff fc3e 	bl	8000164 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80008e8:	f107 010f 	add.w	r1, r7, #15
 80008ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f0:	2201      	movs	r2, #1
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <nrf24_transmit+0x70>)
 80008f4:	f003 fa6a 	bl	8003dcc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	480f      	ldr	r0, [pc, #60]	@ (8000940 <nrf24_transmit+0x70>)
 8000904:	f003 fa62 	bl	8003dcc <HAL_SPI_Transmit>
	csn_high();
 8000908:	f7ff fc20 	bl	800014c <csn_high>

	ce_high();
 800090c:	f7ff fc36 	bl	800017c <ce_high>
	HAL_Delay(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f001 f965 	bl	8001be0 <HAL_Delay>
	ce_low();
 8000916:	f7ff fc3d 	bl	8000194 <ce_low>

	if(nrf24_r_status() & (1 << MAX_RT)){
 800091a:	f7ff fe17 	bl	800054c <nrf24_r_status>
 800091e:	4603      	mov	r3, r0
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <nrf24_transmit+0x64>
		nrf24_clear_max_rt();
 8000928:	f7ff fe5c 	bl	80005e4 <nrf24_clear_max_rt>
		nrf24_flush_tx();
 800092c:	f7ff fdf8 	bl	8000520 <nrf24_flush_tx>
		return 1;
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <nrf24_transmit+0x66>
	}

	return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000110 	.word	0x20000110

08000944 <nrf24_defaults>:
	csn_high();

	nrf24_clear_rx_dr();
}

void nrf24_defaults(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	ce_low();
 800094a:	f7ff fc23 	bl	8000194 <ce_low>

	nrf24_pwr_dwn();
 800094e:	f7ff fca9 	bl	80002a4 <nrf24_pwr_dwn>
	nrf24_tx_pwr(3);
 8000952:	2003      	movs	r0, #3
 8000954:	f7ff fcc0 	bl	80002d8 <nrf24_tx_pwr>
	nrf24_data_rate(_1mbps);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fce4 	bl	8000326 <nrf24_data_rate>
	nrf24_set_channel(2);
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff fd0f 	bl	8000382 <nrf24_set_channel>
	nrf24_set_crc(no_crc, _1byte);
 8000964:	2100      	movs	r1, #0
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fd99 	bl	800049e <nrf24_set_crc>
	nrf24_set_addr_width(5);
 800096c:	2005      	movs	r0, #5
 800096e:	f7ff fdc4 	bl	80004fa <nrf24_set_addr_width>
	nrf24_flush_tx();
 8000972:	f7ff fdd5 	bl	8000520 <nrf24_flush_tx>
	nrf24_flush_rx();
 8000976:	f7ff fdde 	bl	8000536 <nrf24_flush_rx>
	nrf24_clear_rx_dr();
 800097a:	f7ff fe03 	bl	8000584 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 800097e:	f7ff fe19 	bl	80005b4 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000982:	f7ff fe2f 	bl	80005e4 <nrf24_clear_max_rt>
	nrf24_stop_listen();
 8000986:	f7ff fe45 	bl	8000614 <nrf24_stop_listen>
	nrf24_dpl(disable);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fe5c 	bl	8000648 <nrf24_dpl>
	nrf24_en_ack_pld(disable);
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff ff0f 	bl	80007b4 <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 8000996:	2000      	movs	r0, #0
 8000998:	f7ff ff30 	bl	80007fc <nrf24_en_dyn_ack>
	nrf24_auto_retr_delay(0);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ff51 	bl	8000844 <nrf24_auto_retr_delay>
	nrf24_auto_retr_limit(3);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f7ff ff73 	bl	800088e <nrf24_auto_retr_limit>


	for(uint8_t i = 0; i < 5; i++){
 80009a8:	2300      	movs	r3, #0
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	e015      	b.n	80009da <nrf24_defaults+0x96>
		nrf24_pipe_pld_size(i, 0);
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd02 	bl	80003bc <nrf24_pipe_pld_size>
		nrf24_cls_rx_pipe(i);
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fd4c 	bl	8000458 <nrf24_cls_rx_pipe>
		nrf24_set_rx_dpl(i, disable);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe63 	bl	8000690 <nrf24_set_rx_dpl>
		nrf24_auto_ack(i, enable);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2101      	movs	r1, #1
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe98 	bl	8000704 <nrf24_auto_ack>
	for(uint8_t i = 0; i < 5; i++){
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	3301      	adds	r3, #1
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d9e6      	bls.n	80009ae <nrf24_defaults+0x6a>
	}

	ce_high();
 80009e0:	f7ff fbcc 	bl	800017c <ce_high>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <nrf24_init>:

void nrf24_init(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 80009f0:	f7ff fc3e 	bl	8000270 <nrf24_pwr_up>

	nrf24_flush_tx();
 80009f4:	f7ff fd94 	bl	8000520 <nrf24_flush_tx>
	nrf24_flush_rx();
 80009f8:	f7ff fd9d 	bl	8000536 <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 80009fc:	f7ff fdc2 	bl	8000584 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8000a00:	f7ff fdd8 	bl	80005b4 <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8000a04:	f7ff fdee 	bl	80005e4 <nrf24_clear_max_rt>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a1e:	4a28      	ldr	r2, [pc, #160]	@ (8000ac0 <MX_ADC1_Init+0xb4>)
 8000a20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a38:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4a:	481c      	ldr	r0, [pc, #112]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a4c:	f001 f8ec 	bl	8001c28 <HAL_ADC_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000a56:	f000 fbd1 	bl	80011fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a62:	2307      	movs	r3, #7
 8000a64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4814      	ldr	r0, [pc, #80]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a6c:	f001 fbb0 	bl	80021d0 <HAL_ADC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 fbc1 	bl	80011fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000a88:	f001 fba2 	bl	80021d0 <HAL_ADC_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a92:	f000 fbb3 	bl	80011fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a96:	230c      	movs	r3, #12
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <MX_ADC1_Init+0xb0>)
 8000aa4:	f001 fb94 	bl	80021d0 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000aae:	f000 fba5 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000090 	.word	0x20000090
 8000ac0:	40012400 	.word	0x40012400

08000ac4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <HAL_ADC_MspInit+0xcc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d151      	bne.n	8000b88 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afc:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a24      	ldr	r2, [pc, #144]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <HAL_ADC_MspInit+0xd0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = X_axis_Pin|Y_axis_Pin|Z_axis_Pin;
 8000b14:	2307      	movs	r3, #7
 8000b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4619      	mov	r1, r3
 8000b22:	481d      	ldr	r0, [pc, #116]	@ (8000b98 <HAL_ADC_MspInit+0xd4>)
 8000b24:	f002 f9b6 	bl	8002e94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba0 <HAL_ADC_MspInit+0xdc>)
 8000b2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b52:	2220      	movs	r2, #32
 8000b54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b5c:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b5e:	f001 fef7 	bl	8002950 <HAL_DMA_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000b68:	f000 fb48 	bl	80011fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b70:	621a      	str	r2, [r3, #32]
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <HAL_ADC_MspInit+0xd8>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f001 feb0 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b82:	2012      	movs	r0, #18
 8000b84:	f001 fec9 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40012400 	.word	0x40012400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	200000c0 	.word	0x200000c0
 8000ba0:	40020008 	.word	0x40020008

08000ba4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_DMA_Init+0x38>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200b      	movs	r0, #11
 8000bc8:	f001 fe8b 	bl	80028e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bcc:	200b      	movs	r0, #11
 8000bce:	f001 fea4 	bl	800291a <HAL_NVIC_EnableIRQ>

}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000

08000be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0310 	add.w	r3, r7, #16
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0c:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a27      	ldr	r2, [pc, #156]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c12:	f043 0320 	orr.w	r3, r3, #32
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <MX_GPIO_Init+0xd0>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_Pin_GPIO_Port, CSN_Pin_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c5a:	4816      	ldr	r0, [pc, #88]	@ (8000cb4 <MX_GPIO_Init+0xd4>)
 8000c5c:	f002 fa9e 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_Pin_GPIO_Port, CE_Pin_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c66:	4814      	ldr	r0, [pc, #80]	@ (8000cb8 <MX_GPIO_Init+0xd8>)
 8000c68:	f002 fa98 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CSN_Pin_Pin */
  GPIO_InitStruct.Pin = CSN_Pin_Pin;
 8000c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4619      	mov	r1, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	@ (8000cb4 <MX_GPIO_Init+0xd4>)
 8000c86:	f002 f905 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin_Pin */
  GPIO_InitStruct.Pin = CE_Pin_Pin;
 8000c8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_Pin_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_GPIO_Init+0xd8>)
 8000ca4:	f002 f8f6 	bl	8002e94 <HAL_GPIO_Init>

}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40010800 	.word	0x40010800

08000cbc <nrf24_set_payload_size>:
 * Receive data
 */
void nrf24_receive(uint8_t *data, uint8_t size);

static inline void nrf24_set_payload_size(uint8_t size)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
    nrf24_pipe_pld_size(0, size);   // 파이프 0만 사용
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fb76 	bl	80003bc <nrf24_pipe_pld_size>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <iabs_int>:


void nrf24_transmitter_setup(void);
void transmit_sensor_data(void);
static void transmit_triplet(uint16_t x, uint16_t y, uint16_t z);
static inline int  iabs_int(int v) { return v>=0? v : -v; }
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfb8      	it	lt
 8000ce6:	425b      	neglt	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <joystick_is_active>:
static inline bool joystick_is_active(int x,int y,int z){
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b088      	sub	sp, #32
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  int dx = x-ADC_NEU, dy = y-ADC_NEU, dz = z-ADC_NEU;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f2a3 73da 	subw	r3, r3, #2010	@ 0x7da
 8000d14:	617b      	str	r3, [r7, #20]
  return (iabs_int(dx) > ADC_DEAD_ZONE) ||
 8000d16:	69f8      	ldr	r0, [r7, #28]
 8000d18:	f7ff ffde 	bl	8000cd8 <iabs_int>
 8000d1c:	4603      	mov	r3, r0
         (iabs_int(dy) > ADC_DEAD_ZONE) ||
 8000d1e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000d22:	dc0d      	bgt.n	8000d40 <joystick_is_active+0x4e>
 8000d24:	69b8      	ldr	r0, [r7, #24]
 8000d26:	f7ff ffd7 	bl	8000cd8 <iabs_int>
 8000d2a:	4603      	mov	r3, r0
  return (iabs_int(dx) > ADC_DEAD_ZONE) ||
 8000d2c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000d30:	dc06      	bgt.n	8000d40 <joystick_is_active+0x4e>
         (iabs_int(dz) > ADC_DEAD_ZONE);
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ffd0 	bl	8000cd8 <iabs_int>
 8000d38:	4603      	mov	r3, r0
         (iabs_int(dy) > ADC_DEAD_ZONE) ||
 8000d3a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000d3e:	dd01      	ble.n	8000d44 <joystick_is_active+0x52>
 8000d40:	2301      	movs	r3, #1
 8000d42:	e000      	b.n	8000d46 <joystick_is_active+0x54>
 8000d44:	2300      	movs	r3, #0
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	@ 0x30
 8000d58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f000 fedf 	bl	8001b1c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f8ff 	bl	8000f60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f7ff ff3d 	bl	8000be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d66:	f7ff ff1d 	bl	8000ba4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d6a:	f000 fa4d 	bl	8001208 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d6e:	f000 fc67 	bl	8001640 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d72:	f7ff fe4b 	bl	8000a0c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d76:	f000 fbf3 	bl	8001560 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000d7a:	f000 fc8b 	bl	8001694 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


HAL_ADCEx_Calibration_Start(&hadc1);
 8000d7e:	486a      	ldr	r0, [pc, #424]	@ (8000f28 <main+0x1d4>)
 8000d80:	f001 fc20 	bl	80025c4 <HAL_ADCEx_Calibration_Start>



nrf24_init();
 8000d84:	f7ff fe32 	bl	80009ec <nrf24_init>
nrf24_transmitter_setup();
 8000d88:	f000 f946 	bl	8001018 <nrf24_transmitter_setup>

// 음성 FSM + UART3 인터럽트 수신 시작
Voice_Init();
 8000d8c:	f000 fd84 	bl	8001898 <Voice_Init>
HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	4966      	ldr	r1, [pc, #408]	@ (8000f2c <main+0x1d8>)
 8000d94:	4866      	ldr	r0, [pc, #408]	@ (8000f30 <main+0x1dc>)
 8000d96:	f004 f9f6 	bl	8005186 <HAL_UART_Receive_IT>

//타이머 인터럽트 시작 20ms마다
HAL_TIM_Base_Start_IT(&htim2);
 8000d9a:	4866      	ldr	r0, [pc, #408]	@ (8000f34 <main+0x1e0>)
 8000d9c:	f003 fd76 	bl	800488c <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 // DMA 완료되면 한 번 전송
	    if(adc_conversion_complete){
 8000da0:	4b65      	ldr	r3, [pc, #404]	@ (8000f38 <main+0x1e4>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 80bc 	beq.w	8000f24 <main+0x1d0>
	      adc_conversion_complete = 0;
 8000dac:	4b62      	ldr	r3, [pc, #392]	@ (8000f38 <main+0x1e4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db2:	b672      	cpsid	i
}
 8000db4:	bf00      	nop

	      // 1) 최신 ADC 로컬 복사 (IRQ 안전)
	      uint16_t x,y,z;
	      __disable_irq();
	      x = adc_buffer[0];
 8000db6:	4b61      	ldr	r3, [pc, #388]	@ (8000f3c <main+0x1e8>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	843b      	strh	r3, [r7, #32]
	      y = adc_buffer[1];
 8000dbc:	4b5f      	ldr	r3, [pc, #380]	@ (8000f3c <main+0x1e8>)
 8000dbe:	885b      	ldrh	r3, [r3, #2]
 8000dc0:	83fb      	strh	r3, [r7, #30]
	      z = adc_buffer[2];
 8000dc2:	4b5e      	ldr	r3, [pc, #376]	@ (8000f3c <main+0x1e8>)
 8000dc4:	889b      	ldrh	r3, [r3, #4]
 8000dc6:	83bb      	strh	r3, [r7, #28]
  __ASM volatile ("cpsie i" : : : "memory");
 8000dc8:	b662      	cpsie	i
}
 8000dca:	bf00      	nop
	      __enable_irq();

	      // 2) 조이스틱 활성 판정
	      bool active = joystick_is_active((int)x,(int)y,(int)z);
 8000dcc:	8c3b      	ldrh	r3, [r7, #32]
 8000dce:	8bf9      	ldrh	r1, [r7, #30]
 8000dd0:	8bba      	ldrh	r2, [r7, #28]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff8d 	bl	8000cf2 <joystick_is_active>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	76fb      	strb	r3, [r7, #27]

	      // 3) (조이스틱 중립일 때만) 음성 프레임 소비
	      if (!active && Voice_FrameAvailable()){
 8000ddc:	7efb      	ldrb	r3, [r7, #27]
 8000dde:	f083 0301 	eor.w	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d01e      	beq.n	8000e26 <main+0xd2>
 8000de8:	f000 fe0c 	bl	8001a04 <Voice_FrameAvailable>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d019      	beq.n	8000e26 <main+0xd2>
  __ASM volatile ("cpsid i" : : : "memory");
 8000df2:	b672      	cpsid	i
}
 8000df4:	bf00      	nop
	        voice_frame_t vf;
	        __disable_irq();
	        bool ok = Voice_TryPopFrame(&vf);
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fe0e 	bl	8001a1c <Voice_TryPopFrame>
 8000e00:	4603      	mov	r3, r0
 8000e02:	76bb      	strb	r3, [r7, #26]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e04:	b662      	cpsie	i
}
 8000e06:	bf00      	nop
	        __enable_irq();
	        if (ok && vf.cmd >= 0x01 && vf.cmd <= 0x05){
 8000e08:	7ebb      	ldrb	r3, [r7, #26]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <main+0xd2>
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <main+0xd2>
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	2b05      	cmp	r3, #5
 8000e18:	d805      	bhi.n	8000e26 <main+0xd2>
	          last_cmd = vf.cmd;
 8000e1a:	7bba      	ldrb	r2, [r7, #14]
 8000e1c:	4b48      	ldr	r3, [pc, #288]	@ (8000f40 <main+0x1ec>)
 8000e1e:	701a      	strb	r2, [r3, #0]
	          g_state  = ST_VOICE;       // 음성 모드 진입
 8000e20:	4b48      	ldr	r3, [pc, #288]	@ (8000f44 <main+0x1f0>)
 8000e22:	2202      	movs	r2, #2
 8000e24:	701a      	strb	r2, [r3, #0]
	        }
	      }

	      // 4) 상태머신으로 이번 주기 전송값 결정
	      uint16_t tx_x = ADC_NEU, tx_y = ADC_NEU, tx_z = ADC_NEU;
 8000e26:	f240 73da 	movw	r3, #2010	@ 0x7da
 8000e2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e2c:	f240 73da 	movw	r3, #2010	@ 0x7da
 8000e30:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e32:	f240 73da 	movw	r3, #2010	@ 0x7da
 8000e36:	847b      	strh	r3, [r7, #34]	@ 0x22

	      switch (g_state)
 8000e38:	4b42      	ldr	r3, [pc, #264]	@ (8000f44 <main+0x1f0>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <main+0xf4>
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d007      	beq.n	8000e56 <main+0x102>
 8000e46:	e017      	b.n	8000e78 <main+0x124>
	      {
	        case ST_IDLE:
	          if (active) g_state = ST_JOYSTICK;
 8000e48:	7efb      	ldrb	r3, [r7, #27]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d036      	beq.n	8000ebc <main+0x168>
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f44 <main+0x1f0>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
	          // IDLE은 정지값 유지(송신은 해도 되고 안 해도 됨: 여기선 보냄)
	          break;
 8000e54:	e032      	b.n	8000ebc <main+0x168>

	        case ST_JOYSTICK:
	          if (!active){
 8000e56:	7efb      	ldrb	r3, [r7, #27]
 8000e58:	f083 0301 	eor.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <main+0x116>
	            g_state = ST_IDLE;
 8000e62:	4b38      	ldr	r3, [pc, #224]	@ (8000f44 <main+0x1f0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
	          } else {
	            tx_x = x; tx_y = y; tx_z = z;      // 조이스틱 값 그대로
	          }
	          break;
 8000e68:	e029      	b.n	8000ebe <main+0x16a>
	            tx_x = x; tx_y = y; tx_z = z;      // 조이스틱 값 그대로
 8000e6a:	8c3b      	ldrh	r3, [r7, #32]
 8000e6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e6e:	8bfb      	ldrh	r3, [r7, #30]
 8000e70:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e72:	8bbb      	ldrh	r3, [r7, #28]
 8000e74:	847b      	strh	r3, [r7, #34]	@ 0x22
	          break;
 8000e76:	e022      	b.n	8000ebe <main+0x16a>

	        case ST_VOICE:
	        default:
	          if (active){
 8000e78:	7efb      	ldrb	r3, [r7, #27]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d009      	beq.n	8000e92 <main+0x13e>
	            g_state = ST_JOYSTICK;            // 조이스틱 우선
 8000e7e:	4b31      	ldr	r3, [pc, #196]	@ (8000f44 <main+0x1f0>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
	            tx_x = x; tx_y = y; tx_z = z;
 8000e84:	8c3b      	ldrh	r3, [r7, #32]
 8000e86:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e88:	8bfb      	ldrh	r3, [r7, #30]
 8000e8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e8c:	8bbb      	ldrh	r3, [r7, #28]
 8000e8e:	847b      	strh	r3, [r7, #34]	@ 0x22
	          } else {
	            triplet_t t = VOICE_MAP[last_cmd];
	            tx_x = t.x; tx_y = t.y; tx_z = t.z; // 음성 등가값
	          }
	          break;
 8000e90:	e015      	b.n	8000ebe <main+0x16a>
	            triplet_t t = VOICE_MAP[last_cmd];
 8000e92:	4b2b      	ldr	r3, [pc, #172]	@ (8000f40 <main+0x1ec>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	4619      	mov	r1, r3
 8000e98:	4a2b      	ldr	r2, [pc, #172]	@ (8000f48 <main+0x1f4>)
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	440b      	add	r3, r1
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	441a      	add	r2, r3
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	6810      	ldr	r0, [r2, #0]
 8000ea8:	6018      	str	r0, [r3, #0]
 8000eaa:	8892      	ldrh	r2, [r2, #4]
 8000eac:	809a      	strh	r2, [r3, #4]
	            tx_x = t.x; tx_y = t.y; tx_z = t.z; // 음성 등가값
 8000eae:	883b      	ldrh	r3, [r7, #0]
 8000eb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000eb6:	88bb      	ldrh	r3, [r7, #4]
 8000eb8:	847b      	strh	r3, [r7, #34]	@ 0x22
	          break;
 8000eba:	e000      	b.n	8000ebe <main+0x16a>
	          break;
 8000ebc:	bf00      	nop
	      }

	      // 5) NRF24로 6바이트 전송
	      transmit_triplet(tx_x, tx_y, tx_z);
 8000ebe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000ec0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000ec2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f8f7 	bl	80010b8 <transmit_triplet>

	      // 6) 디버그 로그
	      const char* s = (g_state==ST_JOYSTICK)?"JOY":(g_state==ST_VOICE)?"VOICE":"IDLE";
 8000eca:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <main+0x1f0>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d008      	beq.n	8000ee6 <main+0x192>
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <main+0x1f0>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d101      	bne.n	8000ee2 <main+0x18e>
 8000ede:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <main+0x1f8>)
 8000ee0:	e002      	b.n	8000ee8 <main+0x194>
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <main+0x1fc>)
 8000ee4:	e000      	b.n	8000ee8 <main+0x194>
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <main+0x200>)
 8000ee8:	617b      	str	r3, [r7, #20]
	      if (g_state==ST_VOICE) {
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <main+0x1f0>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d10e      	bne.n	8000f12 <main+0x1be>
	        printf("TX[%s] CMD:0x%02X | X:%u Y:%u Z:%u\r\n", s, last_cmd, tx_x, tx_y, tx_z);
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <main+0x1ec>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8000efc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000efe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000f00:	9201      	str	r2, [sp, #4]
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	460b      	mov	r3, r1
 8000f06:	4602      	mov	r2, r0
 8000f08:	6979      	ldr	r1, [r7, #20]
 8000f0a:	4813      	ldr	r0, [pc, #76]	@ (8000f58 <main+0x204>)
 8000f0c:	f004 ff84 	bl	8005e18 <iprintf>
 8000f10:	e008      	b.n	8000f24 <main+0x1d0>
	      } else {
	        printf("TX[%s] X:%u Y:%u Z:%u\r\n", s, tx_x, tx_y, tx_z);
 8000f12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000f14:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000f16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	6979      	ldr	r1, [r7, #20]
 8000f1e:	480f      	ldr	r0, [pc, #60]	@ (8000f5c <main+0x208>)
 8000f20:	f004 ff7a 	bl	8005e18 <iprintf>
	      }
	    }

	    __WFI(); // 저전력 대기(인터럽트가 깨움)
 8000f24:	bf30      	wfi
	    if(adc_conversion_complete){
 8000f26:	e73b      	b.n	8000da0 <main+0x4c>
 8000f28:	20000090 	.word	0x20000090
 8000f2c:	2000010b 	.word	0x2000010b
 8000f30:	200001fc 	.word	0x200001fc
 8000f34:	2000016c 	.word	0x2000016c
 8000f38:	2000010a 	.word	0x2000010a
 8000f3c:	20000104 	.word	0x20000104
 8000f40:	20000000 	.word	0x20000000
 8000f44:	2000010c 	.word	0x2000010c
 8000f48:	08006b88 	.word	0x08006b88
 8000f4c:	08006b1c 	.word	0x08006b1c
 8000f50:	08006b24 	.word	0x08006b24
 8000f54:	08006b2c 	.word	0x08006b2c
 8000f58:	08006b30 	.word	0x08006b30
 8000f5c:	08006b58 	.word	0x08006b58

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	@ 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f6a:	2228      	movs	r2, #40	@ 0x28
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f004 ffa7 	bl	8005ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f94:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000faa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 f908 	bl	80031cc <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fc2:	f000 f91b 	bl	80011fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fb74 	bl	80036d0 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fee:	f000 f905 	bl	80011fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ffa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fcf4 	bl	80039ec <HAL_RCCEx_PeriphCLKConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800100a:	f000 f8f7 	bl	80011fc <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	@ 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <nrf24_transmitter_setup>:

/* USER CODE BEGIN 4 */

void nrf24_transmitter_setup(void)

{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
nrf24_defaults();
 800101e:	f7ff fc91 	bl	8000944 <nrf24_defaults>
nrf24_pwr_up();
 8001022:	f7ff f925 	bl	8000270 <nrf24_pwr_up>
nrf24_flush_tx();
 8001026:	f7ff fa7b 	bl	8000520 <nrf24_flush_tx>
nrf24_flush_rx();
 800102a:	f7ff fa84 	bl	8000536 <nrf24_flush_rx>
nrf24_clear_rx_dr();
 800102e:	f7ff faa9 	bl	8000584 <nrf24_clear_rx_dr>
nrf24_clear_tx_ds();
 8001032:	f7ff fabf 	bl	80005b4 <nrf24_clear_tx_ds>
nrf24_clear_max_rt();
 8001036:	f7ff fad5 	bl	80005e4 <nrf24_clear_max_rt>
nrf24_stop_listen();                        //수신모드 비활성화 하여 송신 전용 모드로 전환
 800103a:	f7ff faeb 	bl	8000614 <nrf24_stop_listen>
nrf24_set_channel(40);                      //무선 채널 40번으로 설정
 800103e:	2028      	movs	r0, #40	@ 0x28
 8001040:	f7ff f99f 	bl	8000382 <nrf24_set_channel>
nrf24_auto_ack_all(disable);                //자동 ack기능 off=>단순 송신만 수행
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff fb97 	bl	8000778 <nrf24_auto_ack_all>
nrf24_set_payload_size(6);                  //한번에 전송할 페이로드 크기 최대 32바이트
 800104a:	2006      	movs	r0, #6
 800104c:	f7ff fe36 	bl	8000cbc <nrf24_set_payload_size>
nrf24_tx_pwr(3);
 8001050:	2003      	movs	r0, #3
 8001052:	f7ff f941 	bl	80002d8 <nrf24_tx_pwr>
nrf24_data_rate(_1mbps);
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff f965 	bl	8000326 <nrf24_data_rate>
nrf24_open_tx_pipe(tx_address);             //파이프 0에 tx_address를 열어 송신 대상 지정
 800105c:	480c      	ldr	r0, [pc, #48]	@ (8001090 <nrf24_transmitter_setup+0x78>)
 800105e:	f7ff f99f 	bl	80003a0 <nrf24_open_tx_pipe>
nrf24_pwr_up();                             //모듈 power up=>송신 준비 완료
 8001062:	f7ff f905 	bl	8000270 <nrf24_pwr_up>

    uint8_t cfg = nrf24_r_reg(CONFIG, 1);
 8001066:	2101      	movs	r1, #1
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff f8c7 	bl	80001fc <nrf24_r_reg>
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
    cfg &= ~((1<<5)|(1<<4));                // MASK_TX_DS=5, MASK_MAX_RT=4 -> 0
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001078:	b2db      	uxtb	r3, r3
 800107a:	71fb      	strb	r3, [r7, #7]
    nrf24_w_reg(CONFIG, &cfg, 1);
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff f892 	bl	80001ac <nrf24_w_reg>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000004 	.word	0x20000004

08001094 <__io_putchar>:

int __io_putchar(int ch)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800109c:	1d39      	adds	r1, r7, #4
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	2201      	movs	r2, #1
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <__io_putchar+0x20>)
 80010a6:	f003 ffe3 	bl	8005070 <HAL_UART_Transmit>
return ch;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	200001b4 	.word	0x200001b4

080010b8 <transmit_triplet>:

static void transmit_triplet(uint16_t x, uint16_t y, uint16_t z)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	460b      	mov	r3, r1
 80010c4:	80bb      	strh	r3, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	807b      	strh	r3, [r7, #2]
  uint8_t buf[6];
  buf[0] = (uint8_t)(x & 0xFF);
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	723b      	strb	r3, [r7, #8]
  buf[1] = (uint8_t)(x >> 8);
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	0a1b      	lsrs	r3, r3, #8
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	727b      	strb	r3, [r7, #9]
  buf[2] = (uint8_t)(y & 0xFF);
 80010da:	88bb      	ldrh	r3, [r7, #4]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	72bb      	strb	r3, [r7, #10]
  buf[3] = (uint8_t)(y >> 8);
 80010e0:	88bb      	ldrh	r3, [r7, #4]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	72fb      	strb	r3, [r7, #11]
  buf[4] = (uint8_t)(z & 0xFF);
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	733b      	strb	r3, [r7, #12]
  buf[5] = (uint8_t)(z >> 8);
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	737b      	strb	r3, [r7, #13]

  nrf24_transmit(buf, 6);
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	2106      	movs	r1, #6
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fbe5 	bl	80008d0 <nrf24_transmit>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_TIM_PeriodElapsedCallback>:

}

//타이머가 만료될 때마다 호출되는 콜백함수 20ms주기
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    // 이벤트가 발생한 타이머가 TIM2인지 확인
    if (htim->Instance == TIM2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001120:	d104      	bne.n	800112c <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
    	//3개의 ADC값을 변환해서 그 결과를 adc_buffer에 DMA로 저장 시작
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 3);
 8001122:	2203      	movs	r2, #3
 8001124:	4903      	ldr	r1, [pc, #12]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001126:	4804      	ldr	r0, [pc, #16]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001128:	f000 fe56 	bl	8001dd8 <HAL_ADC_Start_DMA>
    }
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000104 	.word	0x20000104
 8001138:	20000090 	.word	0x20000090

0800113c <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    // 이벤트가 발생한 ADC가 ADC1인지 확인
    if (hadc->Instance == ADC1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a05      	ldr	r2, [pc, #20]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x24>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d102      	bne.n	8001154 <HAL_ADC_ConvCpltCallback+0x18>
    {
        // Main루프의 if문 조건이 참이 되어 transmit_sensor_data함수호출
        adc_conversion_complete = 1;
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x28>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
    }
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40012400 	.word	0x40012400
 8001164:	2000010a 	.word	0x2000010a

08001168 <HAL_ADC_ErrorCallback>:


//ADC변환 중 오류가 발생했을 때 자동으로 호출, DMA전송을 중지
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_ADC_ErrorCallback+0x20>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d102      	bne.n	8001180 <HAL_ADC_ErrorCallback+0x18>
    {
        // ADC 오류 발생 시, 진행 중이던 DMA를 안전하게 중지
        // 다음 타이머 주기(20ms 후)에 HAL_ADC_Start_DMA가 다시 호출되며 자동으로 복구를 시도함
        HAL_ADC_Stop_DMA(&hadc1);
 800117a:	4804      	ldr	r0, [pc, #16]	@ (800118c <HAL_ADC_ErrorCallback+0x24>)
 800117c:	f000 ff0a 	bl	8001f94 <HAL_ADC_Stop_DMA>
    }
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40012400 	.word	0x40012400
 800118c:	20000090 	.word	0x20000090

08001190 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <HAL_UART_RxCpltCallback+0x30>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d109      	bne.n	80011b6 <HAL_UART_RxCpltCallback+0x26>
  {
    Voice_RxByteFromIRQ(rx3_byte);
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <HAL_UART_RxCpltCallback+0x34>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fb8c 	bl	80018c4 <Voice_RxByteFromIRQ>
    HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	4905      	ldr	r1, [pc, #20]	@ (80011c4 <HAL_UART_RxCpltCallback+0x34>)
 80011b0:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <HAL_UART_RxCpltCallback+0x38>)
 80011b2:	f003 ffe8 	bl	8005186 <HAL_UART_Receive_IT>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40004800 	.word	0x40004800
 80011c4:	2000010b 	.word	0x2000010b
 80011c8:	200001fc 	.word	0x200001fc

080011cc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <HAL_UART_ErrorCallback+0x24>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d104      	bne.n	80011e8 <HAL_UART_ErrorCallback+0x1c>
  {
    HAL_UART_Receive_IT(&huart3, &rx3_byte, 1);
 80011de:	2201      	movs	r2, #1
 80011e0:	4904      	ldr	r1, [pc, #16]	@ (80011f4 <HAL_UART_ErrorCallback+0x28>)
 80011e2:	4805      	ldr	r0, [pc, #20]	@ (80011f8 <HAL_UART_ErrorCallback+0x2c>)
 80011e4:	f003 ffcf 	bl	8005186 <HAL_UART_Receive_IT>
  }
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40004800 	.word	0x40004800
 80011f4:	2000010b 	.word	0x2000010b
 80011f8:	200001fc 	.word	0x200001fc

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */

	__disable_irq();
	  while (1) { }
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <Error_Handler+0x8>

08001208 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <MX_SPI1_Init+0x64>)
 800120e:	4a18      	ldr	r2, [pc, #96]	@ (8001270 <MX_SPI1_Init+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <MX_SPI1_Init+0x64>)
 8001214:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001218:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <MX_SPI1_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_SPI1_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_SPI1_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_SPI1_Init+0x64>)
 8001234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001238:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <MX_SPI1_Init+0x64>)
 800123c:	2218      	movs	r2, #24
 800123e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <MX_SPI1_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <MX_SPI1_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <MX_SPI1_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_SPI1_Init+0x64>)
 8001254:	220a      	movs	r2, #10
 8001256:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	@ (800126c <MX_SPI1_Init+0x64>)
 800125a:	f002 fd33 	bl	8003cc4 <HAL_SPI_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001264:	f7ff ffca 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000110 	.word	0x20000110
 8001270:	40013000 	.word	0x40013000

08001274 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1b      	ldr	r2, [pc, #108]	@ (80012fc <HAL_SPI_MspInit+0x88>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d12f      	bne.n	80012f4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <HAL_SPI_MspInit+0x8c>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a19      	ldr	r2, [pc, #100]	@ (8001300 <HAL_SPI_MspInit+0x8c>)
 800129a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <HAL_SPI_MspInit+0x8c>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <HAL_SPI_MspInit+0x8c>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a13      	ldr	r2, [pc, #76]	@ (8001300 <HAL_SPI_MspInit+0x8c>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_SPI_MspInit+0x8c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012c4:	23a0      	movs	r3, #160	@ 0xa0
 80012c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	480b      	ldr	r0, [pc, #44]	@ (8001304 <HAL_SPI_MspInit+0x90>)
 80012d8:	f001 fddc 	bl	8002e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012dc:	2340      	movs	r3, #64	@ 0x40
 80012de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	4805      	ldr	r0, [pc, #20]	@ (8001304 <HAL_SPI_MspInit+0x90>)
 80012f0:	f001 fdd0 	bl	8002e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40013000 	.word	0x40013000
 8001300:	40021000 	.word	0x40021000
 8001304:	40010800 	.word	0x40010800

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <HAL_MspInit+0x5c>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	4a14      	ldr	r2, [pc, #80]	@ (8001364 <HAL_MspInit+0x5c>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_MspInit+0x5c>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <HAL_MspInit+0x5c>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a0e      	ldr	r2, [pc, #56]	@ (8001364 <HAL_MspInit+0x5c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <HAL_MspInit+0x5c>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_MspInit+0x60>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_MspInit+0x60>)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000
 8001368:	40010000 	.word	0x40010000

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <NMI_Handler+0x4>

08001374 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <MemManage_Handler+0x4>

08001384 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <UsageFault_Handler+0x4>

08001394 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 fbf4 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013c8:	4802      	ldr	r0, [pc, #8]	@ (80013d4 <DMA1_Channel1_IRQHandler+0x10>)
 80013ca:	f001 fc2f 	bl	8002c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200000c0 	.word	0x200000c0

080013d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <ADC1_2_IRQHandler+0x10>)
 80013de:	f000 fe25 	bl	800202c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000090 	.word	0x20000090

080013ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <TIM2_IRQHandler+0x10>)
 80013f2:	f003 fa9d 	bl	8004930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000016c 	.word	0x2000016c

08001400 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <USART3_IRQHandler+0x10>)
 8001406:	f003 fee3 	bl	80051d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200001fc 	.word	0x200001fc

08001414 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e00a      	b.n	800143c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001426:	f3af 8000 	nop.w
 800142a:	4601      	mov	r1, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60ba      	str	r2, [r7, #8]
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf0      	blt.n	8001426 <_read+0x12>
  }

  return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e009      	b.n	8001474 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe13 	bl	8001094 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf1      	blt.n	8001460 <_write+0x12>
  }
  return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_close>:

int _close(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ac:	605a      	str	r2, [r3, #4]
  return 0;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <_isatty>:

int _isatty(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
	...

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f004 fd22 	bl	8005f60 <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	@ (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20005000 	.word	0x20005000
 8001548:	00000400 	.word	0x00000400
 800154c:	20000168 	.word	0x20000168
 8001550:	200003a8 	.word	0x200003a8

08001554 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800157c:	4b1d      	ldr	r3, [pc, #116]	@ (80015f4 <MX_TIM2_Init+0x94>)
 800157e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001582:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <MX_TIM2_Init+0x94>)
 8001586:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800158a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <MX_TIM2_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200-1;
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <MX_TIM2_Init+0x94>)
 8001594:	22c7      	movs	r2, #199	@ 0xc7
 8001596:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <MX_TIM2_Init+0x94>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <MX_TIM2_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015a4:	4813      	ldr	r0, [pc, #76]	@ (80015f4 <MX_TIM2_Init+0x94>)
 80015a6:	f003 f922 	bl	80047ee <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015b0:	f7ff fe24 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <MX_TIM2_Init+0x94>)
 80015c2:	f003 faa5 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015cc:	f7ff fe16 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d8:	463b      	mov	r3, r7
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_TIM2_Init+0x94>)
 80015de:	f003 fc87 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015e8:	f7ff fe08 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000016c 	.word	0x2000016c

080015f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001608:	d113      	bne.n	8001632 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <HAL_TIM_Base_MspInit+0x44>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a0b      	ldr	r2, [pc, #44]	@ (800163c <HAL_TIM_Base_MspInit+0x44>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	61d3      	str	r3, [r2, #28]
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <HAL_TIM_Base_MspInit+0x44>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	201c      	movs	r0, #28
 8001628:	f001 f95b 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800162c:	201c      	movs	r0, #28
 800162e:	f001 f974 	bl	800291a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <MX_USART2_UART_Init+0x50>)
 8001648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	@ (800168c <MX_USART2_UART_Init+0x4c>)
 8001678:	f003 fcaa 	bl	8004fd0 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001682:	f7ff fdbb 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200001b4 	.word	0x200001b4
 8001690:	40004400 	.word	0x40004400

08001694 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001698:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_USART3_UART_Init+0x4c>)
 800169a:	4a12      	ldr	r2, [pc, #72]	@ (80016e4 <MX_USART3_UART_Init+0x50>)
 800169c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <MX_USART3_UART_Init+0x4c>)
 80016a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_USART3_UART_Init+0x4c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_USART3_UART_Init+0x4c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <MX_USART3_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_USART3_UART_Init+0x4c>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <MX_USART3_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_USART3_UART_Init+0x4c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ca:	4805      	ldr	r0, [pc, #20]	@ (80016e0 <MX_USART3_UART_Init+0x4c>)
 80016cc:	f003 fc80 	bl	8004fd0 <HAL_UART_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016d6:	f7ff fd91 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001fc 	.word	0x200001fc
 80016e4:	40004800 	.word	0x40004800

080016e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	@ 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3b      	ldr	r2, [pc, #236]	@ (80017f0 <HAL_UART_MspInit+0x108>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d130      	bne.n	800176a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001708:	4b3a      	ldr	r3, [pc, #232]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	4a39      	ldr	r2, [pc, #228]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 800170e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001712:	61d3      	str	r3, [r2, #28]
 8001714:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a33      	ldr	r2, [pc, #204]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001738:	2304      	movs	r3, #4
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0318 	add.w	r3, r7, #24
 8001748:	4619      	mov	r1, r3
 800174a:	482b      	ldr	r0, [pc, #172]	@ (80017f8 <HAL_UART_MspInit+0x110>)
 800174c:	f001 fba2 	bl	8002e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001750:	2308      	movs	r3, #8
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0318 	add.w	r3, r7, #24
 8001760:	4619      	mov	r1, r3
 8001762:	4825      	ldr	r0, [pc, #148]	@ (80017f8 <HAL_UART_MspInit+0x110>)
 8001764:	f001 fb96 	bl	8002e94 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001768:	e03e      	b.n	80017e8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a23      	ldr	r2, [pc, #140]	@ (80017fc <HAL_UART_MspInit+0x114>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d139      	bne.n	80017e8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001774:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	4a1e      	ldr	r2, [pc, #120]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 800177a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800177e:	61d3      	str	r3, [r2, #28]
 8001780:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178c:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a18      	ldr	r2, [pc, #96]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <HAL_UART_MspInit+0x10c>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 0318 	add.w	r3, r7, #24
 80017b6:	4619      	mov	r1, r3
 80017b8:	4811      	ldr	r0, [pc, #68]	@ (8001800 <HAL_UART_MspInit+0x118>)
 80017ba:	f001 fb6b 	bl	8002e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	4619      	mov	r1, r3
 80017d2:	480b      	ldr	r0, [pc, #44]	@ (8001800 <HAL_UART_MspInit+0x118>)
 80017d4:	f001 fb5e 	bl	8002e94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2027      	movs	r0, #39	@ 0x27
 80017de:	f001 f880 	bl	80028e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017e2:	2027      	movs	r0, #39	@ 0x27
 80017e4:	f001 f899 	bl	800291a <HAL_NVIC_EnableIRQ>
}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	@ 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40004400 	.word	0x40004400
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010800 	.word	0x40010800
 80017fc:	40004800 	.word	0x40004800
 8001800:	40010c00 	.word	0x40010c00

08001804 <Voice_CalcChecksum>:

static volatile bool     s_ready = false;
static volatile uint8_t  s_last[6];   // 메인 루프에서 읽을 최종 프레임

uint8_t Voice_CalcChecksum(uint8_t head, uint8_t cmd, uint8_t al, uint8_t ah)
{
 8001804:	b490      	push	{r4, r7}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4604      	mov	r4, r0
 800180c:	4608      	mov	r0, r1
 800180e:	4611      	mov	r1, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4623      	mov	r3, r4
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	4603      	mov	r3, r0
 8001818:	71bb      	strb	r3, [r7, #6]
 800181a:	460b      	mov	r3, r1
 800181c:	717b      	strb	r3, [r7, #5]
 800181e:	4613      	mov	r3, r2
 8001820:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((head ^ cmd ^ al ^ ah) & 0xFF);
 8001822:	79fa      	ldrb	r2, [r7, #7]
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	4053      	eors	r3, r2
 8001828:	b2da      	uxtb	r2, r3
 800182a:	797b      	ldrb	r3, [r7, #5]
 800182c:	4053      	eors	r3, r2
 800182e:	b2da      	uxtb	r2, r3
 8001830:	793b      	ldrb	r3, [r7, #4]
 8001832:	4053      	eors	r3, r2
 8001834:	b2db      	uxtb	r3, r3
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bc90      	pop	{r4, r7}
 800183e:	4770      	bx	lr

08001840 <Voice_ValidateRaw6>:

bool Voice_ValidateRaw6(const uint8_t f[6])
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    if (f[0] != 0xAA) return false;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2baa      	cmp	r3, #170	@ 0xaa
 800184e:	d001      	beq.n	8001854 <Voice_ValidateRaw6+0x14>
 8001850:	2300      	movs	r3, #0
 8001852:	e01d      	b.n	8001890 <Voice_ValidateRaw6+0x50>
    if (f[5] != 0x55) return false;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3305      	adds	r3, #5
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b55      	cmp	r3, #85	@ 0x55
 800185c:	d001      	beq.n	8001862 <Voice_ValidateRaw6+0x22>
 800185e:	2300      	movs	r3, #0
 8001860:	e016      	b.n	8001890 <Voice_ValidateRaw6+0x50>
    uint8_t chk = Voice_CalcChecksum(0xAA, f[1], f[2], f[3]);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3301      	adds	r3, #1
 8001866:	7819      	ldrb	r1, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3302      	adds	r3, #2
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3303      	adds	r3, #3
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	20aa      	movs	r0, #170	@ 0xaa
 8001876:	f7ff ffc5 	bl	8001804 <Voice_CalcChecksum>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
    return (chk == f[4]);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3304      	adds	r3, #4
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	429a      	cmp	r2, r3
 8001888:	bf0c      	ite	eq
 800188a:	2301      	moveq	r3, #1
 800188c:	2300      	movne	r3, #0
 800188e:	b2db      	uxtb	r3, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <Voice_Init>:

void Voice_Init(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
    s_rx_state = RX_ST_WAIT_HEAD;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <Voice_Init+0x20>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
    s_idx = 0;
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <Voice_Init+0x24>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
    s_ready = false;
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <Voice_Init+0x28>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000244 	.word	0x20000244
 80018bc:	20000245 	.word	0x20000245
 80018c0:	2000024e 	.word	0x2000024e

080018c4 <Voice_RxByteFromIRQ>:

void Voice_RxByteFromIRQ(uint8_t b)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
    switch (s_rx_state)
 80018ce:	4b48      	ldr	r3, [pc, #288]	@ (80019f0 <Voice_RxByteFromIRQ+0x12c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	f200 8085 	bhi.w	80019e4 <Voice_RxByteFromIRQ+0x120>
 80018da:	a201      	add	r2, pc, #4	@ (adr r2, 80018e0 <Voice_RxByteFromIRQ+0x1c>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	080018f9 	.word	0x080018f9
 80018e4:	08001913 	.word	0x08001913
 80018e8:	08001931 	.word	0x08001931
 80018ec:	0800194f 	.word	0x0800194f
 80018f0:	0800196d 	.word	0x0800196d
 80018f4:	0800198b 	.word	0x0800198b
    {
        case RX_ST_WAIT_HEAD:
            if (b == 0xAA) {
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2baa      	cmp	r3, #170	@ 0xaa
 80018fc:	d171      	bne.n	80019e2 <Voice_RxByteFromIRQ+0x11e>
                s_work[0] = 0xAA;
 80018fe:	4b3d      	ldr	r3, [pc, #244]	@ (80019f4 <Voice_RxByteFromIRQ+0x130>)
 8001900:	22aa      	movs	r2, #170	@ 0xaa
 8001902:	701a      	strb	r2, [r3, #0]
                s_idx = 1;
 8001904:	4b3c      	ldr	r3, [pc, #240]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
                s_rx_state = RX_ST_GET_CMD;
 800190a:	4b39      	ldr	r3, [pc, #228]	@ (80019f0 <Voice_RxByteFromIRQ+0x12c>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001910:	e067      	b.n	80019e2 <Voice_RxByteFromIRQ+0x11e>

        case RX_ST_GET_CMD:
            s_work[s_idx++] = b;
 8001912:	4b39      	ldr	r3, [pc, #228]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	b2d1      	uxtb	r1, r2
 800191c:	4a36      	ldr	r2, [pc, #216]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 800191e:	7011      	strb	r1, [r2, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	4a34      	ldr	r2, [pc, #208]	@ (80019f4 <Voice_RxByteFromIRQ+0x130>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_AL;
 8001928:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <Voice_RxByteFromIRQ+0x12c>)
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
            break;
 800192e:	e059      	b.n	80019e4 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_AL:
            s_work[s_idx++] = b;
 8001930:	4b31      	ldr	r3, [pc, #196]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	b2d1      	uxtb	r1, r2
 800193a:	4a2f      	ldr	r2, [pc, #188]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 800193c:	7011      	strb	r1, [r2, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4a2c      	ldr	r2, [pc, #176]	@ (80019f4 <Voice_RxByteFromIRQ+0x130>)
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_AH;
 8001946:	4b2a      	ldr	r3, [pc, #168]	@ (80019f0 <Voice_RxByteFromIRQ+0x12c>)
 8001948:	2203      	movs	r2, #3
 800194a:	701a      	strb	r2, [r3, #0]
            break;
 800194c:	e04a      	b.n	80019e4 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_AH:
            s_work[s_idx++] = b;
 800194e:	4b2a      	ldr	r3, [pc, #168]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	b2d1      	uxtb	r1, r2
 8001958:	4a27      	ldr	r2, [pc, #156]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 800195a:	7011      	strb	r1, [r2, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	4a25      	ldr	r2, [pc, #148]	@ (80019f4 <Voice_RxByteFromIRQ+0x130>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_CHK;
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <Voice_RxByteFromIRQ+0x12c>)
 8001966:	2204      	movs	r2, #4
 8001968:	701a      	strb	r2, [r3, #0]
            break;
 800196a:	e03b      	b.n	80019e4 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_CHK:
            s_work[s_idx++] = b;
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	b2d1      	uxtb	r1, r2
 8001976:	4a20      	ldr	r2, [pc, #128]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 8001978:	7011      	strb	r1, [r2, #0]
 800197a:	4619      	mov	r1, r3
 800197c:	4a1d      	ldr	r2, [pc, #116]	@ (80019f4 <Voice_RxByteFromIRQ+0x130>)
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	5453      	strb	r3, [r2, r1]
            s_rx_state = RX_ST_GET_TAIL;
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <Voice_RxByteFromIRQ+0x12c>)
 8001984:	2205      	movs	r2, #5
 8001986:	701a      	strb	r2, [r3, #0]
            break;
 8001988:	e02c      	b.n	80019e4 <Voice_RxByteFromIRQ+0x120>

        case RX_ST_GET_TAIL:
            s_work[s_idx++] = b; // tail
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	b2d1      	uxtb	r1, r2
 8001994:	4a18      	ldr	r2, [pc, #96]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 8001996:	7011      	strb	r1, [r2, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	4a16      	ldr	r2, [pc, #88]	@ (80019f4 <Voice_RxByteFromIRQ+0x130>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	5453      	strb	r3, [r2, r1]
            if (s_idx == 6) {
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d114      	bne.n	80019d4 <Voice_RxByteFromIRQ+0x110>
                for (int i = 0; i < 6; ++i) s_last[i] = s_work[i];
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e00b      	b.n	80019c8 <Voice_RxByteFromIRQ+0x104>
 80019b0:	4a10      	ldr	r2, [pc, #64]	@ (80019f4 <Voice_RxByteFromIRQ+0x130>)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4413      	add	r3, r2
 80019b6:	7819      	ldrb	r1, [r3, #0]
 80019b8:	4a10      	ldr	r2, [pc, #64]	@ (80019fc <Voice_RxByteFromIRQ+0x138>)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4413      	add	r3, r2
 80019be:	460a      	mov	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	ddf0      	ble.n	80019b0 <Voice_RxByteFromIRQ+0xec>
                s_ready = true;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <Voice_RxByteFromIRQ+0x13c>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
            }
            s_rx_state = RX_ST_WAIT_HEAD;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <Voice_RxByteFromIRQ+0x12c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
            s_idx = 0;
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <Voice_RxByteFromIRQ+0x134>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
            break;
 80019e0:	e000      	b.n	80019e4 <Voice_RxByteFromIRQ+0x120>
            break;
 80019e2:	bf00      	nop
    }
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000244 	.word	0x20000244
 80019f4:	20000248 	.word	0x20000248
 80019f8:	20000245 	.word	0x20000245
 80019fc:	20000250 	.word	0x20000250
 8001a00:	2000024e 	.word	0x2000024e

08001a04 <Voice_FrameAvailable>:

bool Voice_FrameAvailable(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
    return s_ready;
 8001a08:	4b03      	ldr	r3, [pc, #12]	@ (8001a18 <Voice_FrameAvailable+0x14>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b2db      	uxtb	r3, r3
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	2000024e 	.word	0x2000024e

08001a1c <Voice_TryPopFrame>:

bool Voice_TryPopFrame(voice_frame_t* out)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    if (!s_ready) return false;
 8001a24:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <Voice_TryPopFrame+0xac>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <Voice_TryPopFrame+0x1c>
 8001a34:	2300      	movs	r3, #0
 8001a36:	e043      	b.n	8001ac0 <Voice_TryPopFrame+0xa4>

    uint8_t f[6];
    for (int i = 0; i < 6; ++i) f[i] = s_last[i];
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00d      	b.n	8001a5a <Voice_TryPopFrame+0x3e>
 8001a3e:	4a23      	ldr	r2, [pc, #140]	@ (8001acc <Voice_TryPopFrame+0xb0>)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b2d9      	uxtb	r1, r3
 8001a48:	f107 0208 	add.w	r2, r7, #8
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4413      	add	r3, r2
 8001a50:	460a      	mov	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	ddee      	ble.n	8001a3e <Voice_TryPopFrame+0x22>
    s_ready = false;
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <Voice_TryPopFrame+0xac>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]

    if (!Voice_ValidateRaw6(f)) return false;
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fee8 	bl	8001840 <Voice_ValidateRaw6>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f083 0301 	eor.w	r3, r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <Voice_TryPopFrame+0x64>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e01f      	b.n	8001ac0 <Voice_TryPopFrame+0xa4>

    if (out) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01b      	beq.n	8001abe <Voice_TryPopFrame+0xa2>
        for (int i = 0; i < 6; ++i) out->raw[i] = f[i];
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e00c      	b.n	8001aa6 <Voice_TryPopFrame+0x8a>
 8001a8c:	f107 0208 	add.w	r2, r7, #8
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4413      	add	r3, r2
 8001a94:	7819      	ldrb	r1, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	460a      	mov	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	ddef      	ble.n	8001a8c <Voice_TryPopFrame+0x70>
        out->cmd = f[1];
 8001aac:	7a7a      	ldrb	r2, [r7, #9]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	719a      	strb	r2, [r3, #6]
        out->al  = f[2];
 8001ab2:	7aba      	ldrb	r2, [r7, #10]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	71da      	strb	r2, [r3, #7]
        out->ah  = f[3];
 8001ab8:	7afa      	ldrb	r2, [r7, #11]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	721a      	strb	r2, [r3, #8]
    }
    return true;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000024e 	.word	0x2000024e
 8001acc:	20000250 	.word	0x20000250

08001ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad0:	f7ff fd40 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad4:	480b      	ldr	r0, [pc, #44]	@ (8001b04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ad6:	490c      	ldr	r1, [pc, #48]	@ (8001b08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aec:	4c09      	ldr	r4, [pc, #36]	@ (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afa:	f004 fa37 	bl	8005f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afe:	f7ff f929 	bl	8000d54 <main>
  bx lr
 8001b02:	4770      	bx	lr
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b0c:	08006c28 	.word	0x08006c28
  ldr r2, =_sbss
 8001b10:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b14:	200003a8 	.word	0x200003a8

08001b18 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <CAN1_RX1_IRQHandler>
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_Init+0x28>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_Init+0x28>)
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 fecd 	bl	80028cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7ff fbe6 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fee5 	bl	8002936 <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 fead 	bl	80028e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	@ (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000000c 	.word	0x2000000c
 8001ba0:	20000014 	.word	0x20000014
 8001ba4:	20000010 	.word	0x20000010

08001ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_IncTick+0x1c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a03      	ldr	r2, [pc, #12]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20000014 	.word	0x20000014
 8001bc8:	20000258 	.word	0x20000258

08001bcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	@ (8001bdc <HAL_GetTick+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000258 	.word	0x20000258

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff fff0 	bl	8001bcc <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffe0 	bl	8001bcc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000014 	.word	0x20000014

08001c28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0be      	b.n	8001dc8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe ff2c 	bl	8000ac4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fc01 	bl	8002474 <ADC_ConversionStop_Disable>
 8001c72:	4603      	mov	r3, r0
 8001c74:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f040 8099 	bne.w	8001db6 <HAL_ADC_Init+0x18e>
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 8095 	bne.w	8001db6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c94:	f023 0302 	bic.w	r3, r3, #2
 8001c98:	f043 0202 	orr.w	r2, r3, #2
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ca8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7b1b      	ldrb	r3, [r3, #12]
 8001cae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cb0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cc0:	d003      	beq.n	8001cca <HAL_ADC_Init+0xa2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_ADC_Init+0xa8>
 8001cca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cce:	e000      	b.n	8001cd2 <HAL_ADC_Init+0xaa>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7d1b      	ldrb	r3, [r3, #20]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d119      	bne.n	8001d14 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7b1b      	ldrb	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	035a      	lsls	r2, r3, #13
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	e00b      	b.n	8001d14 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	f043 0220 	orr.w	r2, r3, #32
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0c:	f043 0201 	orr.w	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	4b28      	ldr	r3, [pc, #160]	@ (8001dd0 <HAL_ADC_Init+0x1a8>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d44:	d003      	beq.n	8001d4e <HAL_ADC_Init+0x126>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d104      	bne.n	8001d58 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	051b      	lsls	r3, r3, #20
 8001d56:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <HAL_ADC_Init+0x1ac>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d10b      	bne.n	8001d94 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d92:	e018      	b.n	8001dc6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	f023 0312 	bic.w	r3, r3, #18
 8001d9c:	f043 0210 	orr.w	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001db4:	e007      	b.n	8001dc6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	f043 0210 	orr.w	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	ffe1f7fd 	.word	0xffe1f7fd
 8001dd4:	ff1f0efe 	.word	0xff1f0efe

08001dd8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a64      	ldr	r2, [pc, #400]	@ (8001f80 <HAL_ADC_Start_DMA+0x1a8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d004      	beq.n	8001dfc <HAL_ADC_Start_DMA+0x24>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a63      	ldr	r2, [pc, #396]	@ (8001f84 <HAL_ADC_Start_DMA+0x1ac>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d106      	bne.n	8001e0a <HAL_ADC_Start_DMA+0x32>
 8001dfc:	4b60      	ldr	r3, [pc, #384]	@ (8001f80 <HAL_ADC_Start_DMA+0x1a8>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 80b3 	bne.w	8001f70 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_Start_DMA+0x40>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e0ae      	b.n	8001f76 <HAL_ADC_Start_DMA+0x19e>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 facd 	bl	80023c0 <ADC_Enable>
 8001e26:	4603      	mov	r3, r0
 8001e28:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 809a 	bne.w	8001f66 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e36:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8001f84 <HAL_ADC_Start_DMA+0x1ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d105      	bne.n	8001e5c <HAL_ADC_Start_DMA+0x84>
 8001e50:	4b4b      	ldr	r3, [pc, #300]	@ (8001f80 <HAL_ADC_Start_DMA+0x1a8>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d115      	bne.n	8001e88 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d026      	beq.n	8001ec4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e7e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e86:	e01d      	b.n	8001ec4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a39      	ldr	r2, [pc, #228]	@ (8001f80 <HAL_ADC_Start_DMA+0x1a8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_Start_DMA+0xd0>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a38      	ldr	r2, [pc, #224]	@ (8001f84 <HAL_ADC_Start_DMA+0x1ac>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d10d      	bne.n	8001ec4 <HAL_ADC_Start_DMA+0xec>
 8001ea8:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_ADC_Start_DMA+0x1a8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ebc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	f023 0206 	bic.w	r2, r3, #6
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001edc:	e002      	b.n	8001ee4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a25      	ldr	r2, [pc, #148]	@ (8001f88 <HAL_ADC_Start_DMA+0x1b0>)
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a24      	ldr	r2, [pc, #144]	@ (8001f8c <HAL_ADC_Start_DMA+0x1b4>)
 8001efa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a23      	ldr	r2, [pc, #140]	@ (8001f90 <HAL_ADC_Start_DMA+0x1b8>)
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0202 	mvn.w	r2, #2
 8001f0c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f1c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a18      	ldr	r0, [r3, #32]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	334c      	adds	r3, #76	@ 0x4c
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f000 fd69 	bl	8002a04 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f3c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f40:	d108      	bne.n	8001f54 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001f50:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f52:	e00f      	b.n	8001f74 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f62:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f64:	e006      	b.n	8001f74 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001f6e:	e001      	b.n	8001f74 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40012400 	.word	0x40012400
 8001f84:	40012800 	.word	0x40012800
 8001f88:	080024f7 	.word	0x080024f7
 8001f8c:	08002573 	.word	0x08002573
 8001f90:	0800258f 	.word	0x0800258f

08001f94 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_Stop_DMA+0x1a>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e03a      	b.n	8002024 <HAL_ADC_Stop_DMA+0x90>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa5c 	bl	8002474 <ADC_ConversionStop_Disable>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d129      	bne.n	800201a <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fd4:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d11a      	bne.n	800201a <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fd6b 	bl	8002ac4 <HAL_DMA_Abort>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28
 800200c:	e005      	b.n	800201a <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002012:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03e      	beq.n	80020cc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d039      	beq.n	80020cc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002068:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800207a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800207e:	d11d      	bne.n	80020bc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002084:	2b00      	cmp	r3, #0
 8002086:	d119      	bne.n	80020bc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0220 	bic.w	r2, r2, #32
 8002096:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d105      	bne.n	80020bc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	f043 0201 	orr.w	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff f83d 	bl	800113c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0212 	mvn.w	r2, #18
 80020ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d04d      	beq.n	8002172 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d048      	beq.n	8002172 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002102:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002106:	d012      	beq.n	800212e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002112:	2b00      	cmp	r3, #0
 8002114:	d125      	bne.n	8002162 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002120:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002124:	d11d      	bne.n	8002162 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800212a:	2b00      	cmp	r3, #0
 800212c:	d119      	bne.n	8002162 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800213c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002142:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215a:	f043 0201 	orr.w	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fadc 	bl	8002720 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 020c 	mvn.w	r2, #12
 8002170:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d012      	beq.n	80021a2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00d      	beq.n	80021a2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f812 	bl	80021bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0201 	mvn.w	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
	...

080021d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x20>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0dc      	b.n	80023aa <HAL_ADC_ConfigChannel+0x1da>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b06      	cmp	r3, #6
 80021fe:	d81c      	bhi.n	800223a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b05      	subs	r3, #5
 8002212:	221f      	movs	r2, #31
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	4019      	ands	r1, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b05      	subs	r3, #5
 800222c:	fa00 f203 	lsl.w	r2, r0, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	635a      	str	r2, [r3, #52]	@ 0x34
 8002238:	e03c      	b.n	80022b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d81c      	bhi.n	800227c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	3b23      	subs	r3, #35	@ 0x23
 8002254:	221f      	movs	r2, #31
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	4019      	ands	r1, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	3b23      	subs	r3, #35	@ 0x23
 800226e:	fa00 f203 	lsl.w	r2, r0, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
 800227a:	e01b      	b.n	80022b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	3b41      	subs	r3, #65	@ 0x41
 800228e:	221f      	movs	r2, #31
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	4019      	ands	r1, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b41      	subs	r3, #65	@ 0x41
 80022a8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d91c      	bls.n	80022f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68d9      	ldr	r1, [r3, #12]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	3b1e      	subs	r3, #30
 80022ce:	2207      	movs	r2, #7
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4019      	ands	r1, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6898      	ldr	r0, [r3, #8]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	3b1e      	subs	r3, #30
 80022e8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60da      	str	r2, [r3, #12]
 80022f4:	e019      	b.n	800232a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6919      	ldr	r1, [r3, #16]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	2207      	movs	r2, #7
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	4019      	ands	r1, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6898      	ldr	r0, [r3, #8]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	fa00 f203 	lsl.w	r2, r0, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b10      	cmp	r3, #16
 8002330:	d003      	beq.n	800233a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002336:	2b11      	cmp	r3, #17
 8002338:	d132      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1d      	ldr	r2, [pc, #116]	@ (80023b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d125      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d126      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002360:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d11a      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800236a:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a13      	ldr	r2, [pc, #76]	@ (80023bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	0c9a      	lsrs	r2, r3, #18
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x1b2>
 800238e:	e007      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	f043 0220 	orr.w	r2, r3, #32
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	40012400 	.word	0x40012400
 80023b8:	2000000c 	.word	0x2000000c
 80023bc:	431bde83 	.word	0x431bde83

080023c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d040      	beq.n	8002460 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023ee:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <ADC_Enable+0xac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002470 <ADC_Enable+0xb0>)
 80023f4:	fba2 2303 	umull	r2, r3, r2, r3
 80023f8:	0c9b      	lsrs	r3, r3, #18
 80023fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023fc:	e002      	b.n	8002404 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	3b01      	subs	r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f9      	bne.n	80023fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800240a:	f7ff fbdf 	bl	8001bcc <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002410:	e01f      	b.n	8002452 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002412:	f7ff fbdb 	bl	8001bcc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d918      	bls.n	8002452 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	d011      	beq.n	8002452 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	f043 0210 	orr.w	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243e:	f043 0201 	orr.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e007      	b.n	8002462 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d1d8      	bne.n	8002412 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000000c 	.word	0x2000000c
 8002470:	431bde83 	.word	0x431bde83

08002474 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d12e      	bne.n	80024ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800249e:	f7ff fb95 	bl	8001bcc <HAL_GetTick>
 80024a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024a4:	e01b      	b.n	80024de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024a6:	f7ff fb91 	bl	8001bcc <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d914      	bls.n	80024de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d10d      	bne.n	80024de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c6:	f043 0210 	orr.w	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e007      	b.n	80024ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d0dc      	beq.n	80024a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800250c:	2b00      	cmp	r3, #0
 800250e:	d127      	bne.n	8002560 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002514:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002526:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800252a:	d115      	bne.n	8002558 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002530:	2b00      	cmp	r3, #0
 8002532:	d111      	bne.n	8002558 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002550:	f043 0201 	orr.w	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f7fe fdef 	bl	800113c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800255e:	e004      	b.n	800256a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4798      	blx	r3
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff fe12 	bl	80021aa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	f043 0204 	orr.w	r2, r3, #4
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7fe fdd7 	bl	8001168 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80025de:	2302      	movs	r3, #2
 80025e0:	e097      	b.n	8002712 <HAL_ADCEx_Calibration_Start+0x14e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff42 	bl	8002474 <ADC_ConversionStop_Disable>
 80025f0:	4603      	mov	r3, r0
 80025f2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fee3 	bl	80023c0 <ADC_Enable>
 80025fa:	4603      	mov	r3, r0
 80025fc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f040 8081 	bne.w	8002708 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800260e:	f023 0302 	bic.w	r3, r3, #2
 8002612:	f043 0202 	orr.w	r2, r3, #2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800261a:	4b40      	ldr	r3, [pc, #256]	@ (800271c <HAL_ADCEx_Calibration_Start+0x158>)
 800261c:	681c      	ldr	r4, [r3, #0]
 800261e:	2002      	movs	r0, #2
 8002620:	f001 fa9a 	bl	8003b58 <HAL_RCCEx_GetPeriphCLKFreq>
 8002624:	4603      	mov	r3, r0
 8002626:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800262a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800262c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800262e:	e002      	b.n	8002636 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3b01      	subs	r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f9      	bne.n	8002630 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0208 	orr.w	r2, r2, #8
 800264a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800264c:	f7ff fabe 	bl	8001bcc <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002652:	e01b      	b.n	800268c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002654:	f7ff faba 	bl	8001bcc <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b0a      	cmp	r3, #10
 8002660:	d914      	bls.n	800268c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00d      	beq.n	800268c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	f023 0312 	bic.w	r3, r3, #18
 8002678:	f043 0210 	orr.w	r2, r3, #16
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e042      	b.n	8002712 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1dc      	bne.n	8002654 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0204 	orr.w	r2, r2, #4
 80026a8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80026aa:	f7ff fa8f 	bl	8001bcc <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026b0:	e01b      	b.n	80026ea <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026b2:	f7ff fa8b 	bl	8001bcc <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b0a      	cmp	r3, #10
 80026be:	d914      	bls.n	80026ea <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d2:	f023 0312 	bic.w	r3, r3, #18
 80026d6:	f043 0210 	orr.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e013      	b.n	8002712 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1dc      	bne.n	80026b2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fc:	f023 0303 	bic.w	r3, r3, #3
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002710:	7dfb      	ldrb	r3, [r7, #23]
}
 8002712:	4618      	mov	r0, r3
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	2000000c 	.word	0x2000000c

08002720 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
	...

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800275c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002766:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60d3      	str	r3, [r2, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	db0b      	blt.n	80027c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4906      	ldr	r1, [pc, #24]	@ (80027cc <__NVIC_EnableIRQ+0x34>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2001      	movs	r0, #1
 80027ba:	fa00 f202 	lsl.w	r2, r0, r2
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100

080027d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	db0a      	blt.n	80027fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	490c      	ldr	r1, [pc, #48]	@ (800281c <__NVIC_SetPriority+0x4c>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	0112      	lsls	r2, r2, #4
 80027f0:	b2d2      	uxtb	r2, r2
 80027f2:	440b      	add	r3, r1
 80027f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f8:	e00a      	b.n	8002810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4908      	ldr	r1, [pc, #32]	@ (8002820 <__NVIC_SetPriority+0x50>)
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	3b04      	subs	r3, #4
 8002808:	0112      	lsls	r2, r2, #4
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	440b      	add	r3, r1
 800280e:	761a      	strb	r2, [r3, #24]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000e100 	.word	0xe000e100
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	@ 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f1c3 0307 	rsb	r3, r3, #7
 800283e:	2b04      	cmp	r3, #4
 8002840:	bf28      	it	cs
 8002842:	2304      	movcs	r3, #4
 8002844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3304      	adds	r3, #4
 800284a:	2b06      	cmp	r3, #6
 800284c:	d902      	bls.n	8002854 <NVIC_EncodePriority+0x30>
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3b03      	subs	r3, #3
 8002852:	e000      	b.n	8002856 <NVIC_EncodePriority+0x32>
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	f04f 32ff 	mov.w	r2, #4294967295
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	401a      	ands	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	43d9      	mvns	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	4313      	orrs	r3, r2
         );
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	@ 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002898:	d301      	bcc.n	800289e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289a:	2301      	movs	r3, #1
 800289c:	e00f      	b.n	80028be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289e:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <SysTick_Config+0x40>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a6:	210f      	movs	r1, #15
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	f7ff ff90 	bl	80027d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b0:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <SysTick_Config+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b6:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <SysTick_Config+0x40>)
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	e000e010 	.word	0xe000e010

080028cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff2d 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f4:	f7ff ff42 	bl	800277c <__NVIC_GetPriorityGrouping>
 80028f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff90 	bl	8002824 <NVIC_EncodePriority>
 8002904:	4602      	mov	r2, r0
 8002906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff5f 	bl	80027d0 <__NVIC_SetPriority>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff35 	bl	8002798 <__NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ffa2 	bl	8002888 <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e043      	b.n	80029ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	4b22      	ldr	r3, [pc, #136]	@ (80029f8 <HAL_DMA_Init+0xa8>)
 800296e:	4413      	add	r3, r2
 8002970:	4a22      	ldr	r2, [pc, #136]	@ (80029fc <HAL_DMA_Init+0xac>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	009a      	lsls	r2, r3, #2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <HAL_DMA_Init+0xb0>)
 8002982:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800299a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800299e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	bffdfff8 	.word	0xbffdfff8
 80029fc:	cccccccd 	.word	0xcccccccd
 8002a00:	40020000 	.word	0x40020000

08002a04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_DMA_Start_IT+0x20>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e04b      	b.n	8002abc <HAL_DMA_Start_IT+0xb8>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d13a      	bne.n	8002aae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f9eb 	bl	8002e38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 020e 	orr.w	r2, r2, #14
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	e00f      	b.n	8002a9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 020a 	orr.w	r2, r2, #10
 8002a9a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e005      	b.n	8002aba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d008      	beq.n	8002aee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e020      	b.n	8002b30 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 020e 	bic.w	r2, r2, #14
 8002afc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d005      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2204      	movs	r2, #4
 8002b58:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	e051      	b.n	8002c04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 020e 	bic.w	r2, r2, #14
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a22      	ldr	r2, [pc, #136]	@ (8002c10 <HAL_DMA_Abort_IT+0xd4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d029      	beq.n	8002bde <HAL_DMA_Abort_IT+0xa2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a21      	ldr	r2, [pc, #132]	@ (8002c14 <HAL_DMA_Abort_IT+0xd8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_DMA_Abort_IT+0x9e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1f      	ldr	r2, [pc, #124]	@ (8002c18 <HAL_DMA_Abort_IT+0xdc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01a      	beq.n	8002bd4 <HAL_DMA_Abort_IT+0x98>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c1c <HAL_DMA_Abort_IT+0xe0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d012      	beq.n	8002bce <HAL_DMA_Abort_IT+0x92>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1c      	ldr	r2, [pc, #112]	@ (8002c20 <HAL_DMA_Abort_IT+0xe4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x8c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c24 <HAL_DMA_Abort_IT+0xe8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d102      	bne.n	8002bc2 <HAL_DMA_Abort_IT+0x86>
 8002bbc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bc0:	e00e      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bc6:	e00b      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bcc:	e008      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bd2:	e005      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bd8:	e002      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bda:	2310      	movs	r3, #16
 8002bdc:	e000      	b.n	8002be0 <HAL_DMA_Abort_IT+0xa4>
 8002bde:	2301      	movs	r3, #1
 8002be0:	4a11      	ldr	r2, [pc, #68]	@ (8002c28 <HAL_DMA_Abort_IT+0xec>)
 8002be2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
    } 
  }
  return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40020008 	.word	0x40020008
 8002c14:	4002001c 	.word	0x4002001c
 8002c18:	40020030 	.word	0x40020030
 8002c1c:	40020044 	.word	0x40020044
 8002c20:	40020058 	.word	0x40020058
 8002c24:	4002006c 	.word	0x4002006c
 8002c28:	40020000 	.word	0x40020000

08002c2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	2204      	movs	r2, #4
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d04f      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xc8>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0204 	bic.w	r2, r2, #4
 8002c7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a66      	ldr	r2, [pc, #408]	@ (8002e1c <HAL_DMA_IRQHandler+0x1f0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d029      	beq.n	8002cda <HAL_DMA_IRQHandler+0xae>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a65      	ldr	r2, [pc, #404]	@ (8002e20 <HAL_DMA_IRQHandler+0x1f4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xaa>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a63      	ldr	r2, [pc, #396]	@ (8002e24 <HAL_DMA_IRQHandler+0x1f8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01a      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0xa4>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a62      	ldr	r2, [pc, #392]	@ (8002e28 <HAL_DMA_IRQHandler+0x1fc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d012      	beq.n	8002cca <HAL_DMA_IRQHandler+0x9e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a60      	ldr	r2, [pc, #384]	@ (8002e2c <HAL_DMA_IRQHandler+0x200>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00a      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x98>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8002e30 <HAL_DMA_IRQHandler+0x204>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d102      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x92>
 8002cb8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cbc:	e00e      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cbe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002cc2:	e00b      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cc4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002cc8:	e008      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002cce:	e005      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cd4:	e002      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cd6:	2340      	movs	r3, #64	@ 0x40
 8002cd8:	e000      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	4a55      	ldr	r2, [pc, #340]	@ (8002e34 <HAL_DMA_IRQHandler+0x208>)
 8002cde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8094 	beq.w	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cf2:	e08e      	b.n	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d056      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x186>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d051      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 020a 	bic.w	r2, r2, #10
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a38      	ldr	r2, [pc, #224]	@ (8002e1c <HAL_DMA_IRQHandler+0x1f0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d029      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x166>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a37      	ldr	r2, [pc, #220]	@ (8002e20 <HAL_DMA_IRQHandler+0x1f4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x162>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a35      	ldr	r2, [pc, #212]	@ (8002e24 <HAL_DMA_IRQHandler+0x1f8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01a      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x15c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a34      	ldr	r2, [pc, #208]	@ (8002e28 <HAL_DMA_IRQHandler+0x1fc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d012      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x156>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a32      	ldr	r2, [pc, #200]	@ (8002e2c <HAL_DMA_IRQHandler+0x200>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00a      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x150>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a31      	ldr	r2, [pc, #196]	@ (8002e30 <HAL_DMA_IRQHandler+0x204>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <HAL_DMA_IRQHandler+0x14a>
 8002d70:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d74:	e00e      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d7a:	e00b      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d80:	e008      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d86:	e005      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d8c:	e002      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e000      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d92:	2302      	movs	r3, #2
 8002d94:	4a27      	ldr	r2, [pc, #156]	@ (8002e34 <HAL_DMA_IRQHandler+0x208>)
 8002d96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d034      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002db0:	e02f      	b.n	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	2208      	movs	r2, #8
 8002db8:	409a      	lsls	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d028      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1e8>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d023      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
    }
  }
  return;
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
}
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40020008 	.word	0x40020008
 8002e20:	4002001c 	.word	0x4002001c
 8002e24:	40020030 	.word	0x40020030
 8002e28:	40020044 	.word	0x40020044
 8002e2c:	40020058 	.word	0x40020058
 8002e30:	4002006c 	.word	0x4002006c
 8002e34:	40020000 	.word	0x40020000

08002e38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d108      	bne.n	8002e78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e76:	e007      	b.n	8002e88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
	...

08002e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b08b      	sub	sp, #44	@ 0x2c
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea6:	e169      	b.n	800317c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	f040 8158 	bne.w	8003176 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4a9a      	ldr	r2, [pc, #616]	@ (8003134 <HAL_GPIO_Init+0x2a0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d05e      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
 8002ed0:	4a98      	ldr	r2, [pc, #608]	@ (8003134 <HAL_GPIO_Init+0x2a0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d875      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002ed6:	4a98      	ldr	r2, [pc, #608]	@ (8003138 <HAL_GPIO_Init+0x2a4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d058      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
 8002edc:	4a96      	ldr	r2, [pc, #600]	@ (8003138 <HAL_GPIO_Init+0x2a4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d86f      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002ee2:	4a96      	ldr	r2, [pc, #600]	@ (800313c <HAL_GPIO_Init+0x2a8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d052      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
 8002ee8:	4a94      	ldr	r2, [pc, #592]	@ (800313c <HAL_GPIO_Init+0x2a8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d869      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002eee:	4a94      	ldr	r2, [pc, #592]	@ (8003140 <HAL_GPIO_Init+0x2ac>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d04c      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
 8002ef4:	4a92      	ldr	r2, [pc, #584]	@ (8003140 <HAL_GPIO_Init+0x2ac>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d863      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002efa:	4a92      	ldr	r2, [pc, #584]	@ (8003144 <HAL_GPIO_Init+0x2b0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d046      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
 8002f00:	4a90      	ldr	r2, [pc, #576]	@ (8003144 <HAL_GPIO_Init+0x2b0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d85d      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002f06:	2b12      	cmp	r3, #18
 8002f08:	d82a      	bhi.n	8002f60 <HAL_GPIO_Init+0xcc>
 8002f0a:	2b12      	cmp	r3, #18
 8002f0c:	d859      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f14 <HAL_GPIO_Init+0x80>)
 8002f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f14:	08002f8f 	.word	0x08002f8f
 8002f18:	08002f69 	.word	0x08002f69
 8002f1c:	08002f7b 	.word	0x08002f7b
 8002f20:	08002fbd 	.word	0x08002fbd
 8002f24:	08002fc3 	.word	0x08002fc3
 8002f28:	08002fc3 	.word	0x08002fc3
 8002f2c:	08002fc3 	.word	0x08002fc3
 8002f30:	08002fc3 	.word	0x08002fc3
 8002f34:	08002fc3 	.word	0x08002fc3
 8002f38:	08002fc3 	.word	0x08002fc3
 8002f3c:	08002fc3 	.word	0x08002fc3
 8002f40:	08002fc3 	.word	0x08002fc3
 8002f44:	08002fc3 	.word	0x08002fc3
 8002f48:	08002fc3 	.word	0x08002fc3
 8002f4c:	08002fc3 	.word	0x08002fc3
 8002f50:	08002fc3 	.word	0x08002fc3
 8002f54:	08002fc3 	.word	0x08002fc3
 8002f58:	08002f71 	.word	0x08002f71
 8002f5c:	08002f85 	.word	0x08002f85
 8002f60:	4a79      	ldr	r2, [pc, #484]	@ (8003148 <HAL_GPIO_Init+0x2b4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f66:	e02c      	b.n	8002fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	623b      	str	r3, [r7, #32]
          break;
 8002f6e:	e029      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	3304      	adds	r3, #4
 8002f76:	623b      	str	r3, [r7, #32]
          break;
 8002f78:	e024      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	3308      	adds	r3, #8
 8002f80:	623b      	str	r3, [r7, #32]
          break;
 8002f82:	e01f      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	623b      	str	r3, [r7, #32]
          break;
 8002f8c:	e01a      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f96:	2304      	movs	r3, #4
 8002f98:	623b      	str	r3, [r7, #32]
          break;
 8002f9a:	e013      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	611a      	str	r2, [r3, #16]
          break;
 8002fae:	e009      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	615a      	str	r2, [r3, #20]
          break;
 8002fba:	e003      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	623b      	str	r3, [r7, #32]
          break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          break;
 8002fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2bff      	cmp	r3, #255	@ 0xff
 8002fc8:	d801      	bhi.n	8002fce <HAL_GPIO_Init+0x13a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	e001      	b.n	8002fd2 <HAL_GPIO_Init+0x13e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2bff      	cmp	r3, #255	@ 0xff
 8002fd8:	d802      	bhi.n	8002fe0 <HAL_GPIO_Init+0x14c>
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	e002      	b.n	8002fe6 <HAL_GPIO_Init+0x152>
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	3b08      	subs	r3, #8
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	210f      	movs	r1, #15
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	6a39      	ldr	r1, [r7, #32]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	431a      	orrs	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80b1 	beq.w	8003176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003014:	4b4d      	ldr	r3, [pc, #308]	@ (800314c <HAL_GPIO_Init+0x2b8>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	4a4c      	ldr	r2, [pc, #304]	@ (800314c <HAL_GPIO_Init+0x2b8>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6193      	str	r3, [r2, #24]
 8003020:	4b4a      	ldr	r3, [pc, #296]	@ (800314c <HAL_GPIO_Init+0x2b8>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800302c:	4a48      	ldr	r2, [pc, #288]	@ (8003150 <HAL_GPIO_Init+0x2bc>)
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a40      	ldr	r2, [pc, #256]	@ (8003154 <HAL_GPIO_Init+0x2c0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d013      	beq.n	8003080 <HAL_GPIO_Init+0x1ec>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3f      	ldr	r2, [pc, #252]	@ (8003158 <HAL_GPIO_Init+0x2c4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00d      	beq.n	800307c <HAL_GPIO_Init+0x1e8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a3e      	ldr	r2, [pc, #248]	@ (800315c <HAL_GPIO_Init+0x2c8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d007      	beq.n	8003078 <HAL_GPIO_Init+0x1e4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3d      	ldr	r2, [pc, #244]	@ (8003160 <HAL_GPIO_Init+0x2cc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_GPIO_Init+0x1e0>
 8003070:	2303      	movs	r3, #3
 8003072:	e006      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 8003074:	2304      	movs	r3, #4
 8003076:	e004      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 8003078:	2302      	movs	r3, #2
 800307a:	e002      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 8003080:	2300      	movs	r3, #0
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	f002 0203 	and.w	r2, r2, #3
 8003088:	0092      	lsls	r2, r2, #2
 800308a:	4093      	lsls	r3, r2
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003092:	492f      	ldr	r1, [pc, #188]	@ (8003150 <HAL_GPIO_Init+0x2bc>)
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	492c      	ldr	r1, [pc, #176]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4928      	ldr	r1, [pc, #160]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030d4:	4b23      	ldr	r3, [pc, #140]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	4922      	ldr	r1, [pc, #136]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030e2:	4b20      	ldr	r3, [pc, #128]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	491e      	ldr	r1, [pc, #120]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030fc:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	4918      	ldr	r1, [pc, #96]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800310a:	4b16      	ldr	r3, [pc, #88]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	43db      	mvns	r3, r3
 8003112:	4914      	ldr	r1, [pc, #80]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 8003114:	4013      	ands	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d021      	beq.n	8003168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003124:	4b0f      	ldr	r3, [pc, #60]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	490e      	ldr	r1, [pc, #56]	@ (8003164 <HAL_GPIO_Init+0x2d0>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
 8003130:	e021      	b.n	8003176 <HAL_GPIO_Init+0x2e2>
 8003132:	bf00      	nop
 8003134:	10320000 	.word	0x10320000
 8003138:	10310000 	.word	0x10310000
 800313c:	10220000 	.word	0x10220000
 8003140:	10210000 	.word	0x10210000
 8003144:	10120000 	.word	0x10120000
 8003148:	10110000 	.word	0x10110000
 800314c:	40021000 	.word	0x40021000
 8003150:	40010000 	.word	0x40010000
 8003154:	40010800 	.word	0x40010800
 8003158:	40010c00 	.word	0x40010c00
 800315c:	40011000 	.word	0x40011000
 8003160:	40011400 	.word	0x40011400
 8003164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003168:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <HAL_GPIO_Init+0x304>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	43db      	mvns	r3, r3
 8003170:	4909      	ldr	r1, [pc, #36]	@ (8003198 <HAL_GPIO_Init+0x304>)
 8003172:	4013      	ands	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	3301      	adds	r3, #1
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	f47f ae8e 	bne.w	8002ea8 <HAL_GPIO_Init+0x14>
  }
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	372c      	adds	r7, #44	@ 0x2c
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
 80031a8:	4613      	mov	r3, r2
 80031aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031ac:	787b      	ldrb	r3, [r7, #1]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031b8:	e003      	b.n	80031c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031ba:	887b      	ldrh	r3, [r7, #2]
 80031bc:	041a      	lsls	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	611a      	str	r2, [r3, #16]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e272      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8087 	beq.w	80032fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ec:	4b92      	ldr	r3, [pc, #584]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d00c      	beq.n	8003212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d112      	bne.n	800322a <HAL_RCC_OscConfig+0x5e>
 8003204:	4b8c      	ldr	r3, [pc, #560]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003210:	d10b      	bne.n	800322a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	4b89      	ldr	r3, [pc, #548]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d06c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x12c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d168      	bne.n	80032f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e24c      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x76>
 8003234:	4b80      	ldr	r3, [pc, #512]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a7f      	ldr	r2, [pc, #508]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e02e      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x98>
 800324a:	4b7b      	ldr	r3, [pc, #492]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7a      	ldr	r2, [pc, #488]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b78      	ldr	r3, [pc, #480]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a77      	ldr	r2, [pc, #476]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 800325c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e01d      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0xbc>
 800326e:	4b72      	ldr	r3, [pc, #456]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a71      	ldr	r2, [pc, #452]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b6f      	ldr	r3, [pc, #444]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6e      	ldr	r2, [pc, #440]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003288:	4b6b      	ldr	r3, [pc, #428]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6a      	ldr	r2, [pc, #424]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b68      	ldr	r3, [pc, #416]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a67      	ldr	r2, [pc, #412]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800329e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fc90 	bl	8001bcc <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fe fc8c 	bl	8001bcc <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	@ 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e200      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe4>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fc7c 	bl	8001bcc <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe fc78 	bl	8001bcc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	@ 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1ec      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	4b53      	ldr	r3, [pc, #332]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x10c>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d063      	beq.n	80033ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003306:	4b4c      	ldr	r3, [pc, #304]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003312:	4b49      	ldr	r3, [pc, #292]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x18c>
 800331e:	4b46      	ldr	r3, [pc, #280]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	4b43      	ldr	r3, [pc, #268]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x176>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e1c0      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b3d      	ldr	r3, [pc, #244]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4939      	ldr	r1, [pc, #228]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	e03a      	b.n	80033ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	4b36      	ldr	r3, [pc, #216]	@ (800343c <HAL_RCC_OscConfig+0x270>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe fc31 	bl	8001bcc <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336e:	f7fe fc2d 	bl	8001bcc <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e1a1      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	4b2d      	ldr	r3, [pc, #180]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b2a      	ldr	r3, [pc, #168]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4927      	ldr	r1, [pc, #156]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	e015      	b.n	80033ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b26      	ldr	r3, [pc, #152]	@ (800343c <HAL_RCC_OscConfig+0x270>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fe fc10 	bl	8001bcc <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b0:	f7fe fc0c 	bl	8001bcc <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e180      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d03a      	beq.n	8003450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d019      	beq.n	8003416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e2:	4b17      	ldr	r3, [pc, #92]	@ (8003440 <HAL_RCC_OscConfig+0x274>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fe fbf0 	bl	8001bcc <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fe fbec 	bl	8001bcc <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e160      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	4b0d      	ldr	r3, [pc, #52]	@ (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800340e:	2001      	movs	r0, #1
 8003410:	f000 face 	bl	80039b0 <RCC_Delay>
 8003414:	e01c      	b.n	8003450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <HAL_RCC_OscConfig+0x274>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7fe fbd6 	bl	8001bcc <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003422:	e00f      	b.n	8003444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003424:	f7fe fbd2 	bl	8001bcc <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d908      	bls.n	8003444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e146      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	42420000 	.word	0x42420000
 8003440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	4b92      	ldr	r3, [pc, #584]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e9      	bne.n	8003424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a6 	beq.w	80035aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003462:	4b8b      	ldr	r3, [pc, #556]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b88      	ldr	r3, [pc, #544]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4a87      	ldr	r2, [pc, #540]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003478:	61d3      	str	r3, [r2, #28]
 800347a:	4b85      	ldr	r3, [pc, #532]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003486:	2301      	movs	r3, #1
 8003488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	4b82      	ldr	r3, [pc, #520]	@ (8003694 <HAL_RCC_OscConfig+0x4c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d118      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003496:	4b7f      	ldr	r3, [pc, #508]	@ (8003694 <HAL_RCC_OscConfig+0x4c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a7e      	ldr	r2, [pc, #504]	@ (8003694 <HAL_RCC_OscConfig+0x4c8>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a2:	f7fe fb93 	bl	8001bcc <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034aa:	f7fe fb8f 	bl	8001bcc <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b64      	cmp	r3, #100	@ 0x64
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e103      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	4b75      	ldr	r3, [pc, #468]	@ (8003694 <HAL_RCC_OscConfig+0x4c8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x312>
 80034d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	e02d      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x334>
 80034e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a69      	ldr	r2, [pc, #420]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	4b67      	ldr	r3, [pc, #412]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a66      	ldr	r2, [pc, #408]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6213      	str	r3, [r2, #32]
 80034fe:	e01c      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x356>
 8003508:	4b61      	ldr	r3, [pc, #388]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a60      	ldr	r2, [pc, #384]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	4b5e      	ldr	r3, [pc, #376]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a5d      	ldr	r2, [pc, #372]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e00b      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 8003522:	4b5b      	ldr	r3, [pc, #364]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a5a      	ldr	r2, [pc, #360]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6213      	str	r3, [r2, #32]
 800352e:	4b58      	ldr	r3, [pc, #352]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a57      	ldr	r2, [pc, #348]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d015      	beq.n	800356e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7fe fb43 	bl	8001bcc <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fe fb3f 	bl	8001bcc <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0b1      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	4b4b      	ldr	r3, [pc, #300]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ee      	beq.n	800354a <HAL_RCC_OscConfig+0x37e>
 800356c:	e014      	b.n	8003598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fe fb2d 	bl	8001bcc <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fe fb29 	bl	8001bcc <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e09b      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358c:	4b40      	ldr	r3, [pc, #256]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359e:	4b3c      	ldr	r3, [pc, #240]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8087 	beq.w	80036c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b4:	4b36      	ldr	r3, [pc, #216]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d061      	beq.n	8003684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d146      	bne.n	8003656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c8:	4b33      	ldr	r3, [pc, #204]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7fe fafd 	bl	8001bcc <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fe faf9 	bl	8001bcc <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e06d      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e8:	4b29      	ldr	r3, [pc, #164]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035fc:	d108      	bne.n	8003610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035fe:	4b24      	ldr	r3, [pc, #144]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4921      	ldr	r1, [pc, #132]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003610:	4b1f      	ldr	r3, [pc, #124]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a19      	ldr	r1, [r3, #32]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	430b      	orrs	r3, r1
 8003622:	491b      	ldr	r1, [pc, #108]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003628:	4b1b      	ldr	r3, [pc, #108]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fe facd 	bl	8001bcc <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003636:	f7fe fac9 	bl	8001bcc <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e03d      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003648:	4b11      	ldr	r3, [pc, #68]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x46a>
 8003654:	e035      	b.n	80036c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe fab6 	bl	8001bcc <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe fab2 	bl	8001bcc <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e026      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003676:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x498>
 8003682:	e01e      	b.n	80036c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d107      	bne.n	800369c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e019      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
 8003690:	40021000 	.word	0x40021000
 8003694:	40007000 	.word	0x40007000
 8003698:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_OscConfig+0x500>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40021000 	.word	0x40021000

080036d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0d0      	b.n	8003886 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d910      	bls.n	8003714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b67      	ldr	r3, [pc, #412]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 0207 	bic.w	r2, r3, #7
 80036fa:	4965      	ldr	r1, [pc, #404]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b63      	ldr	r3, [pc, #396]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0b8      	b.n	8003886 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d020      	beq.n	8003762 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800372c:	4b59      	ldr	r3, [pc, #356]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4a58      	ldr	r2, [pc, #352]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003736:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003744:	4b53      	ldr	r3, [pc, #332]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a52      	ldr	r2, [pc, #328]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800374e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003750:	4b50      	ldr	r3, [pc, #320]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	494d      	ldr	r1, [pc, #308]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d040      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b47      	ldr	r3, [pc, #284]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d115      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e07f      	b.n	8003886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b41      	ldr	r3, [pc, #260]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e073      	b.n	8003886 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b3d      	ldr	r3, [pc, #244]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e06b      	b.n	8003886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b39      	ldr	r3, [pc, #228]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4936      	ldr	r1, [pc, #216]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c0:	f7fe fa04 	bl	8001bcc <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fe fa00 	bl	8001bcc <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e053      	b.n	8003886 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b2d      	ldr	r3, [pc, #180]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b27      	ldr	r3, [pc, #156]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d210      	bcs.n	8003820 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b24      	ldr	r3, [pc, #144]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 0207 	bic.w	r2, r3, #7
 8003806:	4922      	ldr	r1, [pc, #136]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b20      	ldr	r3, [pc, #128]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e032      	b.n	8003886 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800382c:	4b19      	ldr	r3, [pc, #100]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4916      	ldr	r1, [pc, #88]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800384a:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	490e      	ldr	r1, [pc, #56]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800385e:	f000 f821 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8003862:	4602      	mov	r2, r0
 8003864:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	490a      	ldr	r1, [pc, #40]	@ (8003898 <HAL_RCC_ClockConfig+0x1c8>)
 8003870:	5ccb      	ldrb	r3, [r1, r3]
 8003872:	fa22 f303 	lsr.w	r3, r2, r3
 8003876:	4a09      	ldr	r2, [pc, #36]	@ (800389c <HAL_RCC_ClockConfig+0x1cc>)
 8003878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800387a:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_RCC_ClockConfig+0x1d0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe f962 	bl	8001b48 <HAL_InitTick>

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40022000 	.word	0x40022000
 8003894:	40021000 	.word	0x40021000
 8003898:	08006bac 	.word	0x08006bac
 800389c:	2000000c 	.word	0x2000000c
 80038a0:	20000010 	.word	0x20000010

080038a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	2300      	movs	r3, #0
 80038b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038be:	4b1e      	ldr	r3, [pc, #120]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x94>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d002      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x30>
 80038ce:	2b08      	cmp	r3, #8
 80038d0:	d003      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0x36>
 80038d2:	e027      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038d4:	4b19      	ldr	r3, [pc, #100]	@ (800393c <HAL_RCC_GetSysClockFreq+0x98>)
 80038d6:	613b      	str	r3, [r7, #16]
      break;
 80038d8:	e027      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	0c9b      	lsrs	r3, r3, #18
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	4a17      	ldr	r2, [pc, #92]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038e4:	5cd3      	ldrb	r3, [r2, r3]
 80038e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d010      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038f2:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x94>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	0c5b      	lsrs	r3, r3, #17
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	4a11      	ldr	r2, [pc, #68]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038fe:	5cd3      	ldrb	r3, [r2, r3]
 8003900:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a0d      	ldr	r2, [pc, #52]	@ (800393c <HAL_RCC_GetSysClockFreq+0x98>)
 8003906:	fb03 f202 	mul.w	r2, r3, r2
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	e004      	b.n	800391e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a0c      	ldr	r2, [pc, #48]	@ (8003948 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003918:	fb02 f303 	mul.w	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	613b      	str	r3, [r7, #16]
      break;
 8003922:	e002      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003924:	4b05      	ldr	r3, [pc, #20]	@ (800393c <HAL_RCC_GetSysClockFreq+0x98>)
 8003926:	613b      	str	r3, [r7, #16]
      break;
 8003928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800392a:	693b      	ldr	r3, [r7, #16]
}
 800392c:	4618      	mov	r0, r3
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
 800393c:	007a1200 	.word	0x007a1200
 8003940:	08006bc4 	.word	0x08006bc4
 8003944:	08006bd4 	.word	0x08006bd4
 8003948:	003d0900 	.word	0x003d0900

0800394c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003950:	4b02      	ldr	r3, [pc, #8]	@ (800395c <HAL_RCC_GetHCLKFreq+0x10>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	2000000c 	.word	0x2000000c

08003960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003964:	f7ff fff2 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4903      	ldr	r1, [pc, #12]	@ (8003984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	08006bbc 	.word	0x08006bbc

08003988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800398c:	f7ff ffde 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003990:	4602      	mov	r2, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	0adb      	lsrs	r3, r3, #11
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4903      	ldr	r1, [pc, #12]	@ (80039ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800399e:	5ccb      	ldrb	r3, [r1, r3]
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	08006bbc 	.word	0x08006bbc

080039b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039b8:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <RCC_Delay+0x34>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	@ (80039e8 <RCC_Delay+0x38>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	0a5b      	lsrs	r3, r3, #9
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039cc:	bf00      	nop
  }
  while (Delay --);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1e5a      	subs	r2, r3, #1
 80039d2:	60fa      	str	r2, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f9      	bne.n	80039cc <RCC_Delay+0x1c>
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	2000000c 	.word	0x2000000c
 80039e8:	10624dd3 	.word	0x10624dd3

080039ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d07d      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10d      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a18:	4b4c      	ldr	r3, [pc, #304]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	61d3      	str	r3, [r2, #28]
 8003a24:	4b49      	ldr	r3, [pc, #292]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a30:	2301      	movs	r3, #1
 8003a32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	4b46      	ldr	r3, [pc, #280]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d118      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a40:	4b43      	ldr	r3, [pc, #268]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a42      	ldr	r2, [pc, #264]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4c:	f7fe f8be 	bl	8001bcc <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a52:	e008      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a54:	f7fe f8ba 	bl	8001bcc <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e06d      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a66:	4b3a      	ldr	r3, [pc, #232]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a72:	4b36      	ldr	r3, [pc, #216]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d02e      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d027      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a90:	4b2e      	ldr	r3, [pc, #184]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003aa6:	4a29      	ldr	r2, [pc, #164]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d014      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fe f889 	bl	8001bcc <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fe f885 	bl	8001bcc <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e036      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0ee      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4917      	ldr	r1, [pc, #92]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af8:	4b14      	ldr	r3, [pc, #80]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	4a13      	ldr	r2, [pc, #76]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b10:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	490b      	ldr	r1, [pc, #44]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b2e:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4904      	ldr	r1, [pc, #16]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40007000 	.word	0x40007000
 8003b54:	42420440 	.word	0x42420440

08003b58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	2300      	movs	r3, #0
 8003b72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	f200 808a 	bhi.w	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d045      	beq.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d075      	beq.n	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b8e:	e082      	b.n	8003c96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b90:	4b46      	ldr	r3, [pc, #280]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b96:	4b45      	ldr	r3, [pc, #276]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d07b      	beq.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	0c9b      	lsrs	r3, r3, #18
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	4a41      	ldr	r2, [pc, #260]	@ (8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003bac:	5cd3      	ldrb	r3, [r2, r3]
 8003bae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d015      	beq.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bba:	4b3c      	ldr	r3, [pc, #240]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	0c5b      	lsrs	r3, r3, #17
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	4a3b      	ldr	r2, [pc, #236]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bd4:	4a38      	ldr	r2, [pc, #224]	@ (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	61fb      	str	r3, [r7, #28]
 8003be4:	e004      	b.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4a34      	ldr	r2, [pc, #208]	@ (8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bfc:	d102      	bne.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	61bb      	str	r3, [r7, #24]
      break;
 8003c02:	e04a      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	61bb      	str	r3, [r7, #24]
      break;
 8003c12:	e042      	b.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003c14:	4b25      	ldr	r3, [pc, #148]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c24:	d108      	bne.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	e01f      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c42:	d109      	bne.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c44:	4b19      	ldr	r3, [pc, #100]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003c50:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e00f      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c62:	d11c      	bne.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c64:	4b11      	ldr	r3, [pc, #68]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d016      	beq.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c70:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003c74:	61bb      	str	r3, [r7, #24]
      break;
 8003c76:	e012      	b.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c78:	e011      	b.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c7a:	f7ff fe85 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	0b9b      	lsrs	r3, r3, #14
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	61bb      	str	r3, [r7, #24]
      break;
 8003c94:	e004      	b.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c96:	bf00      	nop
 8003c98:	e002      	b.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c9e:	bf00      	nop
    }
  }
  return (frequency);
 8003ca0:	69bb      	ldr	r3, [r7, #24]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08006bd8 	.word	0x08006bd8
 8003cb4:	08006be8 	.word	0x08006be8
 8003cb8:	007a1200 	.word	0x007a1200
 8003cbc:	003d0900 	.word	0x003d0900
 8003cc0:	aaaaaaab 	.word	0xaaaaaaab

08003cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e076      	b.n	8003dc4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d108      	bne.n	8003cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ce6:	d009      	beq.n	8003cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	61da      	str	r2, [r3, #28]
 8003cee:	e005      	b.n	8003cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd faac 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d80:	ea42 0103 	orr.w	r1, r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	0c1a      	lsrs	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f002 0204 	and.w	r2, r2, #4
 8003da2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69da      	ldr	r2, [r3, #28]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003db2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ddc:	f7fd fef6 	bl	8001bcc <HAL_GetTick>
 8003de0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d001      	beq.n	8003df6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
 8003df4:	e12a      	b.n	800404c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_SPI_Transmit+0x36>
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e122      	b.n	800404c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_SPI_Transmit+0x48>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e11b      	b.n	800404c <HAL_SPI_Transmit+0x280>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2203      	movs	r2, #3
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e62:	d10f      	bne.n	8003e84 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8e:	2b40      	cmp	r3, #64	@ 0x40
 8003e90:	d007      	beq.n	8003ea2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ea0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eaa:	d152      	bne.n	8003f52 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <HAL_SPI_Transmit+0xee>
 8003eb4:	8b7b      	ldrh	r3, [r7, #26]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d145      	bne.n	8003f46 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ebe:	881a      	ldrh	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	1c9a      	adds	r2, r3, #2
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ede:	e032      	b.n	8003f46 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d112      	bne.n	8003f14 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	881a      	ldrh	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	1c9a      	adds	r2, r3, #2
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f12:	e018      	b.n	8003f46 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f14:	f7fd fe5a 	bl	8001bcc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d803      	bhi.n	8003f2c <HAL_SPI_Transmit+0x160>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2a:	d102      	bne.n	8003f32 <HAL_SPI_Transmit+0x166>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e082      	b.n	800404c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1c7      	bne.n	8003ee0 <HAL_SPI_Transmit+0x114>
 8003f50:	e053      	b.n	8003ffa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_Transmit+0x194>
 8003f5a:	8b7b      	ldrh	r3, [r7, #26]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d147      	bne.n	8003ff0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	7812      	ldrb	r2, [r2, #0]
 8003f6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f86:	e033      	b.n	8003ff0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d113      	bne.n	8003fbe <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003fbc:	e018      	b.n	8003ff0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fbe:	f7fd fe05 	bl	8001bcc <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d803      	bhi.n	8003fd6 <HAL_SPI_Transmit+0x20a>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d102      	bne.n	8003fdc <HAL_SPI_Transmit+0x210>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e02d      	b.n	800404c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1c6      	bne.n	8003f88 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	6839      	ldr	r1, [r7, #0]
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fbc4 	bl	800478c <SPI_EndRxTxTransaction>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800404a:	2300      	movs	r3, #0
  }
}
 800404c:	4618      	mov	r0, r3
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d001      	beq.n	8004074 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
 8004072:	e104      	b.n	800427e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800407c:	d112      	bne.n	80040a4 <HAL_SPI_Receive+0x50>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10e      	bne.n	80040a4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2204      	movs	r2, #4
 800408a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	68b9      	ldr	r1, [r7, #8]
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f8f3 	bl	8004286 <HAL_SPI_TransmitReceive>
 80040a0:	4603      	mov	r3, r0
 80040a2:	e0ec      	b.n	800427e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040a4:	f7fd fd92 	bl	8001bcc <HAL_GetTick>
 80040a8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_SPI_Receive+0x62>
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0e1      	b.n	800427e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_SPI_Receive+0x74>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e0da      	b.n	800427e <HAL_SPI_Receive+0x22a>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2204      	movs	r2, #4
 80040d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	88fa      	ldrh	r2, [r7, #6]
 80040e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004116:	d10f      	bne.n	8004138 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004126:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004136:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004142:	2b40      	cmp	r3, #64	@ 0x40
 8004144:	d007      	beq.n	8004156 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004154:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d170      	bne.n	8004240 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800415e:	e035      	b.n	80041cc <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d115      	bne.n	800419a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f103 020c 	add.w	r2, r3, #12
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004198:	e018      	b.n	80041cc <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800419a:	f7fd fd17 	bl	8001bcc <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d803      	bhi.n	80041b2 <HAL_SPI_Receive+0x15e>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d102      	bne.n	80041b8 <HAL_SPI_Receive+0x164>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d109      	bne.n	80041cc <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e058      	b.n	800427e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1c4      	bne.n	8004160 <HAL_SPI_Receive+0x10c>
 80041d6:	e038      	b.n	800424a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d113      	bne.n	800420e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	b292      	uxth	r2, r2
 80041f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f8:	1c9a      	adds	r2, r3, #2
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800420c:	e018      	b.n	8004240 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800420e:	f7fd fcdd 	bl	8001bcc <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d803      	bhi.n	8004226 <HAL_SPI_Receive+0x1d2>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d102      	bne.n	800422c <HAL_SPI_Receive+0x1d8>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e01e      	b.n	800427e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1c6      	bne.n	80041d8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fa4a 	bl	80046e8 <SPI_EndRxTransaction>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800427c:	2300      	movs	r3, #0
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b08a      	sub	sp, #40	@ 0x28
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004294:	2301      	movs	r3, #1
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004298:	f7fd fc98 	bl	8001bcc <HAL_GetTick>
 800429c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042a4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042b0:	7ffb      	ldrb	r3, [r7, #31]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d00c      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x4a>
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042bc:	d106      	bne.n	80042cc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <HAL_SPI_TransmitReceive+0x46>
 80042c6:	7ffb      	ldrb	r3, [r7, #31]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d001      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80042cc:	2302      	movs	r3, #2
 80042ce:	e17f      	b.n	80045d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_SPI_TransmitReceive+0x5c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <HAL_SPI_TransmitReceive+0x5c>
 80042dc:	887b      	ldrh	r3, [r7, #2]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e174      	b.n	80045d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_SPI_TransmitReceive+0x6e>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e16d      	b.n	80045d0 <HAL_SPI_TransmitReceive+0x34a>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b04      	cmp	r3, #4
 8004306:	d003      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2205      	movs	r2, #5
 800430c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	887a      	ldrh	r2, [r7, #2]
 8004320:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	887a      	ldrh	r2, [r7, #2]
 8004326:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	887a      	ldrh	r2, [r7, #2]
 8004332:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004350:	2b40      	cmp	r3, #64	@ 0x40
 8004352:	d007      	beq.n	8004364 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004362:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800436c:	d17e      	bne.n	800446c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_SPI_TransmitReceive+0xf6>
 8004376:	8afb      	ldrh	r3, [r7, #22]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d16c      	bne.n	8004456 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	881a      	ldrh	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a0:	e059      	b.n	8004456 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d11b      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x162>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <HAL_SPI_TransmitReceive+0x162>
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d113      	bne.n	80043e8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d0:	1c9a      	adds	r2, r3, #2
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d119      	bne.n	800442a <HAL_SPI_TransmitReceive+0x1a4>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d014      	beq.n	800442a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440a:	b292      	uxth	r2, r2
 800440c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	1c9a      	adds	r2, r3, #2
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004426:	2301      	movs	r3, #1
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800442a:	f7fd fbcf 	bl	8001bcc <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004436:	429a      	cmp	r2, r3
 8004438:	d80d      	bhi.n	8004456 <HAL_SPI_TransmitReceive+0x1d0>
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d009      	beq.n	8004456 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e0bc      	b.n	80045d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1a0      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x11c>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d19b      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x11c>
 800446a:	e082      	b.n	8004572 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_SPI_TransmitReceive+0x1f4>
 8004474:	8afb      	ldrh	r3, [r7, #22]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d171      	bne.n	800455e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	7812      	ldrb	r2, [r2, #0]
 8004486:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044a0:	e05d      	b.n	800455e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d11c      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x264>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d017      	beq.n	80044ea <HAL_SPI_TransmitReceive+0x264>
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d114      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	330c      	adds	r3, #12
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d119      	bne.n	800452c <HAL_SPI_TransmitReceive+0x2a6>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d014      	beq.n	800452c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004528:	2301      	movs	r3, #1
 800452a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800452c:	f7fd fb4e 	bl	8001bcc <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004538:	429a      	cmp	r2, r3
 800453a:	d803      	bhi.n	8004544 <HAL_SPI_TransmitReceive+0x2be>
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d102      	bne.n	800454a <HAL_SPI_TransmitReceive+0x2c4>
 8004544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e038      	b.n	80045d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d19c      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x21c>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d197      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004572:	6a3a      	ldr	r2, [r7, #32]
 8004574:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f908 	bl	800478c <SPI_EndRxTxTransaction>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e01d      	b.n	80045d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
  }
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3728      	adds	r7, #40	@ 0x28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045e8:	f7fd faf0 	bl	8001bcc <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	4413      	add	r3, r2
 80045f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045f8:	f7fd fae8 	bl	8001bcc <HAL_GetTick>
 80045fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045fe:	4b39      	ldr	r3, [pc, #228]	@ (80046e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	015b      	lsls	r3, r3, #5
 8004604:	0d1b      	lsrs	r3, r3, #20
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	fb02 f303 	mul.w	r3, r2, r3
 800460c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800460e:	e054      	b.n	80046ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d050      	beq.n	80046ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004618:	f7fd fad8 	bl	8001bcc <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	429a      	cmp	r2, r3
 8004626:	d902      	bls.n	800462e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d13d      	bne.n	80046aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800463c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004646:	d111      	bne.n	800466c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004650:	d004      	beq.n	800465c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800465a:	d107      	bne.n	800466c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800466a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004674:	d10f      	bne.n	8004696 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004694:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e017      	b.n	80046da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4013      	ands	r3, r2
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	bf0c      	ite	eq
 80046ca:	2301      	moveq	r3, #1
 80046cc:	2300      	movne	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d19b      	bne.n	8004610 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	2000000c 	.word	0x2000000c

080046e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046fc:	d111      	bne.n	8004722 <SPI_EndRxTransaction+0x3a>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004706:	d004      	beq.n	8004712 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004710:	d107      	bne.n	8004722 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004720:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800472a:	d117      	bne.n	800475c <SPI_EndRxTransaction+0x74>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004734:	d112      	bne.n	800475c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2200      	movs	r2, #0
 800473e:	2101      	movs	r1, #1
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f7ff ff49 	bl	80045d8 <SPI_WaitFlagStateUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01a      	beq.n	8004782 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004750:	f043 0220 	orr.w	r2, r3, #32
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e013      	b.n	8004784 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2200      	movs	r2, #0
 8004764:	2180      	movs	r1, #128	@ 0x80
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff ff36 	bl	80045d8 <SPI_WaitFlagStateUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	f043 0220 	orr.w	r2, r3, #32
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e000      	b.n	8004784 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2201      	movs	r2, #1
 80047a0:	2102      	movs	r1, #2
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7ff ff18 	bl	80045d8 <SPI_WaitFlagStateUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b2:	f043 0220 	orr.w	r2, r3, #32
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e013      	b.n	80047e6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2180      	movs	r1, #128	@ 0x80
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff ff05 	bl	80045d8 <SPI_WaitFlagStateUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e000      	b.n	80047e6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e041      	b.n	8004884 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fc feef 	bl	80015f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	4619      	mov	r1, r3
 800482c:	4610      	mov	r0, r2
 800482e:	f000 fa5b 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e03a      	b.n	800491a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a18      	ldr	r2, [pc, #96]	@ (8004924 <HAL_TIM_Base_Start_IT+0x98>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ce:	d009      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a14      	ldr	r2, [pc, #80]	@ (8004928 <HAL_TIM_Base_Start_IT+0x9c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_TIM_Base_Start_IT+0x58>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a13      	ldr	r2, [pc, #76]	@ (800492c <HAL_TIM_Base_Start_IT+0xa0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d010      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	e007      	b.n	8004918 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800

08004930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d020      	beq.n	8004994 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01b      	beq.n	8004994 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0202 	mvn.w	r2, #2
 8004964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f998 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f98b 	bl	8004c9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f99a 	bl	8004cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d020      	beq.n	80049e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01b      	beq.n	80049e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0204 	mvn.w	r2, #4
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f972 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f965 	bl	8004c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f974 	bl	8004cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d020      	beq.n	8004a2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01b      	beq.n	8004a2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0208 	mvn.w	r2, #8
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2204      	movs	r2, #4
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f94c 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f93f 	bl	8004c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f94e 	bl	8004cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d020      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0310 	and.w	r3, r3, #16
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0210 	mvn.w	r2, #16
 8004a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f926 	bl	8004cb0 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f919 	bl	8004c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f928 	bl	8004cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00c      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0201 	mvn.w	r2, #1
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc fb3a 	bl	8001110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00c      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa7f 	bl	8004fbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00c      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8f8 	bl	8004cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00c      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0220 	mvn.w	r2, #32
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fa52 	bl	8004fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_ConfigClockSource+0x1c>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0b4      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x186>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b64:	d03e      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6a:	f200 8087 	bhi.w	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_TIM_ConfigClockSource+0x172>
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7a:	d87f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b70      	cmp	r3, #112	@ 0x70
 8004b7e:	d01a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004b80:	2b70      	cmp	r3, #112	@ 0x70
 8004b82:	d87b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b60      	cmp	r3, #96	@ 0x60
 8004b86:	d050      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x11a>
 8004b88:	2b60      	cmp	r3, #96	@ 0x60
 8004b8a:	d877      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b50      	cmp	r3, #80	@ 0x50
 8004b8e:	d03c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xfa>
 8004b90:	2b50      	cmp	r3, #80	@ 0x50
 8004b92:	d873      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b94:	2b40      	cmp	r3, #64	@ 0x40
 8004b96:	d058      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x13a>
 8004b98:	2b40      	cmp	r3, #64	@ 0x40
 8004b9a:	d86f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b30      	cmp	r3, #48	@ 0x30
 8004b9e:	d064      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba0:	2b30      	cmp	r3, #48	@ 0x30
 8004ba2:	d86b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d060      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d867      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05c      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d05a      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	e062      	b.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc6:	f000 f974 	bl	8004eb2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
      break;
 8004be2:	e04f      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bf4:	f000 f95d 	bl	8004eb2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c06:	609a      	str	r2, [r3, #8]
      break;
 8004c08:	e03c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 f8d4 	bl	8004dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2150      	movs	r1, #80	@ 0x50
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f92b 	bl	8004e7e <TIM_ITRx_SetConfig>
      break;
 8004c28:	e02c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c36:	461a      	mov	r2, r3
 8004c38:	f000 f8f2 	bl	8004e20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2160      	movs	r1, #96	@ 0x60
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f91b 	bl	8004e7e <TIM_ITRx_SetConfig>
      break;
 8004c48:	e01c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 f8b4 	bl	8004dc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2140      	movs	r1, #64	@ 0x40
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f90b 	bl	8004e7e <TIM_ITRx_SetConfig>
      break;
 8004c68:	e00c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 f902 	bl	8004e7e <TIM_ITRx_SetConfig>
      break;
 8004c7a:	e003      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e000      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr
	...

08004ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8004db8 <TIM_Base_SetConfig+0xd0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00b      	beq.n	8004d18 <TIM_Base_SetConfig+0x30>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d06:	d007      	beq.n	8004d18 <TIM_Base_SetConfig+0x30>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dbc <TIM_Base_SetConfig+0xd4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_Base_SetConfig+0x30>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <TIM_Base_SetConfig+0xd8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d108      	bne.n	8004d2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a22      	ldr	r2, [pc, #136]	@ (8004db8 <TIM_Base_SetConfig+0xd0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00b      	beq.n	8004d4a <TIM_Base_SetConfig+0x62>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d38:	d007      	beq.n	8004d4a <TIM_Base_SetConfig+0x62>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dbc <TIM_Base_SetConfig+0xd4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d003      	beq.n	8004d4a <TIM_Base_SetConfig+0x62>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc0 <TIM_Base_SetConfig+0xd8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d108      	bne.n	8004d5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a0d      	ldr	r2, [pc, #52]	@ (8004db8 <TIM_Base_SetConfig+0xd0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d103      	bne.n	8004d90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f023 0201 	bic.w	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	611a      	str	r2, [r3, #16]
  }
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800

08004dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f023 0201 	bic.w	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f023 030a 	bic.w	r3, r3, #10
 8004e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	621a      	str	r2, [r3, #32]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	4770      	bx	lr

08004e20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f023 0210 	bic.w	r2, r3, #16
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	031b      	lsls	r3, r3, #12
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	621a      	str	r2, [r3, #32]
}
 8004e74:	bf00      	nop
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f043 0307 	orr.w	r3, r3, #7
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	609a      	str	r2, [r3, #8]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b087      	sub	sp, #28
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ecc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	021a      	lsls	r2, r3, #8
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	609a      	str	r2, [r3, #8]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e046      	b.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a16      	ldr	r2, [pc, #88]	@ (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f54:	d009      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a12      	ldr	r2, [pc, #72]	@ (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a10      	ldr	r2, [pc, #64]	@ (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d10c      	bne.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40000400 	.word	0x40000400
 8004fa8:	40000800 	.word	0x40000800

08004fac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr

08004fbe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e042      	b.n	8005068 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc fb76 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2224      	movs	r2, #36	@ 0x24
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fdaf 	bl	8005b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	@ 0x28
 8005074:	af02      	add	r7, sp, #8
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b20      	cmp	r3, #32
 800508e:	d175      	bne.n	800517c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_UART_Transmit+0x2c>
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e06e      	b.n	800517e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2221      	movs	r2, #33	@ 0x21
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ae:	f7fc fd8d 	bl	8001bcc <HAL_GetTick>
 80050b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c8:	d108      	bne.n	80050dc <HAL_UART_Transmit+0x6c>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e003      	b.n	80050e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050e4:	e02e      	b.n	8005144 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2200      	movs	r2, #0
 80050ee:	2180      	movs	r1, #128	@ 0x80
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fb13 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e03a      	b.n	800517e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10b      	bne.n	8005126 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800511c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	3302      	adds	r3, #2
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	e007      	b.n	8005136 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	781a      	ldrb	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3301      	adds	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1cb      	bne.n	80050e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2200      	movs	r2, #0
 8005156:	2140      	movs	r1, #64	@ 0x40
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fadf 	bl	800571c <UART_WaitOnFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d005      	beq.n	8005170 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e006      	b.n	800517e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	e000      	b.n	800517e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
  }
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	4613      	mov	r3, r2
 8005192:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b20      	cmp	r3, #32
 800519e:	d112      	bne.n	80051c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_UART_Receive_IT+0x26>
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e00b      	b.n	80051c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	461a      	mov	r2, r3
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fb06 	bl	80057ce <UART_Start_Receive_IT>
 80051c2:	4603      	mov	r3, r0
 80051c4:	e000      	b.n	80051c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80051c6:	2302      	movs	r3, #2
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b0ba      	sub	sp, #232	@ 0xe8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800520e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <HAL_UART_IRQHandler+0x66>
 8005222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fbe3 	bl	80059fa <UART_Receive_IT>
      return;
 8005234:	e25b      	b.n	80056ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80de 	beq.w	80053fc <HAL_UART_IRQHandler+0x22c>
 8005240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800524c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005250:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80d1 	beq.w	80053fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00b      	beq.n	800527e <HAL_UART_IRQHandler+0xae>
 8005266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800526a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	f043 0201 	orr.w	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <HAL_UART_IRQHandler+0xd2>
 800528a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529a:	f043 0202 	orr.w	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_UART_IRQHandler+0xf6>
 80052ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052be:	f043 0204 	orr.w	r2, r3, #4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d011      	beq.n	80052f6 <HAL_UART_IRQHandler+0x126>
 80052d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d105      	bne.n	80052ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	f043 0208 	orr.w	r2, r3, #8
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 81f2 	beq.w	80056e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_UART_IRQHandler+0x14e>
 800530c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fb6e 	bl	80059fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	bf14      	ite	ne
 800532c:	2301      	movne	r3, #1
 800532e:	2300      	moveq	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d103      	bne.n	800534a <HAL_UART_IRQHandler+0x17a>
 8005342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d04f      	beq.n	80053ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa78 	bl	8005840 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d041      	beq.n	80053e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005374:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800537c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3314      	adds	r3, #20
 8005386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800538a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800538e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1d9      	bne.n	800535e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d013      	beq.n	80053da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b6:	4a7e      	ldr	r2, [pc, #504]	@ (80055b0 <HAL_UART_IRQHandler+0x3e0>)
 80053b8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fd fbbc 	bl	8002b3c <HAL_DMA_Abort_IT>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80053d4:	4610      	mov	r0, r2
 80053d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	e00e      	b.n	80053f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fb fef6 	bl	80011cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e0:	e00a      	b.n	80053f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fb fef2 	bl	80011cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	e006      	b.n	80053f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fb feee 	bl	80011cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80053f6:	e175      	b.n	80056e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	bf00      	nop
    return;
 80053fa:	e173      	b.n	80056e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005400:	2b01      	cmp	r3, #1
 8005402:	f040 814f 	bne.w	80056a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 8148 	beq.w	80056a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8141 	beq.w	80056a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80b6 	beq.w	80055b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8145 	beq.w	80056e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005466:	429a      	cmp	r2, r3
 8005468:	f080 813e 	bcs.w	80056e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005472:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b20      	cmp	r3, #32
 800547c:	f000 8088 	beq.w	8005590 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005496:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800549a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800549e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	330c      	adds	r3, #12
 80054a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80054ac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80054b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80054c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1d9      	bne.n	8005480 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3314      	adds	r3, #20
 80054d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80054dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3314      	adds	r3, #20
 80054ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054f0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80054f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80054f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e1      	bne.n	80054cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3314      	adds	r3, #20
 800550e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005510:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005512:	e853 3f00 	ldrex	r3, [r3]
 8005516:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800551a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800551e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3314      	adds	r3, #20
 8005528:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800552c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800552e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005532:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800553a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e3      	bne.n	8005508 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	330c      	adds	r3, #12
 8005554:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800555e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005560:	f023 0310 	bic.w	r3, r3, #16
 8005564:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	330c      	adds	r3, #12
 800556e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005572:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005574:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005578:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e3      	bne.n	800554e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558a:	4618      	mov	r0, r3
 800558c:	f7fd fa9a 	bl	8002ac4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f8ad 	bl	8005706 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055ac:	e09c      	b.n	80056e8 <HAL_UART_IRQHandler+0x518>
 80055ae:	bf00      	nop
 80055b0:	08005905 	.word	0x08005905
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 808e 	beq.w	80056ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80055d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8089 	beq.w	80056ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80055fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005600:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800560c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e3      	bne.n	80055da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3314      	adds	r3, #20
 8005618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	e853 3f00 	ldrex	r3, [r3]
 8005620:	623b      	str	r3, [r7, #32]
   return(result);
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005636:	633a      	str	r2, [r7, #48]	@ 0x30
 8005638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800563c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e3      	bne.n	8005612 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	330c      	adds	r3, #12
 800565e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60fb      	str	r3, [r7, #12]
   return(result);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0310 	bic.w	r3, r3, #16
 800566e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800567c:	61fa      	str	r2, [r7, #28]
 800567e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	69b9      	ldr	r1, [r7, #24]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	617b      	str	r3, [r7, #20]
   return(result);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e3      	bne.n	8005658 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f832 	bl	8005706 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056a2:	e023      	b.n	80056ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <HAL_UART_IRQHandler+0x4f4>
 80056b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f935 	bl	800592c <UART_Transmit_IT>
    return;
 80056c2:	e014      	b.n	80056ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00e      	beq.n	80056ee <HAL_UART_IRQHandler+0x51e>
 80056d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d008      	beq.n	80056ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f974 	bl	80059ca <UART_EndTransmit_IT>
    return;
 80056e2:	e004      	b.n	80056ee <HAL_UART_IRQHandler+0x51e>
    return;
 80056e4:	bf00      	nop
 80056e6:	e002      	b.n	80056ee <HAL_UART_IRQHandler+0x51e>
      return;
 80056e8:	bf00      	nop
 80056ea:	e000      	b.n	80056ee <HAL_UART_IRQHandler+0x51e>
      return;
 80056ec:	bf00      	nop
  }
}
 80056ee:	37e8      	adds	r7, #232	@ 0xe8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr

08005706 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	460b      	mov	r3, r1
 8005710:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572c:	e03b      	b.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d037      	beq.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005736:	f7fc fa49 	bl	8001bcc <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <UART_WaitOnFlagUntilTimeout+0x30>
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e03a      	b.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	d023      	beq.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b80      	cmp	r3, #128	@ 0x80
 8005762:	d020      	beq.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b40      	cmp	r3, #64	@ 0x40
 8005768:	d01d      	beq.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b08      	cmp	r3, #8
 8005776:	d116      	bne.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f856 	bl	8005840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2208      	movs	r2, #8
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e00f      	b.n	80057c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4013      	ands	r3, r2
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d0b4      	beq.n	800572e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	4613      	mov	r3, r2
 80057da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	88fa      	ldrh	r2, [r7, #6]
 80057e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	88fa      	ldrh	r2, [r7, #6]
 80057ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2222      	movs	r2, #34	@ 0x22
 80057f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d007      	beq.n	8005814 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005812:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695a      	ldr	r2, [r3, #20]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0220 	orr.w	r2, r2, #32
 8005832:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b095      	sub	sp, #84	@ 0x54
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800585e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005868:	643a      	str	r2, [r7, #64]	@ 0x40
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800586e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e5      	bne.n	8005848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3314      	adds	r3, #20
 8005882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	61fb      	str	r3, [r7, #28]
   return(result);
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800589c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800589e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e5      	bne.n	800587c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d119      	bne.n	80058ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f023 0310 	bic.w	r3, r3, #16
 80058ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058d8:	61ba      	str	r2, [r7, #24]
 80058da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6979      	ldr	r1, [r7, #20]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	613b      	str	r3, [r7, #16]
   return(result);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058fa:	bf00      	nop
 80058fc:	3754      	adds	r7, #84	@ 0x54
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr

08005904 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7fb fc54 	bl	80011cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b21      	cmp	r3, #33	@ 0x21
 800593e:	d13e      	bne.n	80059be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005948:	d114      	bne.n	8005974 <UART_Transmit_IT+0x48>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d110      	bne.n	8005974 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005966:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	1c9a      	adds	r2, r3, #2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	621a      	str	r2, [r3, #32]
 8005972:	e008      	b.n	8005986 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	1c59      	adds	r1, r3, #1
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6211      	str	r1, [r2, #32]
 800597e:	781a      	ldrb	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29b      	uxth	r3, r3
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	4619      	mov	r1, r3
 8005994:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10f      	bne.n	80059ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68da      	ldr	r2, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e000      	b.n	80059c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059be:	2302      	movs	r3, #2
  }
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff fe82 	bl	80056f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b08c      	sub	sp, #48	@ 0x30
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b22      	cmp	r3, #34	@ 0x22
 8005a0c:	f040 80ae 	bne.w	8005b6c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a18:	d117      	bne.n	8005a4a <UART_Receive_IT+0x50>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d113      	bne.n	8005a4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	1c9a      	adds	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a48:	e026      	b.n	8005a98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a5c:	d007      	beq.n	8005a6e <UART_Receive_IT+0x74>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <UART_Receive_IT+0x82>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	e008      	b.n	8005a8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d15d      	bne.n	8005b68 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0220 	bic.w	r2, r2, #32
 8005aba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0201 	bic.w	r2, r2, #1
 8005ada:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d135      	bne.n	8005b5e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	613b      	str	r3, [r7, #16]
   return(result);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 0310 	bic.w	r3, r3, #16
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	330c      	adds	r3, #12
 8005b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b18:	623a      	str	r2, [r7, #32]
 8005b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	69f9      	ldr	r1, [r7, #28]
 8005b1e:	6a3a      	ldr	r2, [r7, #32]
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e5      	bne.n	8005af8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d10a      	bne.n	8005b50 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fdd5 	bl	8005706 <HAL_UARTEx_RxEventCallback>
 8005b5c:	e002      	b.n	8005b64 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fb fb16 	bl	8001190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e002      	b.n	8005b6e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e000      	b.n	8005b6e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b6c:	2302      	movs	r3, #2
  }
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3730      	adds	r7, #48	@ 0x30
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005bb2:	f023 030c 	bic.w	r3, r3, #12
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a2c      	ldr	r2, [pc, #176]	@ (8005c8c <UART_SetConfig+0x114>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d103      	bne.n	8005be8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005be0:	f7fd fed2 	bl	8003988 <HAL_RCC_GetPCLK2Freq>
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	e002      	b.n	8005bee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fd feba 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8005bec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009a      	lsls	r2, r3, #2
 8005bf8:	441a      	add	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	4a22      	ldr	r2, [pc, #136]	@ (8005c90 <UART_SetConfig+0x118>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	0119      	lsls	r1, r3, #4
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009a      	lsls	r2, r3, #2
 8005c18:	441a      	add	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c24:	4b1a      	ldr	r3, [pc, #104]	@ (8005c90 <UART_SetConfig+0x118>)
 8005c26:	fba3 0302 	umull	r0, r3, r3, r2
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	2064      	movs	r0, #100	@ 0x64
 8005c2e:	fb00 f303 	mul.w	r3, r0, r3
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	3332      	adds	r3, #50	@ 0x32
 8005c38:	4a15      	ldr	r2, [pc, #84]	@ (8005c90 <UART_SetConfig+0x118>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c44:	4419      	add	r1, r3
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009a      	lsls	r2, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c90 <UART_SetConfig+0x118>)
 8005c5e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	2064      	movs	r0, #100	@ 0x64
 8005c66:	fb00 f303 	mul.w	r3, r0, r3
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	3332      	adds	r3, #50	@ 0x32
 8005c70:	4a07      	ldr	r2, [pc, #28]	@ (8005c90 <UART_SetConfig+0x118>)
 8005c72:	fba2 2303 	umull	r2, r3, r2, r3
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	440a      	add	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40013800 	.word	0x40013800
 8005c90:	51eb851f 	.word	0x51eb851f

08005c94 <std>:
 8005c94:	2300      	movs	r3, #0
 8005c96:	b510      	push	{r4, lr}
 8005c98:	4604      	mov	r4, r0
 8005c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ca2:	6083      	str	r3, [r0, #8]
 8005ca4:	8181      	strh	r1, [r0, #12]
 8005ca6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ca8:	81c2      	strh	r2, [r0, #14]
 8005caa:	6183      	str	r3, [r0, #24]
 8005cac:	4619      	mov	r1, r3
 8005cae:	2208      	movs	r2, #8
 8005cb0:	305c      	adds	r0, #92	@ 0x5c
 8005cb2:	f000 f906 	bl	8005ec2 <memset>
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cec <std+0x58>)
 8005cb8:	6224      	str	r4, [r4, #32]
 8005cba:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <std+0x5c>)
 8005cbe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf4 <std+0x60>)
 8005cc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf8 <std+0x64>)
 8005cc6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <std+0x68>)
 8005cca:	429c      	cmp	r4, r3
 8005ccc:	d006      	beq.n	8005cdc <std+0x48>
 8005cce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cd2:	4294      	cmp	r4, r2
 8005cd4:	d002      	beq.n	8005cdc <std+0x48>
 8005cd6:	33d0      	adds	r3, #208	@ 0xd0
 8005cd8:	429c      	cmp	r4, r3
 8005cda:	d105      	bne.n	8005ce8 <std+0x54>
 8005cdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce4:	f000 b966 	b.w	8005fb4 <__retarget_lock_init_recursive>
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	bf00      	nop
 8005cec:	08005e3d 	.word	0x08005e3d
 8005cf0:	08005e5f 	.word	0x08005e5f
 8005cf4:	08005e97 	.word	0x08005e97
 8005cf8:	08005ebb 	.word	0x08005ebb
 8005cfc:	2000025c 	.word	0x2000025c

08005d00 <stdio_exit_handler>:
 8005d00:	4a02      	ldr	r2, [pc, #8]	@ (8005d0c <stdio_exit_handler+0xc>)
 8005d02:	4903      	ldr	r1, [pc, #12]	@ (8005d10 <stdio_exit_handler+0x10>)
 8005d04:	4803      	ldr	r0, [pc, #12]	@ (8005d14 <stdio_exit_handler+0x14>)
 8005d06:	f000 b869 	b.w	8005ddc <_fwalk_sglue>
 8005d0a:	bf00      	nop
 8005d0c:	20000018 	.word	0x20000018
 8005d10:	08006849 	.word	0x08006849
 8005d14:	20000028 	.word	0x20000028

08005d18 <cleanup_stdio>:
 8005d18:	6841      	ldr	r1, [r0, #4]
 8005d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d4c <cleanup_stdio+0x34>)
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	4299      	cmp	r1, r3
 8005d20:	4604      	mov	r4, r0
 8005d22:	d001      	beq.n	8005d28 <cleanup_stdio+0x10>
 8005d24:	f000 fd90 	bl	8006848 <_fflush_r>
 8005d28:	68a1      	ldr	r1, [r4, #8]
 8005d2a:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <cleanup_stdio+0x38>)
 8005d2c:	4299      	cmp	r1, r3
 8005d2e:	d002      	beq.n	8005d36 <cleanup_stdio+0x1e>
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fd89 	bl	8006848 <_fflush_r>
 8005d36:	68e1      	ldr	r1, [r4, #12]
 8005d38:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <cleanup_stdio+0x3c>)
 8005d3a:	4299      	cmp	r1, r3
 8005d3c:	d004      	beq.n	8005d48 <cleanup_stdio+0x30>
 8005d3e:	4620      	mov	r0, r4
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f000 bd80 	b.w	8006848 <_fflush_r>
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	2000025c 	.word	0x2000025c
 8005d50:	200002c4 	.word	0x200002c4
 8005d54:	2000032c 	.word	0x2000032c

08005d58 <global_stdio_init.part.0>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d88 <global_stdio_init.part.0+0x30>)
 8005d5c:	4c0b      	ldr	r4, [pc, #44]	@ (8005d8c <global_stdio_init.part.0+0x34>)
 8005d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005d90 <global_stdio_init.part.0+0x38>)
 8005d60:	4620      	mov	r0, r4
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	2104      	movs	r1, #4
 8005d66:	2200      	movs	r2, #0
 8005d68:	f7ff ff94 	bl	8005c94 <std>
 8005d6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d70:	2201      	movs	r2, #1
 8005d72:	2109      	movs	r1, #9
 8005d74:	f7ff ff8e 	bl	8005c94 <std>
 8005d78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d82:	2112      	movs	r1, #18
 8005d84:	f7ff bf86 	b.w	8005c94 <std>
 8005d88:	20000394 	.word	0x20000394
 8005d8c:	2000025c 	.word	0x2000025c
 8005d90:	08005d01 	.word	0x08005d01

08005d94 <__sfp_lock_acquire>:
 8005d94:	4801      	ldr	r0, [pc, #4]	@ (8005d9c <__sfp_lock_acquire+0x8>)
 8005d96:	f000 b90e 	b.w	8005fb6 <__retarget_lock_acquire_recursive>
 8005d9a:	bf00      	nop
 8005d9c:	2000039d 	.word	0x2000039d

08005da0 <__sfp_lock_release>:
 8005da0:	4801      	ldr	r0, [pc, #4]	@ (8005da8 <__sfp_lock_release+0x8>)
 8005da2:	f000 b909 	b.w	8005fb8 <__retarget_lock_release_recursive>
 8005da6:	bf00      	nop
 8005da8:	2000039d 	.word	0x2000039d

08005dac <__sinit>:
 8005dac:	b510      	push	{r4, lr}
 8005dae:	4604      	mov	r4, r0
 8005db0:	f7ff fff0 	bl	8005d94 <__sfp_lock_acquire>
 8005db4:	6a23      	ldr	r3, [r4, #32]
 8005db6:	b11b      	cbz	r3, 8005dc0 <__sinit+0x14>
 8005db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dbc:	f7ff bff0 	b.w	8005da0 <__sfp_lock_release>
 8005dc0:	4b04      	ldr	r3, [pc, #16]	@ (8005dd4 <__sinit+0x28>)
 8005dc2:	6223      	str	r3, [r4, #32]
 8005dc4:	4b04      	ldr	r3, [pc, #16]	@ (8005dd8 <__sinit+0x2c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1f5      	bne.n	8005db8 <__sinit+0xc>
 8005dcc:	f7ff ffc4 	bl	8005d58 <global_stdio_init.part.0>
 8005dd0:	e7f2      	b.n	8005db8 <__sinit+0xc>
 8005dd2:	bf00      	nop
 8005dd4:	08005d19 	.word	0x08005d19
 8005dd8:	20000394 	.word	0x20000394

08005ddc <_fwalk_sglue>:
 8005ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de0:	4607      	mov	r7, r0
 8005de2:	4688      	mov	r8, r1
 8005de4:	4614      	mov	r4, r2
 8005de6:	2600      	movs	r6, #0
 8005de8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005dec:	f1b9 0901 	subs.w	r9, r9, #1
 8005df0:	d505      	bpl.n	8005dfe <_fwalk_sglue+0x22>
 8005df2:	6824      	ldr	r4, [r4, #0]
 8005df4:	2c00      	cmp	r4, #0
 8005df6:	d1f7      	bne.n	8005de8 <_fwalk_sglue+0xc>
 8005df8:	4630      	mov	r0, r6
 8005dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dfe:	89ab      	ldrh	r3, [r5, #12]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d907      	bls.n	8005e14 <_fwalk_sglue+0x38>
 8005e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	d003      	beq.n	8005e14 <_fwalk_sglue+0x38>
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4638      	mov	r0, r7
 8005e10:	47c0      	blx	r8
 8005e12:	4306      	orrs	r6, r0
 8005e14:	3568      	adds	r5, #104	@ 0x68
 8005e16:	e7e9      	b.n	8005dec <_fwalk_sglue+0x10>

08005e18 <iprintf>:
 8005e18:	b40f      	push	{r0, r1, r2, r3}
 8005e1a:	b507      	push	{r0, r1, r2, lr}
 8005e1c:	4906      	ldr	r1, [pc, #24]	@ (8005e38 <iprintf+0x20>)
 8005e1e:	ab04      	add	r3, sp, #16
 8005e20:	6808      	ldr	r0, [r1, #0]
 8005e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e26:	6881      	ldr	r1, [r0, #8]
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	f000 f9e5 	bl	80061f8 <_vfiprintf_r>
 8005e2e:	b003      	add	sp, #12
 8005e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e34:	b004      	add	sp, #16
 8005e36:	4770      	bx	lr
 8005e38:	20000024 	.word	0x20000024

08005e3c <__sread>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	460c      	mov	r4, r1
 8005e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e44:	f000 f868 	bl	8005f18 <_read_r>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	bfab      	itete	ge
 8005e4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e50:	181b      	addge	r3, r3, r0
 8005e52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e56:	bfac      	ite	ge
 8005e58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e5a:	81a3      	strhlt	r3, [r4, #12]
 8005e5c:	bd10      	pop	{r4, pc}

08005e5e <__swrite>:
 8005e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e62:	461f      	mov	r7, r3
 8005e64:	898b      	ldrh	r3, [r1, #12]
 8005e66:	4605      	mov	r5, r0
 8005e68:	05db      	lsls	r3, r3, #23
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	4616      	mov	r6, r2
 8005e6e:	d505      	bpl.n	8005e7c <__swrite+0x1e>
 8005e70:	2302      	movs	r3, #2
 8005e72:	2200      	movs	r2, #0
 8005e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e78:	f000 f83c 	bl	8005ef4 <_lseek_r>
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	4632      	mov	r2, r6
 8005e80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e84:	81a3      	strh	r3, [r4, #12]
 8005e86:	4628      	mov	r0, r5
 8005e88:	463b      	mov	r3, r7
 8005e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e92:	f000 b853 	b.w	8005f3c <_write_r>

08005e96 <__sseek>:
 8005e96:	b510      	push	{r4, lr}
 8005e98:	460c      	mov	r4, r1
 8005e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9e:	f000 f829 	bl	8005ef4 <_lseek_r>
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	bf15      	itete	ne
 8005ea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005eaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005eae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005eb2:	81a3      	strheq	r3, [r4, #12]
 8005eb4:	bf18      	it	ne
 8005eb6:	81a3      	strhne	r3, [r4, #12]
 8005eb8:	bd10      	pop	{r4, pc}

08005eba <__sclose>:
 8005eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebe:	f000 b809 	b.w	8005ed4 <_close_r>

08005ec2 <memset>:
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4402      	add	r2, r0
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d100      	bne.n	8005ecc <memset+0xa>
 8005eca:	4770      	bx	lr
 8005ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed0:	e7f9      	b.n	8005ec6 <memset+0x4>
	...

08005ed4 <_close_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	4d05      	ldr	r5, [pc, #20]	@ (8005ef0 <_close_r+0x1c>)
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	602b      	str	r3, [r5, #0]
 8005ee0:	f7fb fad1 	bl	8001486 <_close>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_close_r+0x1a>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_close_r+0x1a>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	20000398 	.word	0x20000398

08005ef4 <_lseek_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	2200      	movs	r2, #0
 8005efe:	4d05      	ldr	r5, [pc, #20]	@ (8005f14 <_lseek_r+0x20>)
 8005f00:	602a      	str	r2, [r5, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	f7fb fae3 	bl	80014ce <_lseek>
 8005f08:	1c43      	adds	r3, r0, #1
 8005f0a:	d102      	bne.n	8005f12 <_lseek_r+0x1e>
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	b103      	cbz	r3, 8005f12 <_lseek_r+0x1e>
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	bd38      	pop	{r3, r4, r5, pc}
 8005f14:	20000398 	.word	0x20000398

08005f18 <_read_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	2200      	movs	r2, #0
 8005f22:	4d05      	ldr	r5, [pc, #20]	@ (8005f38 <_read_r+0x20>)
 8005f24:	602a      	str	r2, [r5, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7fb fa74 	bl	8001414 <_read>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_read_r+0x1e>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_read_r+0x1e>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	20000398 	.word	0x20000398

08005f3c <_write_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	2200      	movs	r2, #0
 8005f46:	4d05      	ldr	r5, [pc, #20]	@ (8005f5c <_write_r+0x20>)
 8005f48:	602a      	str	r2, [r5, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f7fb fa7f 	bl	800144e <_write>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_write_r+0x1e>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_write_r+0x1e>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	20000398 	.word	0x20000398

08005f60 <__errno>:
 8005f60:	4b01      	ldr	r3, [pc, #4]	@ (8005f68 <__errno+0x8>)
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000024 	.word	0x20000024

08005f6c <__libc_init_array>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	2600      	movs	r6, #0
 8005f70:	4d0c      	ldr	r5, [pc, #48]	@ (8005fa4 <__libc_init_array+0x38>)
 8005f72:	4c0d      	ldr	r4, [pc, #52]	@ (8005fa8 <__libc_init_array+0x3c>)
 8005f74:	1b64      	subs	r4, r4, r5
 8005f76:	10a4      	asrs	r4, r4, #2
 8005f78:	42a6      	cmp	r6, r4
 8005f7a:	d109      	bne.n	8005f90 <__libc_init_array+0x24>
 8005f7c:	f000 fdc2 	bl	8006b04 <_init>
 8005f80:	2600      	movs	r6, #0
 8005f82:	4d0a      	ldr	r5, [pc, #40]	@ (8005fac <__libc_init_array+0x40>)
 8005f84:	4c0a      	ldr	r4, [pc, #40]	@ (8005fb0 <__libc_init_array+0x44>)
 8005f86:	1b64      	subs	r4, r4, r5
 8005f88:	10a4      	asrs	r4, r4, #2
 8005f8a:	42a6      	cmp	r6, r4
 8005f8c:	d105      	bne.n	8005f9a <__libc_init_array+0x2e>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f94:	4798      	blx	r3
 8005f96:	3601      	adds	r6, #1
 8005f98:	e7ee      	b.n	8005f78 <__libc_init_array+0xc>
 8005f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9e:	4798      	blx	r3
 8005fa0:	3601      	adds	r6, #1
 8005fa2:	e7f2      	b.n	8005f8a <__libc_init_array+0x1e>
 8005fa4:	08006c20 	.word	0x08006c20
 8005fa8:	08006c20 	.word	0x08006c20
 8005fac:	08006c20 	.word	0x08006c20
 8005fb0:	08006c24 	.word	0x08006c24

08005fb4 <__retarget_lock_init_recursive>:
 8005fb4:	4770      	bx	lr

08005fb6 <__retarget_lock_acquire_recursive>:
 8005fb6:	4770      	bx	lr

08005fb8 <__retarget_lock_release_recursive>:
 8005fb8:	4770      	bx	lr
	...

08005fbc <_free_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	d040      	beq.n	8006046 <_free_r+0x8a>
 8005fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc8:	1f0c      	subs	r4, r1, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bfb8      	it	lt
 8005fce:	18e4      	addlt	r4, r4, r3
 8005fd0:	f000 f8de 	bl	8006190 <__malloc_lock>
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8006048 <_free_r+0x8c>)
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	b933      	cbnz	r3, 8005fe8 <_free_r+0x2c>
 8005fda:	6063      	str	r3, [r4, #4]
 8005fdc:	6014      	str	r4, [r2, #0]
 8005fde:	4628      	mov	r0, r5
 8005fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe4:	f000 b8da 	b.w	800619c <__malloc_unlock>
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	d908      	bls.n	8005ffe <_free_r+0x42>
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	1821      	adds	r1, r4, r0
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf01      	itttt	eq
 8005ff4:	6819      	ldreq	r1, [r3, #0]
 8005ff6:	685b      	ldreq	r3, [r3, #4]
 8005ff8:	1809      	addeq	r1, r1, r0
 8005ffa:	6021      	streq	r1, [r4, #0]
 8005ffc:	e7ed      	b.n	8005fda <_free_r+0x1e>
 8005ffe:	461a      	mov	r2, r3
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	b10b      	cbz	r3, 8006008 <_free_r+0x4c>
 8006004:	42a3      	cmp	r3, r4
 8006006:	d9fa      	bls.n	8005ffe <_free_r+0x42>
 8006008:	6811      	ldr	r1, [r2, #0]
 800600a:	1850      	adds	r0, r2, r1
 800600c:	42a0      	cmp	r0, r4
 800600e:	d10b      	bne.n	8006028 <_free_r+0x6c>
 8006010:	6820      	ldr	r0, [r4, #0]
 8006012:	4401      	add	r1, r0
 8006014:	1850      	adds	r0, r2, r1
 8006016:	4283      	cmp	r3, r0
 8006018:	6011      	str	r1, [r2, #0]
 800601a:	d1e0      	bne.n	8005fde <_free_r+0x22>
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4408      	add	r0, r1
 8006022:	6010      	str	r0, [r2, #0]
 8006024:	6053      	str	r3, [r2, #4]
 8006026:	e7da      	b.n	8005fde <_free_r+0x22>
 8006028:	d902      	bls.n	8006030 <_free_r+0x74>
 800602a:	230c      	movs	r3, #12
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	e7d6      	b.n	8005fde <_free_r+0x22>
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	1821      	adds	r1, r4, r0
 8006034:	428b      	cmp	r3, r1
 8006036:	bf01      	itttt	eq
 8006038:	6819      	ldreq	r1, [r3, #0]
 800603a:	685b      	ldreq	r3, [r3, #4]
 800603c:	1809      	addeq	r1, r1, r0
 800603e:	6021      	streq	r1, [r4, #0]
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	6054      	str	r4, [r2, #4]
 8006044:	e7cb      	b.n	8005fde <_free_r+0x22>
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	200003a4 	.word	0x200003a4

0800604c <sbrk_aligned>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4e0f      	ldr	r6, [pc, #60]	@ (800608c <sbrk_aligned+0x40>)
 8006050:	460c      	mov	r4, r1
 8006052:	6831      	ldr	r1, [r6, #0]
 8006054:	4605      	mov	r5, r0
 8006056:	b911      	cbnz	r1, 800605e <sbrk_aligned+0x12>
 8006058:	f000 fcb2 	bl	80069c0 <_sbrk_r>
 800605c:	6030      	str	r0, [r6, #0]
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f000 fcad 	bl	80069c0 <_sbrk_r>
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	d103      	bne.n	8006072 <sbrk_aligned+0x26>
 800606a:	f04f 34ff 	mov.w	r4, #4294967295
 800606e:	4620      	mov	r0, r4
 8006070:	bd70      	pop	{r4, r5, r6, pc}
 8006072:	1cc4      	adds	r4, r0, #3
 8006074:	f024 0403 	bic.w	r4, r4, #3
 8006078:	42a0      	cmp	r0, r4
 800607a:	d0f8      	beq.n	800606e <sbrk_aligned+0x22>
 800607c:	1a21      	subs	r1, r4, r0
 800607e:	4628      	mov	r0, r5
 8006080:	f000 fc9e 	bl	80069c0 <_sbrk_r>
 8006084:	3001      	adds	r0, #1
 8006086:	d1f2      	bne.n	800606e <sbrk_aligned+0x22>
 8006088:	e7ef      	b.n	800606a <sbrk_aligned+0x1e>
 800608a:	bf00      	nop
 800608c:	200003a0 	.word	0x200003a0

08006090 <_malloc_r>:
 8006090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006094:	1ccd      	adds	r5, r1, #3
 8006096:	f025 0503 	bic.w	r5, r5, #3
 800609a:	3508      	adds	r5, #8
 800609c:	2d0c      	cmp	r5, #12
 800609e:	bf38      	it	cc
 80060a0:	250c      	movcc	r5, #12
 80060a2:	2d00      	cmp	r5, #0
 80060a4:	4606      	mov	r6, r0
 80060a6:	db01      	blt.n	80060ac <_malloc_r+0x1c>
 80060a8:	42a9      	cmp	r1, r5
 80060aa:	d904      	bls.n	80060b6 <_malloc_r+0x26>
 80060ac:	230c      	movs	r3, #12
 80060ae:	6033      	str	r3, [r6, #0]
 80060b0:	2000      	movs	r0, #0
 80060b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800618c <_malloc_r+0xfc>
 80060ba:	f000 f869 	bl	8006190 <__malloc_lock>
 80060be:	f8d8 3000 	ldr.w	r3, [r8]
 80060c2:	461c      	mov	r4, r3
 80060c4:	bb44      	cbnz	r4, 8006118 <_malloc_r+0x88>
 80060c6:	4629      	mov	r1, r5
 80060c8:	4630      	mov	r0, r6
 80060ca:	f7ff ffbf 	bl	800604c <sbrk_aligned>
 80060ce:	1c43      	adds	r3, r0, #1
 80060d0:	4604      	mov	r4, r0
 80060d2:	d158      	bne.n	8006186 <_malloc_r+0xf6>
 80060d4:	f8d8 4000 	ldr.w	r4, [r8]
 80060d8:	4627      	mov	r7, r4
 80060da:	2f00      	cmp	r7, #0
 80060dc:	d143      	bne.n	8006166 <_malloc_r+0xd6>
 80060de:	2c00      	cmp	r4, #0
 80060e0:	d04b      	beq.n	800617a <_malloc_r+0xea>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	4639      	mov	r1, r7
 80060e6:	4630      	mov	r0, r6
 80060e8:	eb04 0903 	add.w	r9, r4, r3
 80060ec:	f000 fc68 	bl	80069c0 <_sbrk_r>
 80060f0:	4581      	cmp	r9, r0
 80060f2:	d142      	bne.n	800617a <_malloc_r+0xea>
 80060f4:	6821      	ldr	r1, [r4, #0]
 80060f6:	4630      	mov	r0, r6
 80060f8:	1a6d      	subs	r5, r5, r1
 80060fa:	4629      	mov	r1, r5
 80060fc:	f7ff ffa6 	bl	800604c <sbrk_aligned>
 8006100:	3001      	adds	r0, #1
 8006102:	d03a      	beq.n	800617a <_malloc_r+0xea>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	442b      	add	r3, r5
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	f8d8 3000 	ldr.w	r3, [r8]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	bb62      	cbnz	r2, 800616c <_malloc_r+0xdc>
 8006112:	f8c8 7000 	str.w	r7, [r8]
 8006116:	e00f      	b.n	8006138 <_malloc_r+0xa8>
 8006118:	6822      	ldr	r2, [r4, #0]
 800611a:	1b52      	subs	r2, r2, r5
 800611c:	d420      	bmi.n	8006160 <_malloc_r+0xd0>
 800611e:	2a0b      	cmp	r2, #11
 8006120:	d917      	bls.n	8006152 <_malloc_r+0xc2>
 8006122:	1961      	adds	r1, r4, r5
 8006124:	42a3      	cmp	r3, r4
 8006126:	6025      	str	r5, [r4, #0]
 8006128:	bf18      	it	ne
 800612a:	6059      	strne	r1, [r3, #4]
 800612c:	6863      	ldr	r3, [r4, #4]
 800612e:	bf08      	it	eq
 8006130:	f8c8 1000 	streq.w	r1, [r8]
 8006134:	5162      	str	r2, [r4, r5]
 8006136:	604b      	str	r3, [r1, #4]
 8006138:	4630      	mov	r0, r6
 800613a:	f000 f82f 	bl	800619c <__malloc_unlock>
 800613e:	f104 000b 	add.w	r0, r4, #11
 8006142:	1d23      	adds	r3, r4, #4
 8006144:	f020 0007 	bic.w	r0, r0, #7
 8006148:	1ac2      	subs	r2, r0, r3
 800614a:	bf1c      	itt	ne
 800614c:	1a1b      	subne	r3, r3, r0
 800614e:	50a3      	strne	r3, [r4, r2]
 8006150:	e7af      	b.n	80060b2 <_malloc_r+0x22>
 8006152:	6862      	ldr	r2, [r4, #4]
 8006154:	42a3      	cmp	r3, r4
 8006156:	bf0c      	ite	eq
 8006158:	f8c8 2000 	streq.w	r2, [r8]
 800615c:	605a      	strne	r2, [r3, #4]
 800615e:	e7eb      	b.n	8006138 <_malloc_r+0xa8>
 8006160:	4623      	mov	r3, r4
 8006162:	6864      	ldr	r4, [r4, #4]
 8006164:	e7ae      	b.n	80060c4 <_malloc_r+0x34>
 8006166:	463c      	mov	r4, r7
 8006168:	687f      	ldr	r7, [r7, #4]
 800616a:	e7b6      	b.n	80060da <_malloc_r+0x4a>
 800616c:	461a      	mov	r2, r3
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	42a3      	cmp	r3, r4
 8006172:	d1fb      	bne.n	800616c <_malloc_r+0xdc>
 8006174:	2300      	movs	r3, #0
 8006176:	6053      	str	r3, [r2, #4]
 8006178:	e7de      	b.n	8006138 <_malloc_r+0xa8>
 800617a:	230c      	movs	r3, #12
 800617c:	4630      	mov	r0, r6
 800617e:	6033      	str	r3, [r6, #0]
 8006180:	f000 f80c 	bl	800619c <__malloc_unlock>
 8006184:	e794      	b.n	80060b0 <_malloc_r+0x20>
 8006186:	6005      	str	r5, [r0, #0]
 8006188:	e7d6      	b.n	8006138 <_malloc_r+0xa8>
 800618a:	bf00      	nop
 800618c:	200003a4 	.word	0x200003a4

08006190 <__malloc_lock>:
 8006190:	4801      	ldr	r0, [pc, #4]	@ (8006198 <__malloc_lock+0x8>)
 8006192:	f7ff bf10 	b.w	8005fb6 <__retarget_lock_acquire_recursive>
 8006196:	bf00      	nop
 8006198:	2000039c 	.word	0x2000039c

0800619c <__malloc_unlock>:
 800619c:	4801      	ldr	r0, [pc, #4]	@ (80061a4 <__malloc_unlock+0x8>)
 800619e:	f7ff bf0b 	b.w	8005fb8 <__retarget_lock_release_recursive>
 80061a2:	bf00      	nop
 80061a4:	2000039c 	.word	0x2000039c

080061a8 <__sfputc_r>:
 80061a8:	6893      	ldr	r3, [r2, #8]
 80061aa:	b410      	push	{r4}
 80061ac:	3b01      	subs	r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	6093      	str	r3, [r2, #8]
 80061b2:	da07      	bge.n	80061c4 <__sfputc_r+0x1c>
 80061b4:	6994      	ldr	r4, [r2, #24]
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	db01      	blt.n	80061be <__sfputc_r+0x16>
 80061ba:	290a      	cmp	r1, #10
 80061bc:	d102      	bne.n	80061c4 <__sfputc_r+0x1c>
 80061be:	bc10      	pop	{r4}
 80061c0:	f000 bb6a 	b.w	8006898 <__swbuf_r>
 80061c4:	6813      	ldr	r3, [r2, #0]
 80061c6:	1c58      	adds	r0, r3, #1
 80061c8:	6010      	str	r0, [r2, #0]
 80061ca:	7019      	strb	r1, [r3, #0]
 80061cc:	4608      	mov	r0, r1
 80061ce:	bc10      	pop	{r4}
 80061d0:	4770      	bx	lr

080061d2 <__sfputs_r>:
 80061d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d4:	4606      	mov	r6, r0
 80061d6:	460f      	mov	r7, r1
 80061d8:	4614      	mov	r4, r2
 80061da:	18d5      	adds	r5, r2, r3
 80061dc:	42ac      	cmp	r4, r5
 80061de:	d101      	bne.n	80061e4 <__sfputs_r+0x12>
 80061e0:	2000      	movs	r0, #0
 80061e2:	e007      	b.n	80061f4 <__sfputs_r+0x22>
 80061e4:	463a      	mov	r2, r7
 80061e6:	4630      	mov	r0, r6
 80061e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ec:	f7ff ffdc 	bl	80061a8 <__sfputc_r>
 80061f0:	1c43      	adds	r3, r0, #1
 80061f2:	d1f3      	bne.n	80061dc <__sfputs_r+0xa>
 80061f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061f8 <_vfiprintf_r>:
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	460d      	mov	r5, r1
 80061fe:	4614      	mov	r4, r2
 8006200:	4698      	mov	r8, r3
 8006202:	4606      	mov	r6, r0
 8006204:	b09d      	sub	sp, #116	@ 0x74
 8006206:	b118      	cbz	r0, 8006210 <_vfiprintf_r+0x18>
 8006208:	6a03      	ldr	r3, [r0, #32]
 800620a:	b90b      	cbnz	r3, 8006210 <_vfiprintf_r+0x18>
 800620c:	f7ff fdce 	bl	8005dac <__sinit>
 8006210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006212:	07d9      	lsls	r1, r3, #31
 8006214:	d405      	bmi.n	8006222 <_vfiprintf_r+0x2a>
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	059a      	lsls	r2, r3, #22
 800621a:	d402      	bmi.n	8006222 <_vfiprintf_r+0x2a>
 800621c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800621e:	f7ff feca 	bl	8005fb6 <__retarget_lock_acquire_recursive>
 8006222:	89ab      	ldrh	r3, [r5, #12]
 8006224:	071b      	lsls	r3, r3, #28
 8006226:	d501      	bpl.n	800622c <_vfiprintf_r+0x34>
 8006228:	692b      	ldr	r3, [r5, #16]
 800622a:	b99b      	cbnz	r3, 8006254 <_vfiprintf_r+0x5c>
 800622c:	4629      	mov	r1, r5
 800622e:	4630      	mov	r0, r6
 8006230:	f000 fb70 	bl	8006914 <__swsetup_r>
 8006234:	b170      	cbz	r0, 8006254 <_vfiprintf_r+0x5c>
 8006236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006238:	07dc      	lsls	r4, r3, #31
 800623a:	d504      	bpl.n	8006246 <_vfiprintf_r+0x4e>
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	b01d      	add	sp, #116	@ 0x74
 8006242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006246:	89ab      	ldrh	r3, [r5, #12]
 8006248:	0598      	lsls	r0, r3, #22
 800624a:	d4f7      	bmi.n	800623c <_vfiprintf_r+0x44>
 800624c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800624e:	f7ff feb3 	bl	8005fb8 <__retarget_lock_release_recursive>
 8006252:	e7f3      	b.n	800623c <_vfiprintf_r+0x44>
 8006254:	2300      	movs	r3, #0
 8006256:	9309      	str	r3, [sp, #36]	@ 0x24
 8006258:	2320      	movs	r3, #32
 800625a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800625e:	2330      	movs	r3, #48	@ 0x30
 8006260:	f04f 0901 	mov.w	r9, #1
 8006264:	f8cd 800c 	str.w	r8, [sp, #12]
 8006268:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006414 <_vfiprintf_r+0x21c>
 800626c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006270:	4623      	mov	r3, r4
 8006272:	469a      	mov	sl, r3
 8006274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006278:	b10a      	cbz	r2, 800627e <_vfiprintf_r+0x86>
 800627a:	2a25      	cmp	r2, #37	@ 0x25
 800627c:	d1f9      	bne.n	8006272 <_vfiprintf_r+0x7a>
 800627e:	ebba 0b04 	subs.w	fp, sl, r4
 8006282:	d00b      	beq.n	800629c <_vfiprintf_r+0xa4>
 8006284:	465b      	mov	r3, fp
 8006286:	4622      	mov	r2, r4
 8006288:	4629      	mov	r1, r5
 800628a:	4630      	mov	r0, r6
 800628c:	f7ff ffa1 	bl	80061d2 <__sfputs_r>
 8006290:	3001      	adds	r0, #1
 8006292:	f000 80a7 	beq.w	80063e4 <_vfiprintf_r+0x1ec>
 8006296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006298:	445a      	add	r2, fp
 800629a:	9209      	str	r2, [sp, #36]	@ 0x24
 800629c:	f89a 3000 	ldrb.w	r3, [sl]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 809f 	beq.w	80063e4 <_vfiprintf_r+0x1ec>
 80062a6:	2300      	movs	r3, #0
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062b0:	f10a 0a01 	add.w	sl, sl, #1
 80062b4:	9304      	str	r3, [sp, #16]
 80062b6:	9307      	str	r3, [sp, #28]
 80062b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80062be:	4654      	mov	r4, sl
 80062c0:	2205      	movs	r2, #5
 80062c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c6:	4853      	ldr	r0, [pc, #332]	@ (8006414 <_vfiprintf_r+0x21c>)
 80062c8:	f000 fb8a 	bl	80069e0 <memchr>
 80062cc:	9a04      	ldr	r2, [sp, #16]
 80062ce:	b9d8      	cbnz	r0, 8006308 <_vfiprintf_r+0x110>
 80062d0:	06d1      	lsls	r1, r2, #27
 80062d2:	bf44      	itt	mi
 80062d4:	2320      	movmi	r3, #32
 80062d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062da:	0713      	lsls	r3, r2, #28
 80062dc:	bf44      	itt	mi
 80062de:	232b      	movmi	r3, #43	@ 0x2b
 80062e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062e4:	f89a 3000 	ldrb.w	r3, [sl]
 80062e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80062ea:	d015      	beq.n	8006318 <_vfiprintf_r+0x120>
 80062ec:	4654      	mov	r4, sl
 80062ee:	2000      	movs	r0, #0
 80062f0:	f04f 0c0a 	mov.w	ip, #10
 80062f4:	9a07      	ldr	r2, [sp, #28]
 80062f6:	4621      	mov	r1, r4
 80062f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062fc:	3b30      	subs	r3, #48	@ 0x30
 80062fe:	2b09      	cmp	r3, #9
 8006300:	d94b      	bls.n	800639a <_vfiprintf_r+0x1a2>
 8006302:	b1b0      	cbz	r0, 8006332 <_vfiprintf_r+0x13a>
 8006304:	9207      	str	r2, [sp, #28]
 8006306:	e014      	b.n	8006332 <_vfiprintf_r+0x13a>
 8006308:	eba0 0308 	sub.w	r3, r0, r8
 800630c:	fa09 f303 	lsl.w	r3, r9, r3
 8006310:	4313      	orrs	r3, r2
 8006312:	46a2      	mov	sl, r4
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	e7d2      	b.n	80062be <_vfiprintf_r+0xc6>
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	1d19      	adds	r1, r3, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	9103      	str	r1, [sp, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	bfbb      	ittet	lt
 8006324:	425b      	neglt	r3, r3
 8006326:	f042 0202 	orrlt.w	r2, r2, #2
 800632a:	9307      	strge	r3, [sp, #28]
 800632c:	9307      	strlt	r3, [sp, #28]
 800632e:	bfb8      	it	lt
 8006330:	9204      	strlt	r2, [sp, #16]
 8006332:	7823      	ldrb	r3, [r4, #0]
 8006334:	2b2e      	cmp	r3, #46	@ 0x2e
 8006336:	d10a      	bne.n	800634e <_vfiprintf_r+0x156>
 8006338:	7863      	ldrb	r3, [r4, #1]
 800633a:	2b2a      	cmp	r3, #42	@ 0x2a
 800633c:	d132      	bne.n	80063a4 <_vfiprintf_r+0x1ac>
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	3402      	adds	r4, #2
 8006342:	1d1a      	adds	r2, r3, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	9203      	str	r2, [sp, #12]
 8006348:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800634c:	9305      	str	r3, [sp, #20]
 800634e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006418 <_vfiprintf_r+0x220>
 8006352:	2203      	movs	r2, #3
 8006354:	4650      	mov	r0, sl
 8006356:	7821      	ldrb	r1, [r4, #0]
 8006358:	f000 fb42 	bl	80069e0 <memchr>
 800635c:	b138      	cbz	r0, 800636e <_vfiprintf_r+0x176>
 800635e:	2240      	movs	r2, #64	@ 0x40
 8006360:	9b04      	ldr	r3, [sp, #16]
 8006362:	eba0 000a 	sub.w	r0, r0, sl
 8006366:	4082      	lsls	r2, r0
 8006368:	4313      	orrs	r3, r2
 800636a:	3401      	adds	r4, #1
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006372:	2206      	movs	r2, #6
 8006374:	4829      	ldr	r0, [pc, #164]	@ (800641c <_vfiprintf_r+0x224>)
 8006376:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800637a:	f000 fb31 	bl	80069e0 <memchr>
 800637e:	2800      	cmp	r0, #0
 8006380:	d03f      	beq.n	8006402 <_vfiprintf_r+0x20a>
 8006382:	4b27      	ldr	r3, [pc, #156]	@ (8006420 <_vfiprintf_r+0x228>)
 8006384:	bb1b      	cbnz	r3, 80063ce <_vfiprintf_r+0x1d6>
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	3307      	adds	r3, #7
 800638a:	f023 0307 	bic.w	r3, r3, #7
 800638e:	3308      	adds	r3, #8
 8006390:	9303      	str	r3, [sp, #12]
 8006392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006394:	443b      	add	r3, r7
 8006396:	9309      	str	r3, [sp, #36]	@ 0x24
 8006398:	e76a      	b.n	8006270 <_vfiprintf_r+0x78>
 800639a:	460c      	mov	r4, r1
 800639c:	2001      	movs	r0, #1
 800639e:	fb0c 3202 	mla	r2, ip, r2, r3
 80063a2:	e7a8      	b.n	80062f6 <_vfiprintf_r+0xfe>
 80063a4:	2300      	movs	r3, #0
 80063a6:	f04f 0c0a 	mov.w	ip, #10
 80063aa:	4619      	mov	r1, r3
 80063ac:	3401      	adds	r4, #1
 80063ae:	9305      	str	r3, [sp, #20]
 80063b0:	4620      	mov	r0, r4
 80063b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b6:	3a30      	subs	r2, #48	@ 0x30
 80063b8:	2a09      	cmp	r2, #9
 80063ba:	d903      	bls.n	80063c4 <_vfiprintf_r+0x1cc>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0c6      	beq.n	800634e <_vfiprintf_r+0x156>
 80063c0:	9105      	str	r1, [sp, #20]
 80063c2:	e7c4      	b.n	800634e <_vfiprintf_r+0x156>
 80063c4:	4604      	mov	r4, r0
 80063c6:	2301      	movs	r3, #1
 80063c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80063cc:	e7f0      	b.n	80063b0 <_vfiprintf_r+0x1b8>
 80063ce:	ab03      	add	r3, sp, #12
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	462a      	mov	r2, r5
 80063d4:	4630      	mov	r0, r6
 80063d6:	4b13      	ldr	r3, [pc, #76]	@ (8006424 <_vfiprintf_r+0x22c>)
 80063d8:	a904      	add	r1, sp, #16
 80063da:	f3af 8000 	nop.w
 80063de:	4607      	mov	r7, r0
 80063e0:	1c78      	adds	r0, r7, #1
 80063e2:	d1d6      	bne.n	8006392 <_vfiprintf_r+0x19a>
 80063e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063e6:	07d9      	lsls	r1, r3, #31
 80063e8:	d405      	bmi.n	80063f6 <_vfiprintf_r+0x1fe>
 80063ea:	89ab      	ldrh	r3, [r5, #12]
 80063ec:	059a      	lsls	r2, r3, #22
 80063ee:	d402      	bmi.n	80063f6 <_vfiprintf_r+0x1fe>
 80063f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063f2:	f7ff fde1 	bl	8005fb8 <__retarget_lock_release_recursive>
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	065b      	lsls	r3, r3, #25
 80063fa:	f53f af1f 	bmi.w	800623c <_vfiprintf_r+0x44>
 80063fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006400:	e71e      	b.n	8006240 <_vfiprintf_r+0x48>
 8006402:	ab03      	add	r3, sp, #12
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	462a      	mov	r2, r5
 8006408:	4630      	mov	r0, r6
 800640a:	4b06      	ldr	r3, [pc, #24]	@ (8006424 <_vfiprintf_r+0x22c>)
 800640c:	a904      	add	r1, sp, #16
 800640e:	f000 f87d 	bl	800650c <_printf_i>
 8006412:	e7e4      	b.n	80063de <_vfiprintf_r+0x1e6>
 8006414:	08006bea 	.word	0x08006bea
 8006418:	08006bf0 	.word	0x08006bf0
 800641c:	08006bf4 	.word	0x08006bf4
 8006420:	00000000 	.word	0x00000000
 8006424:	080061d3 	.word	0x080061d3

08006428 <_printf_common>:
 8006428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	4616      	mov	r6, r2
 800642e:	4698      	mov	r8, r3
 8006430:	688a      	ldr	r2, [r1, #8]
 8006432:	690b      	ldr	r3, [r1, #16]
 8006434:	4607      	mov	r7, r0
 8006436:	4293      	cmp	r3, r2
 8006438:	bfb8      	it	lt
 800643a:	4613      	movlt	r3, r2
 800643c:	6033      	str	r3, [r6, #0]
 800643e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006442:	460c      	mov	r4, r1
 8006444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006448:	b10a      	cbz	r2, 800644e <_printf_common+0x26>
 800644a:	3301      	adds	r3, #1
 800644c:	6033      	str	r3, [r6, #0]
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	0699      	lsls	r1, r3, #26
 8006452:	bf42      	ittt	mi
 8006454:	6833      	ldrmi	r3, [r6, #0]
 8006456:	3302      	addmi	r3, #2
 8006458:	6033      	strmi	r3, [r6, #0]
 800645a:	6825      	ldr	r5, [r4, #0]
 800645c:	f015 0506 	ands.w	r5, r5, #6
 8006460:	d106      	bne.n	8006470 <_printf_common+0x48>
 8006462:	f104 0a19 	add.w	sl, r4, #25
 8006466:	68e3      	ldr	r3, [r4, #12]
 8006468:	6832      	ldr	r2, [r6, #0]
 800646a:	1a9b      	subs	r3, r3, r2
 800646c:	42ab      	cmp	r3, r5
 800646e:	dc2b      	bgt.n	80064c8 <_printf_common+0xa0>
 8006470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006474:	6822      	ldr	r2, [r4, #0]
 8006476:	3b00      	subs	r3, #0
 8006478:	bf18      	it	ne
 800647a:	2301      	movne	r3, #1
 800647c:	0692      	lsls	r2, r2, #26
 800647e:	d430      	bmi.n	80064e2 <_printf_common+0xba>
 8006480:	4641      	mov	r1, r8
 8006482:	4638      	mov	r0, r7
 8006484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006488:	47c8      	blx	r9
 800648a:	3001      	adds	r0, #1
 800648c:	d023      	beq.n	80064d6 <_printf_common+0xae>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	6922      	ldr	r2, [r4, #16]
 8006492:	f003 0306 	and.w	r3, r3, #6
 8006496:	2b04      	cmp	r3, #4
 8006498:	bf14      	ite	ne
 800649a:	2500      	movne	r5, #0
 800649c:	6833      	ldreq	r3, [r6, #0]
 800649e:	f04f 0600 	mov.w	r6, #0
 80064a2:	bf08      	it	eq
 80064a4:	68e5      	ldreq	r5, [r4, #12]
 80064a6:	f104 041a 	add.w	r4, r4, #26
 80064aa:	bf08      	it	eq
 80064ac:	1aed      	subeq	r5, r5, r3
 80064ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80064b2:	bf08      	it	eq
 80064b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b8:	4293      	cmp	r3, r2
 80064ba:	bfc4      	itt	gt
 80064bc:	1a9b      	subgt	r3, r3, r2
 80064be:	18ed      	addgt	r5, r5, r3
 80064c0:	42b5      	cmp	r5, r6
 80064c2:	d11a      	bne.n	80064fa <_printf_common+0xd2>
 80064c4:	2000      	movs	r0, #0
 80064c6:	e008      	b.n	80064da <_printf_common+0xb2>
 80064c8:	2301      	movs	r3, #1
 80064ca:	4652      	mov	r2, sl
 80064cc:	4641      	mov	r1, r8
 80064ce:	4638      	mov	r0, r7
 80064d0:	47c8      	blx	r9
 80064d2:	3001      	adds	r0, #1
 80064d4:	d103      	bne.n	80064de <_printf_common+0xb6>
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295
 80064da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064de:	3501      	adds	r5, #1
 80064e0:	e7c1      	b.n	8006466 <_printf_common+0x3e>
 80064e2:	2030      	movs	r0, #48	@ 0x30
 80064e4:	18e1      	adds	r1, r4, r3
 80064e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064f0:	4422      	add	r2, r4
 80064f2:	3302      	adds	r3, #2
 80064f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064f8:	e7c2      	b.n	8006480 <_printf_common+0x58>
 80064fa:	2301      	movs	r3, #1
 80064fc:	4622      	mov	r2, r4
 80064fe:	4641      	mov	r1, r8
 8006500:	4638      	mov	r0, r7
 8006502:	47c8      	blx	r9
 8006504:	3001      	adds	r0, #1
 8006506:	d0e6      	beq.n	80064d6 <_printf_common+0xae>
 8006508:	3601      	adds	r6, #1
 800650a:	e7d9      	b.n	80064c0 <_printf_common+0x98>

0800650c <_printf_i>:
 800650c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006510:	7e0f      	ldrb	r7, [r1, #24]
 8006512:	4691      	mov	r9, r2
 8006514:	2f78      	cmp	r7, #120	@ 0x78
 8006516:	4680      	mov	r8, r0
 8006518:	460c      	mov	r4, r1
 800651a:	469a      	mov	sl, r3
 800651c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800651e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006522:	d807      	bhi.n	8006534 <_printf_i+0x28>
 8006524:	2f62      	cmp	r7, #98	@ 0x62
 8006526:	d80a      	bhi.n	800653e <_printf_i+0x32>
 8006528:	2f00      	cmp	r7, #0
 800652a:	f000 80d1 	beq.w	80066d0 <_printf_i+0x1c4>
 800652e:	2f58      	cmp	r7, #88	@ 0x58
 8006530:	f000 80b8 	beq.w	80066a4 <_printf_i+0x198>
 8006534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800653c:	e03a      	b.n	80065b4 <_printf_i+0xa8>
 800653e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006542:	2b15      	cmp	r3, #21
 8006544:	d8f6      	bhi.n	8006534 <_printf_i+0x28>
 8006546:	a101      	add	r1, pc, #4	@ (adr r1, 800654c <_printf_i+0x40>)
 8006548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800654c:	080065a5 	.word	0x080065a5
 8006550:	080065b9 	.word	0x080065b9
 8006554:	08006535 	.word	0x08006535
 8006558:	08006535 	.word	0x08006535
 800655c:	08006535 	.word	0x08006535
 8006560:	08006535 	.word	0x08006535
 8006564:	080065b9 	.word	0x080065b9
 8006568:	08006535 	.word	0x08006535
 800656c:	08006535 	.word	0x08006535
 8006570:	08006535 	.word	0x08006535
 8006574:	08006535 	.word	0x08006535
 8006578:	080066b7 	.word	0x080066b7
 800657c:	080065e3 	.word	0x080065e3
 8006580:	08006671 	.word	0x08006671
 8006584:	08006535 	.word	0x08006535
 8006588:	08006535 	.word	0x08006535
 800658c:	080066d9 	.word	0x080066d9
 8006590:	08006535 	.word	0x08006535
 8006594:	080065e3 	.word	0x080065e3
 8006598:	08006535 	.word	0x08006535
 800659c:	08006535 	.word	0x08006535
 80065a0:	08006679 	.word	0x08006679
 80065a4:	6833      	ldr	r3, [r6, #0]
 80065a6:	1d1a      	adds	r2, r3, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6032      	str	r2, [r6, #0]
 80065ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065b4:	2301      	movs	r3, #1
 80065b6:	e09c      	b.n	80066f2 <_printf_i+0x1e6>
 80065b8:	6833      	ldr	r3, [r6, #0]
 80065ba:	6820      	ldr	r0, [r4, #0]
 80065bc:	1d19      	adds	r1, r3, #4
 80065be:	6031      	str	r1, [r6, #0]
 80065c0:	0606      	lsls	r6, r0, #24
 80065c2:	d501      	bpl.n	80065c8 <_printf_i+0xbc>
 80065c4:	681d      	ldr	r5, [r3, #0]
 80065c6:	e003      	b.n	80065d0 <_printf_i+0xc4>
 80065c8:	0645      	lsls	r5, r0, #25
 80065ca:	d5fb      	bpl.n	80065c4 <_printf_i+0xb8>
 80065cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065d0:	2d00      	cmp	r5, #0
 80065d2:	da03      	bge.n	80065dc <_printf_i+0xd0>
 80065d4:	232d      	movs	r3, #45	@ 0x2d
 80065d6:	426d      	negs	r5, r5
 80065d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065dc:	230a      	movs	r3, #10
 80065de:	4858      	ldr	r0, [pc, #352]	@ (8006740 <_printf_i+0x234>)
 80065e0:	e011      	b.n	8006606 <_printf_i+0xfa>
 80065e2:	6821      	ldr	r1, [r4, #0]
 80065e4:	6833      	ldr	r3, [r6, #0]
 80065e6:	0608      	lsls	r0, r1, #24
 80065e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80065ec:	d402      	bmi.n	80065f4 <_printf_i+0xe8>
 80065ee:	0649      	lsls	r1, r1, #25
 80065f0:	bf48      	it	mi
 80065f2:	b2ad      	uxthmi	r5, r5
 80065f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80065f6:	6033      	str	r3, [r6, #0]
 80065f8:	bf14      	ite	ne
 80065fa:	230a      	movne	r3, #10
 80065fc:	2308      	moveq	r3, #8
 80065fe:	4850      	ldr	r0, [pc, #320]	@ (8006740 <_printf_i+0x234>)
 8006600:	2100      	movs	r1, #0
 8006602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006606:	6866      	ldr	r6, [r4, #4]
 8006608:	2e00      	cmp	r6, #0
 800660a:	60a6      	str	r6, [r4, #8]
 800660c:	db05      	blt.n	800661a <_printf_i+0x10e>
 800660e:	6821      	ldr	r1, [r4, #0]
 8006610:	432e      	orrs	r6, r5
 8006612:	f021 0104 	bic.w	r1, r1, #4
 8006616:	6021      	str	r1, [r4, #0]
 8006618:	d04b      	beq.n	80066b2 <_printf_i+0x1a6>
 800661a:	4616      	mov	r6, r2
 800661c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006620:	fb03 5711 	mls	r7, r3, r1, r5
 8006624:	5dc7      	ldrb	r7, [r0, r7]
 8006626:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800662a:	462f      	mov	r7, r5
 800662c:	42bb      	cmp	r3, r7
 800662e:	460d      	mov	r5, r1
 8006630:	d9f4      	bls.n	800661c <_printf_i+0x110>
 8006632:	2b08      	cmp	r3, #8
 8006634:	d10b      	bne.n	800664e <_printf_i+0x142>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	07df      	lsls	r7, r3, #31
 800663a:	d508      	bpl.n	800664e <_printf_i+0x142>
 800663c:	6923      	ldr	r3, [r4, #16]
 800663e:	6861      	ldr	r1, [r4, #4]
 8006640:	4299      	cmp	r1, r3
 8006642:	bfde      	ittt	le
 8006644:	2330      	movle	r3, #48	@ 0x30
 8006646:	f806 3c01 	strble.w	r3, [r6, #-1]
 800664a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800664e:	1b92      	subs	r2, r2, r6
 8006650:	6122      	str	r2, [r4, #16]
 8006652:	464b      	mov	r3, r9
 8006654:	4621      	mov	r1, r4
 8006656:	4640      	mov	r0, r8
 8006658:	f8cd a000 	str.w	sl, [sp]
 800665c:	aa03      	add	r2, sp, #12
 800665e:	f7ff fee3 	bl	8006428 <_printf_common>
 8006662:	3001      	adds	r0, #1
 8006664:	d14a      	bne.n	80066fc <_printf_i+0x1f0>
 8006666:	f04f 30ff 	mov.w	r0, #4294967295
 800666a:	b004      	add	sp, #16
 800666c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	f043 0320 	orr.w	r3, r3, #32
 8006676:	6023      	str	r3, [r4, #0]
 8006678:	2778      	movs	r7, #120	@ 0x78
 800667a:	4832      	ldr	r0, [pc, #200]	@ (8006744 <_printf_i+0x238>)
 800667c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	6831      	ldr	r1, [r6, #0]
 8006684:	061f      	lsls	r7, r3, #24
 8006686:	f851 5b04 	ldr.w	r5, [r1], #4
 800668a:	d402      	bmi.n	8006692 <_printf_i+0x186>
 800668c:	065f      	lsls	r7, r3, #25
 800668e:	bf48      	it	mi
 8006690:	b2ad      	uxthmi	r5, r5
 8006692:	6031      	str	r1, [r6, #0]
 8006694:	07d9      	lsls	r1, r3, #31
 8006696:	bf44      	itt	mi
 8006698:	f043 0320 	orrmi.w	r3, r3, #32
 800669c:	6023      	strmi	r3, [r4, #0]
 800669e:	b11d      	cbz	r5, 80066a8 <_printf_i+0x19c>
 80066a0:	2310      	movs	r3, #16
 80066a2:	e7ad      	b.n	8006600 <_printf_i+0xf4>
 80066a4:	4826      	ldr	r0, [pc, #152]	@ (8006740 <_printf_i+0x234>)
 80066a6:	e7e9      	b.n	800667c <_printf_i+0x170>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	f023 0320 	bic.w	r3, r3, #32
 80066ae:	6023      	str	r3, [r4, #0]
 80066b0:	e7f6      	b.n	80066a0 <_printf_i+0x194>
 80066b2:	4616      	mov	r6, r2
 80066b4:	e7bd      	b.n	8006632 <_printf_i+0x126>
 80066b6:	6833      	ldr	r3, [r6, #0]
 80066b8:	6825      	ldr	r5, [r4, #0]
 80066ba:	1d18      	adds	r0, r3, #4
 80066bc:	6961      	ldr	r1, [r4, #20]
 80066be:	6030      	str	r0, [r6, #0]
 80066c0:	062e      	lsls	r6, r5, #24
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	d501      	bpl.n	80066ca <_printf_i+0x1be>
 80066c6:	6019      	str	r1, [r3, #0]
 80066c8:	e002      	b.n	80066d0 <_printf_i+0x1c4>
 80066ca:	0668      	lsls	r0, r5, #25
 80066cc:	d5fb      	bpl.n	80066c6 <_printf_i+0x1ba>
 80066ce:	8019      	strh	r1, [r3, #0]
 80066d0:	2300      	movs	r3, #0
 80066d2:	4616      	mov	r6, r2
 80066d4:	6123      	str	r3, [r4, #16]
 80066d6:	e7bc      	b.n	8006652 <_printf_i+0x146>
 80066d8:	6833      	ldr	r3, [r6, #0]
 80066da:	2100      	movs	r1, #0
 80066dc:	1d1a      	adds	r2, r3, #4
 80066de:	6032      	str	r2, [r6, #0]
 80066e0:	681e      	ldr	r6, [r3, #0]
 80066e2:	6862      	ldr	r2, [r4, #4]
 80066e4:	4630      	mov	r0, r6
 80066e6:	f000 f97b 	bl	80069e0 <memchr>
 80066ea:	b108      	cbz	r0, 80066f0 <_printf_i+0x1e4>
 80066ec:	1b80      	subs	r0, r0, r6
 80066ee:	6060      	str	r0, [r4, #4]
 80066f0:	6863      	ldr	r3, [r4, #4]
 80066f2:	6123      	str	r3, [r4, #16]
 80066f4:	2300      	movs	r3, #0
 80066f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066fa:	e7aa      	b.n	8006652 <_printf_i+0x146>
 80066fc:	4632      	mov	r2, r6
 80066fe:	4649      	mov	r1, r9
 8006700:	4640      	mov	r0, r8
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	47d0      	blx	sl
 8006706:	3001      	adds	r0, #1
 8006708:	d0ad      	beq.n	8006666 <_printf_i+0x15a>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	079b      	lsls	r3, r3, #30
 800670e:	d413      	bmi.n	8006738 <_printf_i+0x22c>
 8006710:	68e0      	ldr	r0, [r4, #12]
 8006712:	9b03      	ldr	r3, [sp, #12]
 8006714:	4298      	cmp	r0, r3
 8006716:	bfb8      	it	lt
 8006718:	4618      	movlt	r0, r3
 800671a:	e7a6      	b.n	800666a <_printf_i+0x15e>
 800671c:	2301      	movs	r3, #1
 800671e:	4632      	mov	r2, r6
 8006720:	4649      	mov	r1, r9
 8006722:	4640      	mov	r0, r8
 8006724:	47d0      	blx	sl
 8006726:	3001      	adds	r0, #1
 8006728:	d09d      	beq.n	8006666 <_printf_i+0x15a>
 800672a:	3501      	adds	r5, #1
 800672c:	68e3      	ldr	r3, [r4, #12]
 800672e:	9903      	ldr	r1, [sp, #12]
 8006730:	1a5b      	subs	r3, r3, r1
 8006732:	42ab      	cmp	r3, r5
 8006734:	dcf2      	bgt.n	800671c <_printf_i+0x210>
 8006736:	e7eb      	b.n	8006710 <_printf_i+0x204>
 8006738:	2500      	movs	r5, #0
 800673a:	f104 0619 	add.w	r6, r4, #25
 800673e:	e7f5      	b.n	800672c <_printf_i+0x220>
 8006740:	08006bfb 	.word	0x08006bfb
 8006744:	08006c0c 	.word	0x08006c0c

08006748 <__sflush_r>:
 8006748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	0716      	lsls	r6, r2, #28
 8006750:	4605      	mov	r5, r0
 8006752:	460c      	mov	r4, r1
 8006754:	d454      	bmi.n	8006800 <__sflush_r+0xb8>
 8006756:	684b      	ldr	r3, [r1, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	dc02      	bgt.n	8006762 <__sflush_r+0x1a>
 800675c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	dd48      	ble.n	80067f4 <__sflush_r+0xac>
 8006762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006764:	2e00      	cmp	r6, #0
 8006766:	d045      	beq.n	80067f4 <__sflush_r+0xac>
 8006768:	2300      	movs	r3, #0
 800676a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800676e:	682f      	ldr	r7, [r5, #0]
 8006770:	6a21      	ldr	r1, [r4, #32]
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	d030      	beq.n	80067d8 <__sflush_r+0x90>
 8006776:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	0759      	lsls	r1, r3, #29
 800677c:	d505      	bpl.n	800678a <__sflush_r+0x42>
 800677e:	6863      	ldr	r3, [r4, #4]
 8006780:	1ad2      	subs	r2, r2, r3
 8006782:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006784:	b10b      	cbz	r3, 800678a <__sflush_r+0x42>
 8006786:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006788:	1ad2      	subs	r2, r2, r3
 800678a:	2300      	movs	r3, #0
 800678c:	4628      	mov	r0, r5
 800678e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006790:	6a21      	ldr	r1, [r4, #32]
 8006792:	47b0      	blx	r6
 8006794:	1c43      	adds	r3, r0, #1
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	d106      	bne.n	80067a8 <__sflush_r+0x60>
 800679a:	6829      	ldr	r1, [r5, #0]
 800679c:	291d      	cmp	r1, #29
 800679e:	d82b      	bhi.n	80067f8 <__sflush_r+0xb0>
 80067a0:	4a28      	ldr	r2, [pc, #160]	@ (8006844 <__sflush_r+0xfc>)
 80067a2:	40ca      	lsrs	r2, r1
 80067a4:	07d6      	lsls	r6, r2, #31
 80067a6:	d527      	bpl.n	80067f8 <__sflush_r+0xb0>
 80067a8:	2200      	movs	r2, #0
 80067aa:	6062      	str	r2, [r4, #4]
 80067ac:	6922      	ldr	r2, [r4, #16]
 80067ae:	04d9      	lsls	r1, r3, #19
 80067b0:	6022      	str	r2, [r4, #0]
 80067b2:	d504      	bpl.n	80067be <__sflush_r+0x76>
 80067b4:	1c42      	adds	r2, r0, #1
 80067b6:	d101      	bne.n	80067bc <__sflush_r+0x74>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b903      	cbnz	r3, 80067be <__sflush_r+0x76>
 80067bc:	6560      	str	r0, [r4, #84]	@ 0x54
 80067be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067c0:	602f      	str	r7, [r5, #0]
 80067c2:	b1b9      	cbz	r1, 80067f4 <__sflush_r+0xac>
 80067c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067c8:	4299      	cmp	r1, r3
 80067ca:	d002      	beq.n	80067d2 <__sflush_r+0x8a>
 80067cc:	4628      	mov	r0, r5
 80067ce:	f7ff fbf5 	bl	8005fbc <_free_r>
 80067d2:	2300      	movs	r3, #0
 80067d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80067d6:	e00d      	b.n	80067f4 <__sflush_r+0xac>
 80067d8:	2301      	movs	r3, #1
 80067da:	4628      	mov	r0, r5
 80067dc:	47b0      	blx	r6
 80067de:	4602      	mov	r2, r0
 80067e0:	1c50      	adds	r0, r2, #1
 80067e2:	d1c9      	bne.n	8006778 <__sflush_r+0x30>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0c6      	beq.n	8006778 <__sflush_r+0x30>
 80067ea:	2b1d      	cmp	r3, #29
 80067ec:	d001      	beq.n	80067f2 <__sflush_r+0xaa>
 80067ee:	2b16      	cmp	r3, #22
 80067f0:	d11d      	bne.n	800682e <__sflush_r+0xe6>
 80067f2:	602f      	str	r7, [r5, #0]
 80067f4:	2000      	movs	r0, #0
 80067f6:	e021      	b.n	800683c <__sflush_r+0xf4>
 80067f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067fc:	b21b      	sxth	r3, r3
 80067fe:	e01a      	b.n	8006836 <__sflush_r+0xee>
 8006800:	690f      	ldr	r7, [r1, #16]
 8006802:	2f00      	cmp	r7, #0
 8006804:	d0f6      	beq.n	80067f4 <__sflush_r+0xac>
 8006806:	0793      	lsls	r3, r2, #30
 8006808:	bf18      	it	ne
 800680a:	2300      	movne	r3, #0
 800680c:	680e      	ldr	r6, [r1, #0]
 800680e:	bf08      	it	eq
 8006810:	694b      	ldreq	r3, [r1, #20]
 8006812:	1bf6      	subs	r6, r6, r7
 8006814:	600f      	str	r7, [r1, #0]
 8006816:	608b      	str	r3, [r1, #8]
 8006818:	2e00      	cmp	r6, #0
 800681a:	ddeb      	ble.n	80067f4 <__sflush_r+0xac>
 800681c:	4633      	mov	r3, r6
 800681e:	463a      	mov	r2, r7
 8006820:	4628      	mov	r0, r5
 8006822:	6a21      	ldr	r1, [r4, #32]
 8006824:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006828:	47e0      	blx	ip
 800682a:	2800      	cmp	r0, #0
 800682c:	dc07      	bgt.n	800683e <__sflush_r+0xf6>
 800682e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006836:	f04f 30ff 	mov.w	r0, #4294967295
 800683a:	81a3      	strh	r3, [r4, #12]
 800683c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683e:	4407      	add	r7, r0
 8006840:	1a36      	subs	r6, r6, r0
 8006842:	e7e9      	b.n	8006818 <__sflush_r+0xd0>
 8006844:	20400001 	.word	0x20400001

08006848 <_fflush_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	690b      	ldr	r3, [r1, #16]
 800684c:	4605      	mov	r5, r0
 800684e:	460c      	mov	r4, r1
 8006850:	b913      	cbnz	r3, 8006858 <_fflush_r+0x10>
 8006852:	2500      	movs	r5, #0
 8006854:	4628      	mov	r0, r5
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	b118      	cbz	r0, 8006862 <_fflush_r+0x1a>
 800685a:	6a03      	ldr	r3, [r0, #32]
 800685c:	b90b      	cbnz	r3, 8006862 <_fflush_r+0x1a>
 800685e:	f7ff faa5 	bl	8005dac <__sinit>
 8006862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f3      	beq.n	8006852 <_fflush_r+0xa>
 800686a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800686c:	07d0      	lsls	r0, r2, #31
 800686e:	d404      	bmi.n	800687a <_fflush_r+0x32>
 8006870:	0599      	lsls	r1, r3, #22
 8006872:	d402      	bmi.n	800687a <_fflush_r+0x32>
 8006874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006876:	f7ff fb9e 	bl	8005fb6 <__retarget_lock_acquire_recursive>
 800687a:	4628      	mov	r0, r5
 800687c:	4621      	mov	r1, r4
 800687e:	f7ff ff63 	bl	8006748 <__sflush_r>
 8006882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006884:	4605      	mov	r5, r0
 8006886:	07da      	lsls	r2, r3, #31
 8006888:	d4e4      	bmi.n	8006854 <_fflush_r+0xc>
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	059b      	lsls	r3, r3, #22
 800688e:	d4e1      	bmi.n	8006854 <_fflush_r+0xc>
 8006890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006892:	f7ff fb91 	bl	8005fb8 <__retarget_lock_release_recursive>
 8006896:	e7dd      	b.n	8006854 <_fflush_r+0xc>

08006898 <__swbuf_r>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	460e      	mov	r6, r1
 800689c:	4614      	mov	r4, r2
 800689e:	4605      	mov	r5, r0
 80068a0:	b118      	cbz	r0, 80068aa <__swbuf_r+0x12>
 80068a2:	6a03      	ldr	r3, [r0, #32]
 80068a4:	b90b      	cbnz	r3, 80068aa <__swbuf_r+0x12>
 80068a6:	f7ff fa81 	bl	8005dac <__sinit>
 80068aa:	69a3      	ldr	r3, [r4, #24]
 80068ac:	60a3      	str	r3, [r4, #8]
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	071a      	lsls	r2, r3, #28
 80068b2:	d501      	bpl.n	80068b8 <__swbuf_r+0x20>
 80068b4:	6923      	ldr	r3, [r4, #16]
 80068b6:	b943      	cbnz	r3, 80068ca <__swbuf_r+0x32>
 80068b8:	4621      	mov	r1, r4
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 f82a 	bl	8006914 <__swsetup_r>
 80068c0:	b118      	cbz	r0, 80068ca <__swbuf_r+0x32>
 80068c2:	f04f 37ff 	mov.w	r7, #4294967295
 80068c6:	4638      	mov	r0, r7
 80068c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	6922      	ldr	r2, [r4, #16]
 80068ce:	b2f6      	uxtb	r6, r6
 80068d0:	1a98      	subs	r0, r3, r2
 80068d2:	6963      	ldr	r3, [r4, #20]
 80068d4:	4637      	mov	r7, r6
 80068d6:	4283      	cmp	r3, r0
 80068d8:	dc05      	bgt.n	80068e6 <__swbuf_r+0x4e>
 80068da:	4621      	mov	r1, r4
 80068dc:	4628      	mov	r0, r5
 80068de:	f7ff ffb3 	bl	8006848 <_fflush_r>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d1ed      	bne.n	80068c2 <__swbuf_r+0x2a>
 80068e6:	68a3      	ldr	r3, [r4, #8]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	60a3      	str	r3, [r4, #8]
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	6022      	str	r2, [r4, #0]
 80068f2:	701e      	strb	r6, [r3, #0]
 80068f4:	6962      	ldr	r2, [r4, #20]
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d004      	beq.n	8006906 <__swbuf_r+0x6e>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	07db      	lsls	r3, r3, #31
 8006900:	d5e1      	bpl.n	80068c6 <__swbuf_r+0x2e>
 8006902:	2e0a      	cmp	r6, #10
 8006904:	d1df      	bne.n	80068c6 <__swbuf_r+0x2e>
 8006906:	4621      	mov	r1, r4
 8006908:	4628      	mov	r0, r5
 800690a:	f7ff ff9d 	bl	8006848 <_fflush_r>
 800690e:	2800      	cmp	r0, #0
 8006910:	d0d9      	beq.n	80068c6 <__swbuf_r+0x2e>
 8006912:	e7d6      	b.n	80068c2 <__swbuf_r+0x2a>

08006914 <__swsetup_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4b29      	ldr	r3, [pc, #164]	@ (80069bc <__swsetup_r+0xa8>)
 8006918:	4605      	mov	r5, r0
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	460c      	mov	r4, r1
 800691e:	b118      	cbz	r0, 8006928 <__swsetup_r+0x14>
 8006920:	6a03      	ldr	r3, [r0, #32]
 8006922:	b90b      	cbnz	r3, 8006928 <__swsetup_r+0x14>
 8006924:	f7ff fa42 	bl	8005dac <__sinit>
 8006928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800692c:	0719      	lsls	r1, r3, #28
 800692e:	d422      	bmi.n	8006976 <__swsetup_r+0x62>
 8006930:	06da      	lsls	r2, r3, #27
 8006932:	d407      	bmi.n	8006944 <__swsetup_r+0x30>
 8006934:	2209      	movs	r2, #9
 8006936:	602a      	str	r2, [r5, #0]
 8006938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800693c:	f04f 30ff 	mov.w	r0, #4294967295
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	e033      	b.n	80069ac <__swsetup_r+0x98>
 8006944:	0758      	lsls	r0, r3, #29
 8006946:	d512      	bpl.n	800696e <__swsetup_r+0x5a>
 8006948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800694a:	b141      	cbz	r1, 800695e <__swsetup_r+0x4a>
 800694c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006950:	4299      	cmp	r1, r3
 8006952:	d002      	beq.n	800695a <__swsetup_r+0x46>
 8006954:	4628      	mov	r0, r5
 8006956:	f7ff fb31 	bl	8005fbc <_free_r>
 800695a:	2300      	movs	r3, #0
 800695c:	6363      	str	r3, [r4, #52]	@ 0x34
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006964:	81a3      	strh	r3, [r4, #12]
 8006966:	2300      	movs	r3, #0
 8006968:	6063      	str	r3, [r4, #4]
 800696a:	6923      	ldr	r3, [r4, #16]
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f043 0308 	orr.w	r3, r3, #8
 8006974:	81a3      	strh	r3, [r4, #12]
 8006976:	6923      	ldr	r3, [r4, #16]
 8006978:	b94b      	cbnz	r3, 800698e <__swsetup_r+0x7a>
 800697a:	89a3      	ldrh	r3, [r4, #12]
 800697c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006984:	d003      	beq.n	800698e <__swsetup_r+0x7a>
 8006986:	4621      	mov	r1, r4
 8006988:	4628      	mov	r0, r5
 800698a:	f000 f85c 	bl	8006a46 <__smakebuf_r>
 800698e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006992:	f013 0201 	ands.w	r2, r3, #1
 8006996:	d00a      	beq.n	80069ae <__swsetup_r+0x9a>
 8006998:	2200      	movs	r2, #0
 800699a:	60a2      	str	r2, [r4, #8]
 800699c:	6962      	ldr	r2, [r4, #20]
 800699e:	4252      	negs	r2, r2
 80069a0:	61a2      	str	r2, [r4, #24]
 80069a2:	6922      	ldr	r2, [r4, #16]
 80069a4:	b942      	cbnz	r2, 80069b8 <__swsetup_r+0xa4>
 80069a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069aa:	d1c5      	bne.n	8006938 <__swsetup_r+0x24>
 80069ac:	bd38      	pop	{r3, r4, r5, pc}
 80069ae:	0799      	lsls	r1, r3, #30
 80069b0:	bf58      	it	pl
 80069b2:	6962      	ldrpl	r2, [r4, #20]
 80069b4:	60a2      	str	r2, [r4, #8]
 80069b6:	e7f4      	b.n	80069a2 <__swsetup_r+0x8e>
 80069b8:	2000      	movs	r0, #0
 80069ba:	e7f7      	b.n	80069ac <__swsetup_r+0x98>
 80069bc:	20000024 	.word	0x20000024

080069c0 <_sbrk_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	2300      	movs	r3, #0
 80069c4:	4d05      	ldr	r5, [pc, #20]	@ (80069dc <_sbrk_r+0x1c>)
 80069c6:	4604      	mov	r4, r0
 80069c8:	4608      	mov	r0, r1
 80069ca:	602b      	str	r3, [r5, #0]
 80069cc:	f7fa fd8c 	bl	80014e8 <_sbrk>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_sbrk_r+0x1a>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_sbrk_r+0x1a>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	20000398 	.word	0x20000398

080069e0 <memchr>:
 80069e0:	4603      	mov	r3, r0
 80069e2:	b510      	push	{r4, lr}
 80069e4:	b2c9      	uxtb	r1, r1
 80069e6:	4402      	add	r2, r0
 80069e8:	4293      	cmp	r3, r2
 80069ea:	4618      	mov	r0, r3
 80069ec:	d101      	bne.n	80069f2 <memchr+0x12>
 80069ee:	2000      	movs	r0, #0
 80069f0:	e003      	b.n	80069fa <memchr+0x1a>
 80069f2:	7804      	ldrb	r4, [r0, #0]
 80069f4:	3301      	adds	r3, #1
 80069f6:	428c      	cmp	r4, r1
 80069f8:	d1f6      	bne.n	80069e8 <memchr+0x8>
 80069fa:	bd10      	pop	{r4, pc}

080069fc <__swhatbuf_r>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	460c      	mov	r4, r1
 8006a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a04:	4615      	mov	r5, r2
 8006a06:	2900      	cmp	r1, #0
 8006a08:	461e      	mov	r6, r3
 8006a0a:	b096      	sub	sp, #88	@ 0x58
 8006a0c:	da0c      	bge.n	8006a28 <__swhatbuf_r+0x2c>
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	2100      	movs	r1, #0
 8006a12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a16:	bf14      	ite	ne
 8006a18:	2340      	movne	r3, #64	@ 0x40
 8006a1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a1e:	2000      	movs	r0, #0
 8006a20:	6031      	str	r1, [r6, #0]
 8006a22:	602b      	str	r3, [r5, #0]
 8006a24:	b016      	add	sp, #88	@ 0x58
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	466a      	mov	r2, sp
 8006a2a:	f000 f849 	bl	8006ac0 <_fstat_r>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	dbed      	blt.n	8006a0e <__swhatbuf_r+0x12>
 8006a32:	9901      	ldr	r1, [sp, #4]
 8006a34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a3c:	4259      	negs	r1, r3
 8006a3e:	4159      	adcs	r1, r3
 8006a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a44:	e7eb      	b.n	8006a1e <__swhatbuf_r+0x22>

08006a46 <__smakebuf_r>:
 8006a46:	898b      	ldrh	r3, [r1, #12]
 8006a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a4a:	079d      	lsls	r5, r3, #30
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	d507      	bpl.n	8006a62 <__smakebuf_r+0x1c>
 8006a52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	6123      	str	r3, [r4, #16]
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	6163      	str	r3, [r4, #20]
 8006a5e:	b003      	add	sp, #12
 8006a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a62:	466a      	mov	r2, sp
 8006a64:	ab01      	add	r3, sp, #4
 8006a66:	f7ff ffc9 	bl	80069fc <__swhatbuf_r>
 8006a6a:	9f00      	ldr	r7, [sp, #0]
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	4639      	mov	r1, r7
 8006a70:	4630      	mov	r0, r6
 8006a72:	f7ff fb0d 	bl	8006090 <_malloc_r>
 8006a76:	b948      	cbnz	r0, 8006a8c <__smakebuf_r+0x46>
 8006a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7c:	059a      	lsls	r2, r3, #22
 8006a7e:	d4ee      	bmi.n	8006a5e <__smakebuf_r+0x18>
 8006a80:	f023 0303 	bic.w	r3, r3, #3
 8006a84:	f043 0302 	orr.w	r3, r3, #2
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	e7e2      	b.n	8006a52 <__smakebuf_r+0xc>
 8006a8c:	89a3      	ldrh	r3, [r4, #12]
 8006a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a96:	81a3      	strh	r3, [r4, #12]
 8006a98:	9b01      	ldr	r3, [sp, #4]
 8006a9a:	6020      	str	r0, [r4, #0]
 8006a9c:	b15b      	cbz	r3, 8006ab6 <__smakebuf_r+0x70>
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa4:	f000 f81e 	bl	8006ae4 <_isatty_r>
 8006aa8:	b128      	cbz	r0, 8006ab6 <__smakebuf_r+0x70>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	f023 0303 	bic.w	r3, r3, #3
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	431d      	orrs	r5, r3
 8006aba:	81a5      	strh	r5, [r4, #12]
 8006abc:	e7cf      	b.n	8006a5e <__smakebuf_r+0x18>
	...

08006ac0 <_fstat_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4d06      	ldr	r5, [pc, #24]	@ (8006ae0 <_fstat_r+0x20>)
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	f7fa fce5 	bl	800149c <_fstat>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d102      	bne.n	8006adc <_fstat_r+0x1c>
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	b103      	cbz	r3, 8006adc <_fstat_r+0x1c>
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000398 	.word	0x20000398

08006ae4 <_isatty_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4d05      	ldr	r5, [pc, #20]	@ (8006b00 <_isatty_r+0x1c>)
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f7fa fce3 	bl	80014ba <_isatty>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_isatty_r+0x1a>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_isatty_r+0x1a>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20000398 	.word	0x20000398

08006b04 <_init>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr

08006b10 <_fini>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	bf00      	nop
 8006b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b16:	bc08      	pop	{r3}
 8006b18:	469e      	mov	lr, r3
 8006b1a:	4770      	bx	lr
